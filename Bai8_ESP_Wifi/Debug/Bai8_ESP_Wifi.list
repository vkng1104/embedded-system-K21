
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008028  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003018  080081b8  080081b8  000181b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1d0  0800b1d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1d0  0800b1d0  0001b1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1d8  0800b1d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1d8  0800b1d8  0001b1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1dc  0800b1dc  0001b1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b1e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000458  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c8  200004c8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002170a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004423  00000000  00000000  000417aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001670  00000000  00000000  00045bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c8  00000000  00000000  00047240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a0b  00000000  00000000  00048708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f42d  00000000  00000000  0006f113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dffc2  00000000  00000000  0008e540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016e502  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006104  00000000  00000000  0016e558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081a0 	.word	0x080081a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080081a0 	.word	0x080081a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b96e 	b.w	8000d40 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468c      	mov	ip, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f040 8083 	bne.w	8000b92 <__udivmoddi4+0x116>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4617      	mov	r7, r2
 8000a90:	d947      	bls.n	8000b22 <__udivmoddi4+0xa6>
 8000a92:	fab2 f282 	clz	r2, r2
 8000a96:	b142      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	f1c2 0020 	rsb	r0, r2, #32
 8000a9c:	fa24 f000 	lsr.w	r0, r4, r0
 8000aa0:	4091      	lsls	r1, r2
 8000aa2:	4097      	lsls	r7, r2
 8000aa4:	ea40 0c01 	orr.w	ip, r0, r1
 8000aa8:	4094      	lsls	r4, r2
 8000aaa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ab4:	fa1f fe87 	uxth.w	lr, r7
 8000ab8:	fb08 c116 	mls	r1, r8, r6, ip
 8000abc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ac4:	4299      	cmp	r1, r3
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x60>
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ace:	f080 8119 	bcs.w	8000d04 <__udivmoddi4+0x288>
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	f240 8116 	bls.w	8000d04 <__udivmoddi4+0x288>
 8000ad8:	3e02      	subs	r6, #2
 8000ada:	443b      	add	r3, r7
 8000adc:	1a5b      	subs	r3, r3, r1
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000af0:	45a6      	cmp	lr, r4
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x8c>
 8000af4:	193c      	adds	r4, r7, r4
 8000af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000afa:	f080 8105 	bcs.w	8000d08 <__udivmoddi4+0x28c>
 8000afe:	45a6      	cmp	lr, r4
 8000b00:	f240 8102 	bls.w	8000d08 <__udivmoddi4+0x28c>
 8000b04:	3802      	subs	r0, #2
 8000b06:	443c      	add	r4, r7
 8000b08:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0c:	eba4 040e 	sub.w	r4, r4, lr
 8000b10:	2600      	movs	r6, #0
 8000b12:	b11d      	cbz	r5, 8000b1c <__udivmoddi4+0xa0>
 8000b14:	40d4      	lsrs	r4, r2
 8000b16:	2300      	movs	r3, #0
 8000b18:	e9c5 4300 	strd	r4, r3, [r5]
 8000b1c:	4631      	mov	r1, r6
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	b902      	cbnz	r2, 8000b26 <__udivmoddi4+0xaa>
 8000b24:	deff      	udf	#255	; 0xff
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d150      	bne.n	8000bd0 <__udivmoddi4+0x154>
 8000b2e:	1bcb      	subs	r3, r1, r7
 8000b30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b34:	fa1f f887 	uxth.w	r8, r7
 8000b38:	2601      	movs	r6, #1
 8000b3a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b3e:	0c21      	lsrs	r1, r4, #16
 8000b40:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b48:	fb08 f30c 	mul.w	r3, r8, ip
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d907      	bls.n	8000b60 <__udivmoddi4+0xe4>
 8000b50:	1879      	adds	r1, r7, r1
 8000b52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0xe2>
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	f200 80e9 	bhi.w	8000d30 <__udivmoddi4+0x2b4>
 8000b5e:	4684      	mov	ip, r0
 8000b60:	1ac9      	subs	r1, r1, r3
 8000b62:	b2a3      	uxth	r3, r4
 8000b64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b68:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b6c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b70:	fb08 f800 	mul.w	r8, r8, r0
 8000b74:	45a0      	cmp	r8, r4
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x10c>
 8000b78:	193c      	adds	r4, r7, r4
 8000b7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x10a>
 8000b80:	45a0      	cmp	r8, r4
 8000b82:	f200 80d9 	bhi.w	8000d38 <__udivmoddi4+0x2bc>
 8000b86:	4618      	mov	r0, r3
 8000b88:	eba4 0408 	sub.w	r4, r4, r8
 8000b8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b90:	e7bf      	b.n	8000b12 <__udivmoddi4+0x96>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0x12e>
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	f000 80b1 	beq.w	8000cfe <__udivmoddi4+0x282>
 8000b9c:	2600      	movs	r6, #0
 8000b9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	4631      	mov	r1, r6
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f683 	clz	r6, r3
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d14a      	bne.n	8000c48 <__udivmoddi4+0x1cc>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0x140>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80b8 	bhi.w	8000d2c <__udivmoddi4+0x2b0>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0103 	sbc.w	r1, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	468c      	mov	ip, r1
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	d0a8      	beq.n	8000b1c <__udivmoddi4+0xa0>
 8000bca:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bce:	e7a5      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000bd0:	f1c2 0320 	rsb	r3, r2, #32
 8000bd4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bd8:	4097      	lsls	r7, r2
 8000bda:	fa01 f002 	lsl.w	r0, r1, r2
 8000bde:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be2:	40d9      	lsrs	r1, r3
 8000be4:	4330      	orrs	r0, r6
 8000be6:	0c03      	lsrs	r3, r0, #16
 8000be8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb06 f108 	mul.w	r1, r6, r8
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	fa04 f402 	lsl.w	r4, r4, r2
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x19c>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c0a:	f080 808d 	bcs.w	8000d28 <__udivmoddi4+0x2ac>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 808a 	bls.w	8000d28 <__udivmoddi4+0x2ac>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b281      	uxth	r1, r0
 8000c1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c28:	fb00 f308 	mul.w	r3, r0, r8
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x1c4>
 8000c30:	1879      	adds	r1, r7, r1
 8000c32:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c36:	d273      	bcs.n	8000d20 <__udivmoddi4+0x2a4>
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	d971      	bls.n	8000d20 <__udivmoddi4+0x2a4>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4439      	add	r1, r7
 8000c40:	1acb      	subs	r3, r1, r3
 8000c42:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c46:	e778      	b.n	8000b3a <__udivmoddi4+0xbe>
 8000c48:	f1c6 0c20 	rsb	ip, r6, #32
 8000c4c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c50:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c54:	431c      	orrs	r4, r3
 8000c56:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c5e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c62:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c66:	431f      	orrs	r7, r3
 8000c68:	0c3b      	lsrs	r3, r7, #16
 8000c6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c6e:	fa1f f884 	uxth.w	r8, r4
 8000c72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c7a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c7e:	458a      	cmp	sl, r1
 8000c80:	fa02 f206 	lsl.w	r2, r2, r6
 8000c84:	fa00 f306 	lsl.w	r3, r0, r6
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x220>
 8000c8a:	1861      	adds	r1, r4, r1
 8000c8c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c90:	d248      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000c92:	458a      	cmp	sl, r1
 8000c94:	d946      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4421      	add	r1, r4
 8000c9c:	eba1 010a 	sub.w	r1, r1, sl
 8000ca0:	b2bf      	uxth	r7, r7
 8000ca2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000caa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cae:	fb00 f808 	mul.w	r8, r0, r8
 8000cb2:	45b8      	cmp	r8, r7
 8000cb4:	d907      	bls.n	8000cc6 <__udivmoddi4+0x24a>
 8000cb6:	19e7      	adds	r7, r4, r7
 8000cb8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbc:	d22e      	bcs.n	8000d1c <__udivmoddi4+0x2a0>
 8000cbe:	45b8      	cmp	r8, r7
 8000cc0:	d92c      	bls.n	8000d1c <__udivmoddi4+0x2a0>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4427      	add	r7, r4
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	eba7 0708 	sub.w	r7, r7, r8
 8000cce:	fba0 8902 	umull	r8, r9, r0, r2
 8000cd2:	454f      	cmp	r7, r9
 8000cd4:	46c6      	mov	lr, r8
 8000cd6:	4649      	mov	r1, r9
 8000cd8:	d31a      	bcc.n	8000d10 <__udivmoddi4+0x294>
 8000cda:	d017      	beq.n	8000d0c <__udivmoddi4+0x290>
 8000cdc:	b15d      	cbz	r5, 8000cf6 <__udivmoddi4+0x27a>
 8000cde:	ebb3 020e 	subs.w	r2, r3, lr
 8000ce2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ce6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cea:	40f2      	lsrs	r2, r6
 8000cec:	ea4c 0202 	orr.w	r2, ip, r2
 8000cf0:	40f7      	lsrs	r7, r6
 8000cf2:	e9c5 2700 	strd	r2, r7, [r5]
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	462e      	mov	r6, r5
 8000d00:	4628      	mov	r0, r5
 8000d02:	e70b      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000d04:	4606      	mov	r6, r0
 8000d06:	e6e9      	b.n	8000adc <__udivmoddi4+0x60>
 8000d08:	4618      	mov	r0, r3
 8000d0a:	e6fd      	b.n	8000b08 <__udivmoddi4+0x8c>
 8000d0c:	4543      	cmp	r3, r8
 8000d0e:	d2e5      	bcs.n	8000cdc <__udivmoddi4+0x260>
 8000d10:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d14:	eb69 0104 	sbc.w	r1, r9, r4
 8000d18:	3801      	subs	r0, #1
 8000d1a:	e7df      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	e7d2      	b.n	8000cc6 <__udivmoddi4+0x24a>
 8000d20:	4660      	mov	r0, ip
 8000d22:	e78d      	b.n	8000c40 <__udivmoddi4+0x1c4>
 8000d24:	4681      	mov	r9, r0
 8000d26:	e7b9      	b.n	8000c9c <__udivmoddi4+0x220>
 8000d28:	4666      	mov	r6, ip
 8000d2a:	e775      	b.n	8000c18 <__udivmoddi4+0x19c>
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	e74a      	b.n	8000bc6 <__udivmoddi4+0x14a>
 8000d30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d34:	4439      	add	r1, r7
 8000d36:	e713      	b.n	8000b60 <__udivmoddi4+0xe4>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	e724      	b.n	8000b88 <__udivmoddi4+0x10c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d56:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000d58:	4a3d      	ldr	r2, [pc, #244]	; (8000e50 <MX_ADC1_Init+0x10c>)
 8000d5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d5c:	4b3b      	ldr	r3, [pc, #236]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d62:	4b3a      	ldr	r3, [pc, #232]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d68:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d6e:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d74:	4b35      	ldr	r3, [pc, #212]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d7c:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d82:	4b32      	ldr	r3, [pc, #200]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000d84:	4a33      	ldr	r2, [pc, #204]	; (8000e54 <MX_ADC1_Init+0x110>)
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000d90:	2205      	movs	r2, #5
 8000d92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da2:	482a      	ldr	r0, [pc, #168]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000da4:	f002 f872 	bl	8002e8c <HAL_ADC_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dae:	f001 f9d7 	bl	8002160 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000db2:	2308      	movs	r3, #8
 8000db4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4822      	ldr	r0, [pc, #136]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000dc4:	f002 f9d4 	bl	8003170 <HAL_ADC_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000dce:	f001 f9c7 	bl	8002160 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dd2:	2309      	movs	r3, #9
 8000dd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4619      	mov	r1, r3
 8000dde:	481b      	ldr	r0, [pc, #108]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000de0:	f002 f9c6 	bl	8003170 <HAL_ADC_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000dea:	f001 f9b9 	bl	8002160 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dee:	230a      	movs	r3, #10
 8000df0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000df2:	2303      	movs	r3, #3
 8000df4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df6:	463b      	mov	r3, r7
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4814      	ldr	r0, [pc, #80]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000dfc:	f002 f9b8 	bl	8003170 <HAL_ADC_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e06:	f001 f9ab 	bl	8002160 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e12:	463b      	mov	r3, r7
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000e18:	f002 f9aa 	bl	8003170 <HAL_ADC_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e22:	f001 f99d 	bl	8002160 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e26:	230c      	movs	r3, #12
 8000e28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <MX_ADC1_Init+0x108>)
 8000e34:	f002 f99c 	bl	8003170 <HAL_ADC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000e3e:	f001 f98f 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000b0 	.word	0x200000b0
 8000e50:	40012000 	.word	0x40012000
 8000e54:	0f000001 	.word	0x0f000001

08000e58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a3c      	ldr	r2, [pc, #240]	; (8000f68 <HAL_ADC_MspInit+0x110>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d171      	bne.n	8000f5e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <HAL_ADC_MspInit+0x114>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a3a      	ldr	r2, [pc, #232]	; (8000f6c <HAL_ADC_MspInit+0x114>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <HAL_ADC_MspInit+0x114>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <HAL_ADC_MspInit+0x114>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a33      	ldr	r2, [pc, #204]	; (8000f6c <HAL_ADC_MspInit+0x114>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <HAL_ADC_MspInit+0x114>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <HAL_ADC_MspInit+0x114>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a2c      	ldr	r2, [pc, #176]	; (8000f6c <HAL_ADC_MspInit+0x114>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <HAL_ADC_MspInit+0x114>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4823      	ldr	r0, [pc, #140]	; (8000f70 <HAL_ADC_MspInit+0x118>)
 8000ee2:	f003 f8f9 	bl	80040d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eea:	2303      	movs	r3, #3
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481e      	ldr	r0, [pc, #120]	; (8000f74 <HAL_ADC_MspInit+0x11c>)
 8000efa:	f003 f8ed 	bl	80040d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f00:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <HAL_ADC_MspInit+0x124>)
 8000f02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f44:	f002 fcc6 	bl	80038d4 <HAL_DMA_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000f4e:	f001 f907 	bl	8002160 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f56:	639a      	str	r2, [r3, #56]	; 0x38
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_ADC_MspInit+0x120>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40012000 	.word	0x40012000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020400 	.word	0x40020400
 8000f78:	200000f8 	.word	0x200000f8
 8000f7c:	40026410 	.word	0x40026410

08000f80 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2108      	movs	r1, #8
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <button_init+0x14>)
 8000f8a:	f003 fa41 	bl	8004410 <HAL_GPIO_WritePin>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40020c00 	.word	0x40020c00

08000f98 <button_Scan>:

void button_Scan(){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	482f      	ldr	r0, [pc, #188]	; (8001060 <button_Scan+0xc8>)
 8000fa4:	f003 fa34 	bl	8004410 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2108      	movs	r1, #8
 8000fac:	482c      	ldr	r0, [pc, #176]	; (8001060 <button_Scan+0xc8>)
 8000fae:	f003 fa2f 	bl	8004410 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	492b      	ldr	r1, [pc, #172]	; (8001064 <button_Scan+0xcc>)
 8000fb8:	482b      	ldr	r0, [pc, #172]	; (8001068 <button_Scan+0xd0>)
 8000fba:	f004 f884 	bl	80050c6 <HAL_SPI_Receive>
	  int button_index = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fc6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	e03f      	b.n	800104e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db06      	blt.n	8000fe2 <button_Scan+0x4a>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	dc03      	bgt.n	8000fe2 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	e018      	b.n	8001014 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	dd07      	ble.n	8000ff8 <button_Scan+0x60>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b07      	cmp	r3, #7
 8000fec:	dc04      	bgt.n	8000ff8 <button_Scan+0x60>
			  button_index = 7 - i;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f1c3 0307 	rsb	r3, r3, #7
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e00d      	b.n	8001014 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b07      	cmp	r3, #7
 8000ffc:	dd06      	ble.n	800100c <button_Scan+0x74>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0b      	cmp	r3, #11
 8001002:	dc03      	bgt.n	800100c <button_Scan+0x74>
			  button_index = i + 4;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3304      	adds	r3, #4
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e003      	b.n	8001014 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1c3 0317 	rsb	r3, r3, #23
 8001012:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <button_Scan+0xcc>)
 8001016:	881a      	ldrh	r2, [r3, #0]
 8001018:	897b      	ldrh	r3, [r7, #10]
 800101a:	4013      	ands	r3, r2
 800101c:	b29b      	uxth	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d005      	beq.n	800102e <button_Scan+0x96>
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <button_Scan+0xd4>)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2100      	movs	r1, #0
 8001028:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800102c:	e009      	b.n	8001042 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800102e:	4a0f      	ldr	r2, [pc, #60]	; (800106c <button_Scan+0xd4>)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001036:	3301      	adds	r3, #1
 8001038:	b299      	uxth	r1, r3
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <button_Scan+0xd4>)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8001042:	897b      	ldrh	r3, [r7, #10]
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3301      	adds	r3, #1
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	ddbc      	ble.n	8000fce <button_Scan+0x36>
	  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020c00 	.word	0x40020c00
 8001064:	2000008c 	.word	0x2000008c
 8001068:	20000298 	.word	0x20000298
 800106c:	20000158 	.word	0x20000158

08001070 <reverse>:
#include <control.h>

uint8_t light_status = 0;
char res[7];
static void reverse(char* str, int len)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	3b01      	subs	r3, #1
 8001082:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001084:	e018      	b.n	80010b8 <reverse+0x48>
        temp = str[i];
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	441a      	add	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	440b      	add	r3, r1
 800109c:	7812      	ldrb	r2, [r2, #0]
 800109e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	701a      	strb	r2, [r3, #0]
        i++;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
        j--;
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbe2      	blt.n	8001086 <reverse+0x16>
    }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
static int intToStr(int x, char str[], int d) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
	int i = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
	while (x) {
 80010e0:	e01d      	b.n	800111e <intToStr+0x4e>
		str[i++] = (x % 10) + '0';
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <intToStr+0x8c>)
 80010e6:	fb83 1302 	smull	r1, r3, r3, r2
 80010ea:	1099      	asrs	r1, r3, #2
 80010ec:	17d3      	asrs	r3, r2, #31
 80010ee:	1ac9      	subs	r1, r1, r3
 80010f0:	460b      	mov	r3, r1
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	1ad1      	subs	r1, r2, r3
 80010fa:	b2ca      	uxtb	r2, r1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	1c59      	adds	r1, r3, #1
 8001100:	6179      	str	r1, [r7, #20]
 8001102:	4619      	mov	r1, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	440b      	add	r3, r1
 8001108:	3230      	adds	r2, #48	; 0x30
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	701a      	strb	r2, [r3, #0]
		x = x / 10;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4a12      	ldr	r2, [pc, #72]	; (800115c <intToStr+0x8c>)
 8001112:	fb82 1203 	smull	r1, r2, r2, r3
 8001116:	1092      	asrs	r2, r2, #2
 8001118:	17db      	asrs	r3, r3, #31
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	60fb      	str	r3, [r7, #12]
	while (x) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1de      	bne.n	80010e2 <intToStr+0x12>
	}

	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 8001124:	e007      	b.n	8001136 <intToStr+0x66>
		str[i++] = '0';
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	617a      	str	r2, [r7, #20]
 800112c:	461a      	mov	r2, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	4413      	add	r3, r2
 8001132:	2230      	movs	r2, #48	; 0x30
 8001134:	701a      	strb	r2, [r3, #0]
	while (i < d)
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	429a      	cmp	r2, r3
 800113c:	dbf3      	blt.n	8001126 <intToStr+0x56>

	reverse(str, i);
 800113e:	6979      	ldr	r1, [r7, #20]
 8001140:	68b8      	ldr	r0, [r7, #8]
 8001142:	f7ff ff95 	bl	8001070 <reverse>
	str[i] = '\0';
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	4413      	add	r3, r2
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
	return i;
 8001150:	697b      	ldr	r3, [r7, #20]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	66666667 	.word	0x66666667

08001160 <ftoa>:

// Converts a floating-point/double number to a string.
void ftoa(float n) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	ed87 0a01 	vstr	s0, [r7, #4]
	// Extract integer part
	int ipart = (int) n;
 800116a:	edd7 7a01 	vldr	s15, [r7, #4]
 800116e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001172:	ee17 3a90 	vmov	r3, s15
 8001176:	617b      	str	r3, [r7, #20]

	// Extract floating part
	float fpart = n - (float) ipart;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001182:	ed97 7a01 	vldr	s14, [r7, #4]
 8001186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118a:	edc7 7a04 	vstr	s15, [r7, #16]

	// convert integer part to string
	int i = intToStr(ipart, res, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	4913      	ldr	r1, [pc, #76]	; (80011e0 <ftoa+0x80>)
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff9c 	bl	80010d0 <intToStr>
 8001198:	60f8      	str	r0, [r7, #12]

	// check for display option after point

	res[i] = '.'; // add dot
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <ftoa+0x80>)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	222e      	movs	r2, #46	; 0x2e
 80011a2:	701a      	strb	r2, [r3, #0]

	// Get the value of fraction part upto given no.
	// of points after dot. The third parameter
	// is needed to handle cases like 233.007
	fpart = fpart * 10 * 10;
 80011a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80011a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b8:	edc7 7a04 	vstr	s15, [r7, #16]

	intToStr((int) fpart, res + i + 1, 2);
 80011bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <ftoa+0x80>)
 80011ca:	4413      	add	r3, r2
 80011cc:	2202      	movs	r2, #2
 80011ce:	4619      	mov	r1, r3
 80011d0:	ee17 0a90 	vmov	r0, s15
 80011d4:	f7ff ff7c 	bl	80010d0 <intToStr>
}
 80011d8:	bf00      	nop
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000178 	.word	0x20000178

080011e4 <send_data>:

void send_data(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
	char str[20];
	sprintf(str, "!TEMP:%s#", res);
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <send_data+0x24>)
 80011ee:	4907      	ldr	r1, [pc, #28]	; (800120c <send_data+0x28>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 fba7 	bl	8007944 <siprintf>
	uart_EspSendString((uint8_t*)str);
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 fc33 	bl	8002a64 <uart_EspSendString>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000178 	.word	0x20000178
 800120c:	080081b8 	.word	0x080081b8

08001210 <lightProcess>:

void lightProcess(){
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <lightProcess+0x58>)
 8001216:	8b5b      	ldrh	r3, [r3, #26]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d113      	bne.n	8001244 <lightProcess+0x34>
		light_status = 1 - light_status;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <lightProcess+0x5c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	f1c3 0301 	rsb	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <lightProcess+0x5c>)
 8001228:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <lightProcess+0x5c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d104      	bne.n	800123c <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 8001232:	2101      	movs	r1, #1
 8001234:	480e      	ldr	r0, [pc, #56]	; (8001270 <lightProcess+0x60>)
 8001236:	f001 fc03 	bl	8002a40 <uart_EspSendBytes>
 800123a:	e003      	b.n	8001244 <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 800123c:	2101      	movs	r1, #1
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <lightProcess+0x64>)
 8001240:	f001 fbfe 	bl	8002a40 <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <lightProcess+0x5c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d105      	bne.n	8001258 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 800124c:	2201      	movs	r2, #1
 800124e:	2120      	movs	r1, #32
 8001250:	4809      	ldr	r0, [pc, #36]	; (8001278 <lightProcess+0x68>)
 8001252:	f003 f8dd 	bl	8004410 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 8001256:	e004      	b.n	8001262 <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2120      	movs	r1, #32
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <lightProcess+0x68>)
 800125e:	f003 f8d7 	bl	8004410 <HAL_GPIO_WritePin>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000158 	.word	0x20000158
 800126c:	2000008e 	.word	0x2000008e
 8001270:	080081c4 	.word	0x080081c4
 8001274:	080081c8 	.word	0x080081c8
 8001278:	40021000 	.word	0x40021000

0800127c <test_Esp>:

void test_Esp(){
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0) uart_EspSendBytes("o", 1);
 8001282:	f001 fc53 	bl	8002b2c <uart_EspCheck>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d104      	bne.n	8001296 <test_Esp+0x1a>
 800128c:	2101      	movs	r1, #1
 800128e:	480a      	ldr	r0, [pc, #40]	; (80012b8 <test_Esp+0x3c>)
 8001290:	f001 fbd6 	bl	8002a40 <uart_EspSendBytes>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
}
 8001294:	e00c      	b.n	80012b0 <test_Esp+0x34>
	else lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 8001296:	2300      	movs	r3, #0
 8001298:	9302      	str	r3, [sp, #8]
 800129a:	2318      	movs	r3, #24
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	2300      	movs	r3, #0
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <test_Esp+0x40>)
 80012a8:	2132      	movs	r1, #50	; 0x32
 80012aa:	200a      	movs	r0, #10
 80012ac:	f000 fe68 	bl	8001f80 <lcd_ShowStr>
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	080081cc 	.word	0x080081cc
 80012bc:	080081d0 	.word	0x080081d0

080012c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_DMA_Init+0x3c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <MX_DMA_Init+0x3c>)
 80012d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_DMA_Init+0x3c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2038      	movs	r0, #56	; 0x38
 80012e8:	f002 fabd 	bl	8003866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012ec:	2038      	movs	r0, #56	; 0x38
 80012ee:	f002 fad6 	bl	800389e <HAL_NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800

08001300 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08e      	sub	sp, #56	; 0x38
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800132c:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <MX_FSMC_Init+0xec>)
 800132e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001332:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <MX_FSMC_Init+0xec>)
 8001336:	4a2e      	ldr	r2, [pc, #184]	; (80013f0 <MX_FSMC_Init+0xf0>)
 8001338:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <MX_FSMC_Init+0xec>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <MX_FSMC_Init+0xec>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <MX_FSMC_Init+0xec>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800134c:	4b27      	ldr	r3, [pc, #156]	; (80013ec <MX_FSMC_Init+0xec>)
 800134e:	2210      	movs	r2, #16
 8001350:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <MX_FSMC_Init+0xec>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <MX_FSMC_Init+0xec>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800135e:	4b23      	ldr	r3, [pc, #140]	; (80013ec <MX_FSMC_Init+0xec>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_FSMC_Init+0xec>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_FSMC_Init+0xec>)
 800136c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_FSMC_Init+0xec>)
 8001374:	2200      	movs	r2, #0
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_FSMC_Init+0xec>)
 800137a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800137e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_FSMC_Init+0xec>)
 8001382:	2200      	movs	r2, #0
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_FSMC_Init+0xec>)
 8001388:	2200      	movs	r2, #0
 800138a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_FSMC_Init+0xec>)
 800138e:	2200      	movs	r2, #0
 8001390:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001392:	230f      	movs	r3, #15
 8001394:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001396:	230f      	movs	r3, #15
 8001398:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800139a:	233c      	movs	r3, #60	; 0x3c
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80013a2:	2310      	movs	r3, #16
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80013a6:	2311      	movs	r3, #17
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80013ae:	2308      	movs	r3, #8
 80013b0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80013b2:	230f      	movs	r3, #15
 80013b4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80013b6:	2309      	movs	r3, #9
 80013b8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80013be:	2310      	movs	r3, #16
 80013c0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80013c2:	2311      	movs	r3, #17
 80013c4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80013ca:	463a      	mov	r2, r7
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_FSMC_Init+0xec>)
 80013d4:	f004 fa5a 	bl	800588c <HAL_SRAM_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80013de:	f000 febf 	bl	8002160 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013e2:	bf00      	nop
 80013e4:	3738      	adds	r7, #56	; 0x38
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000180 	.word	0x20000180
 80013f0:	a0000104 	.word	0xa0000104

080013f4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <HAL_FSMC_MspInit+0x88>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d131      	bne.n	8001474 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_FSMC_MspInit+0x88>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_FSMC_MspInit+0x8c>)
 800141c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_FSMC_MspInit+0x8c>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6393      	str	r3, [r2, #56]	; 0x38
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_FSMC_MspInit+0x8c>)
 8001428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001432:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001436:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001444:	230c      	movs	r3, #12
 8001446:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4619      	mov	r1, r3
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <HAL_FSMC_MspInit+0x90>)
 800144e:	f002 fe43 	bl	80040d8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001452:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001456:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001464:	230c      	movs	r3, #12
 8001466:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <HAL_FSMC_MspInit+0x94>)
 800146e:	f002 fe33 	bl	80040d8 <HAL_GPIO_Init>
 8001472:	e000      	b.n	8001476 <HAL_FSMC_MspInit+0x82>
    return;
 8001474:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000090 	.word	0x20000090
 8001480:	40023800 	.word	0x40023800
 8001484:	40021000 	.word	0x40021000
 8001488:	40020c00 	.word	0x40020c00

0800148c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001494:	f7ff ffae 	bl	80013f4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08e      	sub	sp, #56	; 0x38
 80014a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
 80014ba:	4b8f      	ldr	r3, [pc, #572]	; (80016f8 <MX_GPIO_Init+0x258>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a8e      	ldr	r2, [pc, #568]	; (80016f8 <MX_GPIO_Init+0x258>)
 80014c0:	f043 0310 	orr.w	r3, r3, #16
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b8c      	ldr	r3, [pc, #560]	; (80016f8 <MX_GPIO_Init+0x258>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	623b      	str	r3, [r7, #32]
 80014d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <MX_GPIO_Init+0x258>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a87      	ldr	r2, [pc, #540]	; (80016f8 <MX_GPIO_Init+0x258>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b85      	ldr	r3, [pc, #532]	; (80016f8 <MX_GPIO_Init+0x258>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <MX_GPIO_Init+0x258>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a80      	ldr	r2, [pc, #512]	; (80016f8 <MX_GPIO_Init+0x258>)
 80014f8:	f043 0320 	orr.w	r3, r3, #32
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <MX_GPIO_Init+0x258>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	61bb      	str	r3, [r7, #24]
 8001508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	4b7a      	ldr	r3, [pc, #488]	; (80016f8 <MX_GPIO_Init+0x258>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a79      	ldr	r2, [pc, #484]	; (80016f8 <MX_GPIO_Init+0x258>)
 8001514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b77      	ldr	r3, [pc, #476]	; (80016f8 <MX_GPIO_Init+0x258>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b73      	ldr	r3, [pc, #460]	; (80016f8 <MX_GPIO_Init+0x258>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a72      	ldr	r2, [pc, #456]	; (80016f8 <MX_GPIO_Init+0x258>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b70      	ldr	r3, [pc, #448]	; (80016f8 <MX_GPIO_Init+0x258>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <MX_GPIO_Init+0x258>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a6b      	ldr	r2, [pc, #428]	; (80016f8 <MX_GPIO_Init+0x258>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <MX_GPIO_Init+0x258>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <MX_GPIO_Init+0x258>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a64      	ldr	r2, [pc, #400]	; (80016f8 <MX_GPIO_Init+0x258>)
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <MX_GPIO_Init+0x258>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <MX_GPIO_Init+0x258>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a5d      	ldr	r2, [pc, #372]	; (80016f8 <MX_GPIO_Init+0x258>)
 8001584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <MX_GPIO_Init+0x258>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2170      	movs	r1, #112	; 0x70
 800159a:	4858      	ldr	r0, [pc, #352]	; (80016fc <MX_GPIO_Init+0x25c>)
 800159c:	f002 ff38 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80015a6:	4856      	ldr	r0, [pc, #344]	; (8001700 <MX_GPIO_Init+0x260>)
 80015a8:	f002 ff32 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b2:	4854      	ldr	r0, [pc, #336]	; (8001704 <MX_GPIO_Init+0x264>)
 80015b4:	f002 ff2c 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80015be:	4852      	ldr	r0, [pc, #328]	; (8001708 <MX_GPIO_Init+0x268>)
 80015c0:	f002 ff26 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ca:	4850      	ldr	r0, [pc, #320]	; (800170c <MX_GPIO_Init+0x26c>)
 80015cc:	f002 ff20 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2108      	movs	r1, #8
 80015d4:	484e      	ldr	r0, [pc, #312]	; (8001710 <MX_GPIO_Init+0x270>)
 80015d6:	f002 ff1b 	bl	8004410 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80015da:	2370      	movs	r3, #112	; 0x70
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	4619      	mov	r1, r3
 80015f0:	4842      	ldr	r0, [pc, #264]	; (80016fc <MX_GPIO_Init+0x25c>)
 80015f2:	f002 fd71 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80015f6:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	483c      	ldr	r0, [pc, #240]	; (8001700 <MX_GPIO_Init+0x260>)
 8001610:	f002 fd62 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8001614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	4836      	ldr	r0, [pc, #216]	; (8001704 <MX_GPIO_Init+0x264>)
 800162a:	f002 fd55 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 800162e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001644:	4619      	mov	r1, r3
 8001646:	482f      	ldr	r0, [pc, #188]	; (8001704 <MX_GPIO_Init+0x264>)
 8001648:	f002 fd46 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800164c:	23c0      	movs	r3, #192	; 0xc0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	482b      	ldr	r0, [pc, #172]	; (800170c <MX_GPIO_Init+0x26c>)
 8001660:	f002 fd3a 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001664:	2330      	movs	r3, #48	; 0x30
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	4822      	ldr	r0, [pc, #136]	; (8001700 <MX_GPIO_Init+0x260>)
 8001678:	f002 fd2e 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 800167c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800168e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001692:	4619      	mov	r1, r3
 8001694:	481c      	ldr	r0, [pc, #112]	; (8001708 <MX_GPIO_Init+0x268>)
 8001696:	f002 fd1f 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 800169a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	4619      	mov	r1, r3
 80016ae:	4814      	ldr	r0, [pc, #80]	; (8001700 <MX_GPIO_Init+0x260>)
 80016b0:	f002 fd12 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80016b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <MX_GPIO_Init+0x26c>)
 80016ce:	f002 fd03 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80016d2:	2308      	movs	r3, #8
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <MX_GPIO_Init+0x270>)
 80016ea:	f002 fcf5 	bl	80040d8 <HAL_GPIO_Init>

}
 80016ee:	bf00      	nop
 80016f0:	3738      	adds	r7, #56	; 0x38
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40021000 	.word	0x40021000
 8001700:	40020800 	.word	0x40020800
 8001704:	40021400 	.word	0x40021400
 8001708:	40021800 	.word	0x40021800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020c00 	.word	0x40020c00

08001714 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_I2C1_Init+0x50>)
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <MX_I2C1_Init+0x54>)
 800171c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_I2C1_Init+0x50>)
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <MX_I2C1_Init+0x58>)
 8001722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_I2C1_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_I2C1_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_I2C1_Init+0x50>)
 8001732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <MX_I2C1_Init+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_I2C1_Init+0x50>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <MX_I2C1_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_I2C1_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_I2C1_Init+0x50>)
 8001752:	f002 fe77 	bl	8004444 <HAL_I2C_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800175c:	f000 fd00 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200001d0 	.word	0x200001d0
 8001768:	40005400 	.word	0x40005400
 800176c:	000186a0 	.word	0x000186a0

08001770 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_I2C_MspInit+0x84>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d12b      	bne.n	80017ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ae:	23c0      	movs	r3, #192	; 0xc0
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b2:	2312      	movs	r3, #18
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017be:	2304      	movs	r3, #4
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <HAL_I2C_MspInit+0x8c>)
 80017ca:	f002 fc85 	bl	80040d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40005400 	.word	0x40005400
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020400 	.word	0x40020400

08001800 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <LCD_WR_REG+0x1c>)
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	8013      	strh	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	600ffffe 	.word	0x600ffffe

08001820 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <LCD_WR_DATA+0x1c>)
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	8053      	strh	r3, [r2, #2]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	600ffffe 	.word	0x600ffffe

08001840 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <LCD_RD_DATA+0x20>)
 8001848:	885b      	ldrh	r3, [r3, #2]
 800184a:	b29b      	uxth	r3, r3
 800184c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	b29b      	uxth	r3, r3
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	600ffffe 	.word	0x600ffffe

08001864 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4604      	mov	r4, r0
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4623      	mov	r3, r4
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	4603      	mov	r3, r0
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	807b      	strh	r3, [r7, #2]
 800187e:	4613      	mov	r3, r2
 8001880:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001882:	202a      	movs	r0, #42	; 0x2a
 8001884:	f7ff ffbc 	bl	8001800 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	b29b      	uxth	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ffc6 	bl	8001820 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	b29b      	uxth	r3, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ffc0 	bl	8001820 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ffba 	bl	8001820 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ffb4 	bl	8001820 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80018b8:	202b      	movs	r0, #43	; 0x2b
 80018ba:	f7ff ffa1 	bl	8001800 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80018be:	88bb      	ldrh	r3, [r7, #4]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ffab 	bl	8001820 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ffa5 	bl	8001820 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80018d6:	883b      	ldrh	r3, [r7, #0]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff9f 	bl	8001820 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80018e2:	883b      	ldrh	r3, [r7, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff99 	bl	8001820 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80018ee:	202c      	movs	r0, #44	; 0x2c
 80018f0:	f7ff ff86 	bl	8001800 <LCD_WR_REG>
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}

080018fc <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <lcd_Clear+0x60>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	3b01      	subs	r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <lcd_Clear+0x60>)
 8001910:	885b      	ldrh	r3, [r3, #2]
 8001912:	3b01      	subs	r3, #1
 8001914:	b29b      	uxth	r3, r3
 8001916:	2100      	movs	r1, #0
 8001918:	2000      	movs	r0, #0
 800191a:	f7ff ffa3 	bl	8001864 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800191e:	2300      	movs	r3, #0
 8001920:	81fb      	strh	r3, [r7, #14]
 8001922:	e011      	b.n	8001948 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001924:	2300      	movs	r3, #0
 8001926:	81bb      	strh	r3, [r7, #12]
 8001928:	e006      	b.n	8001938 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff77 	bl	8001820 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001932:	89bb      	ldrh	r3, [r7, #12]
 8001934:	3301      	adds	r3, #1
 8001936:	81bb      	strh	r3, [r7, #12]
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <lcd_Clear+0x60>)
 800193a:	885b      	ldrh	r3, [r3, #2]
 800193c:	89ba      	ldrh	r2, [r7, #12]
 800193e:	429a      	cmp	r2, r3
 8001940:	d3f3      	bcc.n	800192a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001942:	89fb      	ldrh	r3, [r7, #14]
 8001944:	3301      	adds	r3, #1
 8001946:	81fb      	strh	r3, [r7, #14]
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <lcd_Clear+0x60>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	89fa      	ldrh	r2, [r7, #14]
 800194e:	429a      	cmp	r2, r3
 8001950:	d3e8      	bcc.n	8001924 <lcd_Clear+0x28>
		}
	}
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000224 	.word	0x20000224

08001960 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
 800196a:	460b      	mov	r3, r1
 800196c:	80bb      	strh	r3, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	88b9      	ldrh	r1, [r7, #4]
 8001978:	88f8      	ldrh	r0, [r7, #6]
 800197a:	f7ff ff73 	bl	8001864 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff4d 	bl	8001820 <LCD_WR_DATA>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	4604      	mov	r4, r0
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	461a      	mov	r2, r3
 800199e:	4623      	mov	r3, r4
 80019a0:	80fb      	strh	r3, [r7, #6]
 80019a2:	4603      	mov	r3, r0
 80019a4:	80bb      	strh	r3, [r7, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	70fb      	strb	r3, [r7, #3]
 80019aa:	4613      	mov	r3, r2
 80019ac:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80019b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ba:	085b      	lsrs	r3, r3, #1
 80019bc:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	bf14      	ite	ne
 80019d2:	2301      	movne	r3, #1
 80019d4:	2300      	moveq	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4413      	add	r3, r2
 80019da:	b29a      	uxth	r2, r3
 80019dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	fb12 f303 	smulbb	r3, r2, r3
 80019e6:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	3b20      	subs	r3, #32
 80019ec:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	4413      	add	r3, r2
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29c      	uxth	r4, r3
 80019fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	88bb      	ldrh	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	88b9      	ldrh	r1, [r7, #4]
 8001a0e:	88f8      	ldrh	r0, [r7, #6]
 8001a10:	4622      	mov	r2, r4
 8001a12:	f7ff ff27 	bl	8001864 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	827b      	strh	r3, [r7, #18]
 8001a1a:	e07a      	b.n	8001b12 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001a1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	d028      	beq.n	8001a76 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001a24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a28:	2b10      	cmp	r3, #16
 8001a2a:	d108      	bne.n	8001a3e <lcd_ShowChar+0xae>
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	8a7b      	ldrh	r3, [r7, #18]
 8001a30:	493c      	ldr	r1, [pc, #240]	; (8001b24 <lcd_ShowChar+0x194>)
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	440a      	add	r2, r1
 8001a36:	4413      	add	r3, r2
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	75fb      	strb	r3, [r7, #23]
 8001a3c:	e01b      	b.n	8001a76 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001a3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a42:	2b18      	cmp	r3, #24
 8001a44:	d10b      	bne.n	8001a5e <lcd_ShowChar+0xce>
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	8a79      	ldrh	r1, [r7, #18]
 8001a4a:	4837      	ldr	r0, [pc, #220]	; (8001b28 <lcd_ShowChar+0x198>)
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	4403      	add	r3, r0
 8001a56:	440b      	add	r3, r1
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	75fb      	strb	r3, [r7, #23]
 8001a5c:	e00b      	b.n	8001a76 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001a5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	d15a      	bne.n	8001b1c <lcd_ShowChar+0x18c>
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	8a7b      	ldrh	r3, [r7, #18]
 8001a6a:	4930      	ldr	r1, [pc, #192]	; (8001b2c <lcd_ShowChar+0x19c>)
 8001a6c:	0192      	lsls	r2, r2, #6
 8001a6e:	440a      	add	r2, r1
 8001a70:	4413      	add	r3, r2
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	75bb      	strb	r3, [r7, #22]
 8001a7a:	e044      	b.n	8001b06 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001a7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d120      	bne.n	8001ac6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001a84:	7dfa      	ldrb	r2, [r7, #23]
 8001a86:	7dbb      	ldrb	r3, [r7, #22]
 8001a88:	fa42 f303 	asr.w	r3, r2, r3
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <lcd_ShowChar+0x10e>
 8001a94:	883b      	ldrh	r3, [r7, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fec2 	bl	8001820 <LCD_WR_DATA>
 8001a9c:	e003      	b.n	8001aa6 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001a9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff febd 	bl	8001820 <LCD_WR_DATA>
				m++;
 8001aa6:	7d7b      	ldrb	r3, [r7, #21]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001aac:	7d7b      	ldrb	r3, [r7, #21]
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ab4:	fb02 f201 	mul.w	r2, r2, r1
 8001ab8:	1a9b      	subs	r3, r3, r2
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d11f      	bne.n	8001b00 <lcd_ShowChar+0x170>
				{
					m=0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	757b      	strb	r3, [r7, #21]
					break;
 8001ac4:	e022      	b.n	8001b0c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001ac6:	7dfa      	ldrb	r2, [r7, #23]
 8001ac8:	7dbb      	ldrb	r3, [r7, #22]
 8001aca:	fa42 f303 	asr.w	r3, r2, r3
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <lcd_ShowChar+0x152>
 8001ad6:	883a      	ldrh	r2, [r7, #0]
 8001ad8:	88b9      	ldrh	r1, [r7, #4]
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff3f 	bl	8001960 <lcd_DrawPoint>
				x++;
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001ae8:	88fa      	ldrh	r2, [r7, #6]
 8001aea:	8a3b      	ldrh	r3, [r7, #16]
 8001aec:	1ad2      	subs	r2, r2, r3
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d105      	bne.n	8001b00 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001af4:	8a3b      	ldrh	r3, [r7, #16]
 8001af6:	80fb      	strh	r3, [r7, #6]
					y++;
 8001af8:	88bb      	ldrh	r3, [r7, #4]
 8001afa:	3301      	adds	r3, #1
 8001afc:	80bb      	strh	r3, [r7, #4]
					break;
 8001afe:	e005      	b.n	8001b0c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001b00:	7dbb      	ldrb	r3, [r7, #22]
 8001b02:	3301      	adds	r3, #1
 8001b04:	75bb      	strb	r3, [r7, #22]
 8001b06:	7dbb      	ldrb	r3, [r7, #22]
 8001b08:	2b07      	cmp	r3, #7
 8001b0a:	d9b7      	bls.n	8001a7c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001b0c:	8a7b      	ldrh	r3, [r7, #18]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	827b      	strh	r3, [r7, #18]
 8001b12:	8a7a      	ldrh	r2, [r7, #18]
 8001b14:	89bb      	ldrh	r3, [r7, #12]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d380      	bcc.n	8001a1c <lcd_ShowChar+0x8c>
 8001b1a:	e000      	b.n	8001b1e <lcd_ShowChar+0x18e>
		else return;
 8001b1c:	bf00      	nop
				}
			}
		}
	}
}
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}
 8001b24:	080081fc 	.word	0x080081fc
 8001b28:	080087ec 	.word	0x080087ec
 8001b2c:	080099bc 	.word	0x080099bc

08001b30 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	460a      	mov	r2, r1
 8001b3a:	71fb      	strb	r3, [r7, #7]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001b44:	e004      	b.n	8001b50 <mypow+0x20>
 8001b46:	79fa      	ldrb	r2, [r7, #7]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	1e5a      	subs	r2, r3, #1
 8001b54:	71ba      	strb	r2, [r7, #6]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f5      	bne.n	8001b46 <mypow+0x16>
	return result;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <lcd_ShowFloatNum>:
	}
}


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b08b      	sub	sp, #44	; 0x2c
 8001b6c:	af04      	add	r7, sp, #16
 8001b6e:	4604      	mov	r4, r0
 8001b70:	4608      	mov	r0, r1
 8001b72:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b76:	4611      	mov	r1, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	81fb      	strh	r3, [r7, #14]
 8001b7e:	4603      	mov	r3, r0
 8001b80:	81bb      	strh	r3, [r7, #12]
 8001b82:	460b      	mov	r3, r1
 8001b84:	71fb      	strb	r3, [r7, #7]
 8001b86:	4613      	mov	r3, r2
 8001b88:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001b8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b8e:	085b      	lsrs	r3, r3, #1
 8001b90:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001b92:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b96:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001c70 <lcd_ShowFloatNum+0x108>
 8001b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba2:	ee17 3a90 	vmov	r3, s15
 8001ba6:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	75fb      	strb	r3, [r7, #23]
 8001bac:	e057      	b.n	8001c5e <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001bae:	8abc      	ldrh	r4, [r7, #20]
 8001bb0:	79fa      	ldrb	r2, [r7, #7]
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	200a      	movs	r0, #10
 8001bc0:	f7ff ffb6 	bl	8001b30 <mypow>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	fbb4 f1f3 	udiv	r1, r4, r3
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <lcd_ShowFloatNum+0x10c>)
 8001bcc:	fba3 2301 	umull	r2, r3, r3, r1
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	1aca      	subs	r2, r1, r3
 8001bdc:	4613      	mov	r3, r2
 8001bde:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001be0:	7dfa      	ldrb	r2, [r7, #23]
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	3b02      	subs	r3, #2
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d11d      	bne.n	8001c26 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	3b02      	subs	r3, #2
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	7dbb      	ldrb	r3, [r7, #22]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	fb12 f303 	smulbb	r3, r2, r3
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	b298      	uxth	r0, r3
 8001c00:	88ba      	ldrh	r2, [r7, #4]
 8001c02:	89b9      	ldrh	r1, [r7, #12]
 8001c04:	2300      	movs	r3, #0
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	4613      	mov	r3, r2
 8001c14:	222e      	movs	r2, #46	; 0x2e
 8001c16:	f7ff febb 	bl	8001990 <lcd_ShowChar>
			t++;
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	3301      	adds	r3, #1
 8001c24:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	7dbb      	ldrb	r3, [r7, #22]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	fb12 f303 	smulbb	r3, r2, r3
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	89fb      	ldrh	r3, [r7, #14]
 8001c36:	4413      	add	r3, r2
 8001c38:	b298      	uxth	r0, r3
 8001c3a:	7cfb      	ldrb	r3, [r7, #19]
 8001c3c:	3330      	adds	r3, #48	; 0x30
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	88bc      	ldrh	r4, [r7, #4]
 8001c42:	89b9      	ldrh	r1, [r7, #12]
 8001c44:	2300      	movs	r3, #0
 8001c46:	9302      	str	r3, [sp, #8]
 8001c48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	4623      	mov	r3, r4
 8001c54:	f7ff fe9c 	bl	8001990 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
 8001c5e:	7dfa      	ldrb	r2, [r7, #23]
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d3a3      	bcc.n	8001bae <lcd_ShowFloatNum+0x46>
	}
}
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}
 8001c70:	42c80000 	.word	0x42c80000
 8001c74:	cccccccd 	.word	0xcccccccd

08001c78 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <lcd_SetDir+0x44>)
 8001c94:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c98:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <lcd_SetDir+0x44>)
 8001c9c:	22f0      	movs	r2, #240	; 0xf0
 8001c9e:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001ca0:	e006      	b.n	8001cb0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <lcd_SetDir+0x44>)
 8001ca4:	22f0      	movs	r2, #240	; 0xf0
 8001ca6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <lcd_SetDir+0x44>)
 8001caa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cae:	805a      	strh	r2, [r3, #2]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	20000224 	.word	0x20000224

08001cc0 <lcd_init>:


void lcd_init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cca:	48aa      	ldr	r0, [pc, #680]	; (8001f74 <lcd_init+0x2b4>)
 8001ccc:	f002 fba0 	bl	8004410 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cd4:	f001 f8b6 	bl	8002e44 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cde:	48a5      	ldr	r0, [pc, #660]	; (8001f74 <lcd_init+0x2b4>)
 8001ce0:	f002 fb96 	bl	8004410 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ce8:	f001 f8ac 	bl	8002e44 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff ffc3 	bl	8001c78 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001cf2:	20d3      	movs	r0, #211	; 0xd3
 8001cf4:	f7ff fd84 	bl	8001800 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001cf8:	f7ff fda2 	bl	8001840 <LCD_RD_DATA>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b9d      	ldr	r3, [pc, #628]	; (8001f78 <lcd_init+0x2b8>)
 8001d02:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d04:	f7ff fd9c 	bl	8001840 <LCD_RD_DATA>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b9a      	ldr	r3, [pc, #616]	; (8001f78 <lcd_init+0x2b8>)
 8001d0e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d10:	f7ff fd96 	bl	8001840 <LCD_RD_DATA>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b97      	ldr	r3, [pc, #604]	; (8001f78 <lcd_init+0x2b8>)
 8001d1a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001d1c:	4b96      	ldr	r3, [pc, #600]	; (8001f78 <lcd_init+0x2b8>)
 8001d1e:	889b      	ldrh	r3, [r3, #4]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b94      	ldr	r3, [pc, #592]	; (8001f78 <lcd_init+0x2b8>)
 8001d26:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001d28:	f7ff fd8a 	bl	8001840 <LCD_RD_DATA>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b91      	ldr	r3, [pc, #580]	; (8001f78 <lcd_init+0x2b8>)
 8001d32:	889b      	ldrh	r3, [r3, #4]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	4b8f      	ldr	r3, [pc, #572]	; (8001f78 <lcd_init+0x2b8>)
 8001d3a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001d3c:	20cf      	movs	r0, #207	; 0xcf
 8001d3e:	f7ff fd5f 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff fd6c 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001d48:	20c1      	movs	r0, #193	; 0xc1
 8001d4a:	f7ff fd69 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001d4e:	2030      	movs	r0, #48	; 0x30
 8001d50:	f7ff fd66 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001d54:	20ed      	movs	r0, #237	; 0xed
 8001d56:	f7ff fd53 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d5a:	2064      	movs	r0, #100	; 0x64
 8001d5c:	f7ff fd60 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f7ff fd5d 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d66:	2012      	movs	r0, #18
 8001d68:	f7ff fd5a 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d6c:	2081      	movs	r0, #129	; 0x81
 8001d6e:	f7ff fd57 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d72:	20e8      	movs	r0, #232	; 0xe8
 8001d74:	f7ff fd44 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d78:	2085      	movs	r0, #133	; 0x85
 8001d7a:	f7ff fd51 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d7e:	2010      	movs	r0, #16
 8001d80:	f7ff fd4e 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d84:	207a      	movs	r0, #122	; 0x7a
 8001d86:	f7ff fd4b 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d8a:	20cb      	movs	r0, #203	; 0xcb
 8001d8c:	f7ff fd38 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d90:	2039      	movs	r0, #57	; 0x39
 8001d92:	f7ff fd45 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d96:	202c      	movs	r0, #44	; 0x2c
 8001d98:	f7ff fd42 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7ff fd3f 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001da2:	2034      	movs	r0, #52	; 0x34
 8001da4:	f7ff fd3c 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff fd39 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001dae:	20f7      	movs	r0, #247	; 0xf7
 8001db0:	f7ff fd26 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001db4:	2020      	movs	r0, #32
 8001db6:	f7ff fd33 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001dba:	20ea      	movs	r0, #234	; 0xea
 8001dbc:	f7ff fd20 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff fd2d 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fd2a 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001dcc:	20c0      	movs	r0, #192	; 0xc0
 8001dce:	f7ff fd17 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001dd2:	201b      	movs	r0, #27
 8001dd4:	f7ff fd24 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001dd8:	20c1      	movs	r0, #193	; 0xc1
 8001dda:	f7ff fd11 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001dde:	2001      	movs	r0, #1
 8001de0:	f7ff fd1e 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001de4:	20c5      	movs	r0, #197	; 0xc5
 8001de6:	f7ff fd0b 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001dea:	2030      	movs	r0, #48	; 0x30
 8001dec:	f7ff fd18 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001df0:	2030      	movs	r0, #48	; 0x30
 8001df2:	f7ff fd15 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001df6:	20c7      	movs	r0, #199	; 0xc7
 8001df8:	f7ff fd02 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001dfc:	20b7      	movs	r0, #183	; 0xb7
 8001dfe:	f7ff fd0f 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001e02:	2036      	movs	r0, #54	; 0x36
 8001e04:	f7ff fcfc 	bl	8001800 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001e08:	2008      	movs	r0, #8
 8001e0a:	f7ff fd09 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001e0e:	203a      	movs	r0, #58	; 0x3a
 8001e10:	f7ff fcf6 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001e14:	2055      	movs	r0, #85	; 0x55
 8001e16:	f7ff fd03 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001e1a:	20b1      	movs	r0, #177	; 0xb1
 8001e1c:	f7ff fcf0 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff fcfd 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001e26:	201a      	movs	r0, #26
 8001e28:	f7ff fcfa 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001e2c:	20b6      	movs	r0, #182	; 0xb6
 8001e2e:	f7ff fce7 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001e32:	200a      	movs	r0, #10
 8001e34:	f7ff fcf4 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001e38:	20a2      	movs	r0, #162	; 0xa2
 8001e3a:	f7ff fcf1 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001e3e:	20f2      	movs	r0, #242	; 0xf2
 8001e40:	f7ff fcde 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff fceb 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001e4a:	2026      	movs	r0, #38	; 0x26
 8001e4c:	f7ff fcd8 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f7ff fce5 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001e56:	20e0      	movs	r0, #224	; 0xe0
 8001e58:	f7ff fcd2 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e5c:	200f      	movs	r0, #15
 8001e5e:	f7ff fcdf 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e62:	202a      	movs	r0, #42	; 0x2a
 8001e64:	f7ff fcdc 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e68:	2028      	movs	r0, #40	; 0x28
 8001e6a:	f7ff fcd9 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e6e:	2008      	movs	r0, #8
 8001e70:	f7ff fcd6 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e74:	200e      	movs	r0, #14
 8001e76:	f7ff fcd3 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e7a:	2008      	movs	r0, #8
 8001e7c:	f7ff fcd0 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e80:	2054      	movs	r0, #84	; 0x54
 8001e82:	f7ff fccd 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e86:	20a9      	movs	r0, #169	; 0xa9
 8001e88:	f7ff fcca 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e8c:	2043      	movs	r0, #67	; 0x43
 8001e8e:	f7ff fcc7 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e92:	200a      	movs	r0, #10
 8001e94:	f7ff fcc4 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e98:	200f      	movs	r0, #15
 8001e9a:	f7ff fcc1 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff fcbe 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff fcbb 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff fcb8 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff fcb5 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001eb6:	20e1      	movs	r0, #225	; 0xe1
 8001eb8:	f7ff fca2 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff fcaf 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001ec2:	2015      	movs	r0, #21
 8001ec4:	f7ff fcac 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001ec8:	2017      	movs	r0, #23
 8001eca:	f7ff fca9 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001ece:	2007      	movs	r0, #7
 8001ed0:	f7ff fca6 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001ed4:	2011      	movs	r0, #17
 8001ed6:	f7ff fca3 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001eda:	2006      	movs	r0, #6
 8001edc:	f7ff fca0 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001ee0:	202b      	movs	r0, #43	; 0x2b
 8001ee2:	f7ff fc9d 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001ee6:	2056      	movs	r0, #86	; 0x56
 8001ee8:	f7ff fc9a 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001eec:	203c      	movs	r0, #60	; 0x3c
 8001eee:	f7ff fc97 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001ef2:	2005      	movs	r0, #5
 8001ef4:	f7ff fc94 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ef8:	2010      	movs	r0, #16
 8001efa:	f7ff fc91 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001efe:	200f      	movs	r0, #15
 8001f00:	f7ff fc8e 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f04:	203f      	movs	r0, #63	; 0x3f
 8001f06:	f7ff fc8b 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f0a:	203f      	movs	r0, #63	; 0x3f
 8001f0c:	f7ff fc88 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f10:	200f      	movs	r0, #15
 8001f12:	f7ff fc85 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001f16:	202b      	movs	r0, #43	; 0x2b
 8001f18:	f7ff fc72 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff fc7f 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7ff fc7c 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff fc79 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001f2e:	203f      	movs	r0, #63	; 0x3f
 8001f30:	f7ff fc76 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001f34:	202a      	movs	r0, #42	; 0x2a
 8001f36:	f7ff fc63 	bl	8001800 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff fc70 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fc6d 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f7ff fc6a 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001f4c:	20ef      	movs	r0, #239	; 0xef
 8001f4e:	f7ff fc67 	bl	8001820 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001f52:	2011      	movs	r0, #17
 8001f54:	f7ff fc54 	bl	8001800 <LCD_WR_REG>
	HAL_Delay(120);
 8001f58:	2078      	movs	r0, #120	; 0x78
 8001f5a:	f000 ff73 	bl	8002e44 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f5e:	2029      	movs	r0, #41	; 0x29
 8001f60:	f7ff fc4e 	bl	8001800 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f64:	2201      	movs	r2, #1
 8001f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6a:	4804      	ldr	r0, [pc, #16]	; (8001f7c <lcd_init+0x2bc>)
 8001f6c:	f002 fa50 	bl	8004410 <HAL_GPIO_WritePin>
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40020800 	.word	0x40020800
 8001f78:	20000224 	.word	0x20000224
 8001f7c:	40020000 	.word	0x40020000

08001f80 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b08b      	sub	sp, #44	; 0x2c
 8001f84:	af04      	add	r7, sp, #16
 8001f86:	60ba      	str	r2, [r7, #8]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	81fb      	strh	r3, [r7, #14]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	81bb      	strh	r3, [r7, #12]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001f96:	89fb      	ldrh	r3, [r7, #14]
 8001f98:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001f9e:	e048      	b.n	8002032 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d145      	bne.n	8002032 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001fa6:	89fa      	ldrh	r2, [r7, #14]
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <lcd_ShowStr+0xc4>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	1acb      	subs	r3, r1, r3
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	dc3f      	bgt.n	800203c <lcd_ShowStr+0xbc>
 8001fbc:	89ba      	ldrh	r2, [r7, #12]
 8001fbe:	4b21      	ldr	r3, [pc, #132]	; (8002044 <lcd_ShowStr+0xc4>)
 8001fc0:	885b      	ldrh	r3, [r3, #2]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fc8:	1acb      	subs	r3, r1, r3
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dc36      	bgt.n	800203c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b80      	cmp	r3, #128	; 0x80
 8001fd4:	d902      	bls.n	8001fdc <lcd_ShowStr+0x5c>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
 8001fda:	e02a      	b.n	8002032 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b0d      	cmp	r3, #13
 8001fe2:	d10b      	bne.n	8001ffc <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001fe4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	89bb      	ldrh	r3, [r7, #12]
 8001fec:	4413      	add	r3, r2
 8001fee:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001ff0:	8abb      	ldrh	r3, [r7, #20]
 8001ff2:	81fb      	strh	r3, [r7, #14]
					str++;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	e017      	b.n	800202c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	781a      	ldrb	r2, [r3, #0]
 8002000:	88fc      	ldrh	r4, [r7, #6]
 8002002:	89b9      	ldrh	r1, [r7, #12]
 8002004:	89f8      	ldrh	r0, [r7, #14]
 8002006:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	4623      	mov	r3, r4
 8002018:	f7ff fcba 	bl	8001990 <lcd_ShowChar>
					x+=sizey/2;
 800201c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	b29a      	uxth	r2, r3
 8002026:	89fb      	ldrh	r3, [r7, #14]
 8002028:	4413      	add	r3, r2
 800202a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	3301      	adds	r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1b2      	bne.n	8001fa0 <lcd_ShowStr+0x20>
 800203a:	e000      	b.n	800203e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800203c:	bf00      	nop
			}
		}
	}
}
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd90      	pop	{r4, r7, pc}
 8002044:	20000224 	.word	0x20000224

08002048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800204c:	f000 fe88 	bl	8002d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002050:	f000 f81c 	bl	800208c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002054:	f7ff fa24 	bl	80014a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002058:	f7ff f932 	bl	80012c0 <MX_DMA_Init>
  MX_SPI1_Init();
 800205c:	f000 f984 	bl	8002368 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002060:	f7ff f94e 	bl	8001300 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002064:	f7ff fb56 	bl	8001714 <MX_I2C1_Init>
  MX_TIM13_Init();
 8002068:	f000 fbfa 	bl	8002860 <MX_TIM13_Init>
  MX_TIM2_Init();
 800206c:	f000 fbac 	bl	80027c8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002070:	f7fe fe68 	bl	8000d44 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002074:	f000 fb58 	bl	8002728 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002078:	f000 fd92 	bl	8002ba0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800207c:	f000 fd66 	bl	8002b4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002080:	f000 faa0 	bl	80025c4 <system_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 while (1)
  {
	  // 50ms task
	  system_loop();
 8002084:	f000 fad0 	bl	8002628 <system_loop>
 8002088:	e7fc      	b.n	8002084 <main+0x3c>
	...

0800208c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b094      	sub	sp, #80	; 0x50
 8002090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002092:	f107 0320 	add.w	r3, r7, #32
 8002096:	2230      	movs	r2, #48	; 0x30
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f005 fc4a 	bl	8007934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <SystemClock_Config+0xcc>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <SystemClock_Config+0xcc>)
 80020ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020be:	6413      	str	r3, [r2, #64]	; 0x40
 80020c0:	4b25      	ldr	r3, [pc, #148]	; (8002158 <SystemClock_Config+0xcc>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <SystemClock_Config+0xd0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a21      	ldr	r2, [pc, #132]	; (800215c <SystemClock_Config+0xd0>)
 80020d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <SystemClock_Config+0xd0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020e8:	2302      	movs	r3, #2
 80020ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ec:	2301      	movs	r3, #1
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020f0:	2310      	movs	r3, #16
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020f4:	2302      	movs	r3, #2
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020f8:	2300      	movs	r3, #0
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020fc:	2308      	movs	r3, #8
 80020fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002100:	23a8      	movs	r3, #168	; 0xa8
 8002102:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002104:	2302      	movs	r3, #2
 8002106:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002108:	2304      	movs	r3, #4
 800210a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800210c:	f107 0320 	add.w	r3, r7, #32
 8002110:	4618      	mov	r0, r3
 8002112:	f002 fadb 	bl	80046cc <HAL_RCC_OscConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800211c:	f000 f820 	bl	8002160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002120:	230f      	movs	r3, #15
 8002122:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002124:	2302      	movs	r3, #2
 8002126:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800212c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002130:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002132:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002136:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	2105      	movs	r1, #5
 800213e:	4618      	mov	r0, r3
 8002140:	f002 fd3c 	bl	8004bbc <HAL_RCC_ClockConfig>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800214a:	f000 f809 	bl	8002160 <Error_Handler>
  }
}
 800214e:	bf00      	nop
 8002150:	3750      	adds	r7, #80	; 0x50
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40007000 	.word	0x40007000

08002160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002164:	b672      	cpsid	i
}
 8002166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002168:	e7fe      	b.n	8002168 <Error_Handler+0x8>
	...

0800216c <sensor_GetTemperature>:

uint16_t adc_receive[5];
uint16_t heat_buffer[BUFFER_SIZE];
float sum = 0;

static float sensor_GetTemperature() {
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
	return ((float) adc_receive[4] * 330) / (4095);
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <sensor_GetTemperature+0x30>)
 8002172:	891b      	ldrh	r3, [r3, #8]
 8002174:	ee07 3a90 	vmov	s15, r3
 8002178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800217c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80021a0 <sensor_GetTemperature+0x34>
 8002180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002184:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80021a4 <sensor_GetTemperature+0x38>
 8002188:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800218c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002190:	eeb0 0a67 	vmov.f32	s0, s15
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	20000274 	.word	0x20000274
 80021a0:	43a50000 	.word	0x43a50000
 80021a4:	457ff000 	.word	0x457ff000

080021a8 <sensor_init>:

void sensor_init() {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_receive, 5);
 80021ac:	2205      	movs	r2, #5
 80021ae:	4903      	ldr	r1, [pc, #12]	; (80021bc <sensor_init+0x14>)
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <sensor_init+0x18>)
 80021b2:	f000 feaf 	bl	8002f14 <HAL_ADC_Start_DMA>
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000274 	.word	0x20000274
 80021c0:	200000b0 	.word	0x200000b0

080021c4 <sensor_Read>:

void sensor_Read() {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_receive, 5);
 80021c8:	2205      	movs	r2, #5
 80021ca:	4903      	ldr	r1, [pc, #12]	; (80021d8 <sensor_Read+0x14>)
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <sensor_Read+0x18>)
 80021ce:	f000 fea1 	bl	8002f14 <HAL_ADC_Start_DMA>
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000274 	.word	0x20000274
 80021dc:	200000b0 	.word	0x200000b0

080021e0 <sensor_CalTemperature>:

void sensor_CalTemperature(uint16_t idx) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	80fb      	strh	r3, [r7, #6]
	heat_buffer[idx] = sensor_GetTemperature();
 80021ea:	f7ff ffbf 	bl	800216c <sensor_GetTemperature>
 80021ee:	eef0 7a40 	vmov.f32	s15, s0
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f8:	ee17 2a90 	vmov	r2, s15
 80021fc:	b291      	uxth	r1, r2
 80021fe:	4a0b      	ldr	r2, [pc, #44]	; (800222c <sensor_CalTemperature+0x4c>)
 8002200:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sum += heat_buffer[idx];
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <sensor_CalTemperature+0x4c>)
 8002208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <sensor_CalTemperature+0x50>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <sensor_CalTemperature+0x50>)
 8002220:	edc3 7a00 	vstr	s15, [r3]
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000260 	.word	0x20000260
 8002230:	20000094 	.word	0x20000094

08002234 <sensor_result>:

float sensor_result(void) {
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
	float mean = sum / BUFFER_SIZE;
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <sensor_result+0x34>)
 800223c:	ed93 7a00 	vldr	s14, [r3]
 8002240:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002248:	edc7 7a01 	vstr	s15, [r7, #4]
	sum = 0;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <sensor_result+0x34>)
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
	return mean;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	ee07 3a90 	vmov	s15, r3
}
 800225a:	eeb0 0a67 	vmov.f32	s0, s15
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	20000094 	.word	0x20000094

0800226c <HAL_TIM_PeriodElapsedCallback>:
/* timer[0]: to read button
 * timer[1]: to read sensor
 * timer[2]: to send data to esp
 * */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	run_timer();
 8002274:	f000 f830 	bl	80022d8 <run_timer>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <set_timer>:
 * @brief:	turn timer on and set value
 * @para:	i: id of timer
 * 			time: unit is ms
 * @retval:	none
 * */
void set_timer(unsigned i, unsigned int time) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
	timer[i].count = time * FREQUENCY_OF_TIM / 1000.0;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f92d 	bl	80004f4 <__aeabi_ui2d>
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <set_timer+0x50>)
 80022a0:	f7fe facc 	bl	800083c <__aeabi_ddiv>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fbae 	bl	8000a0c <__aeabi_d2uiz>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4908      	ldr	r1, [pc, #32]	; (80022d4 <set_timer+0x54>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	605a      	str	r2, [r3, #4]
	timer[i].state = 1;
 80022bc:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <set_timer+0x54>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2101      	movs	r1, #1
 80022c2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	408f4000 	.word	0x408f4000
 80022d4:	20000280 	.word	0x20000280

080022d8 <run_timer>:
/*
 * @brief:	run all timers that is on
 * @para:	none
 * @retval:	none
 * */
void run_timer(void) {
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	e01f      	b.n	8002324 <run_timer+0x4c>
		if (timer[i].state) {
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <run_timer+0x60>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d016      	beq.n	800231e <run_timer+0x46>
			timer[i].count--;
 80022f0:	4a11      	ldr	r2, [pc, #68]	; (8002338 <run_timer+0x60>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	1e5a      	subs	r2, r3, #1
 80022fc:	490e      	ldr	r1, [pc, #56]	; (8002338 <run_timer+0x60>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	605a      	str	r2, [r3, #4]
			if (timer[i].count <= 0) {
 8002306:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <run_timer+0x60>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d104      	bne.n	800231e <run_timer+0x46>
				timer[i].state = 0;
 8002314:	4a08      	ldr	r2, [pc, #32]	; (8002338 <run_timer+0x60>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2100      	movs	r1, #0
 800231a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3301      	adds	r3, #1
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d9dc      	bls.n	80022e4 <run_timer+0xc>
			}
		}
	}
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	20000280 	.word	0x20000280

0800233c <is_timer_on>:
bool is_timer_on(unsigned i) {
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	return (timer[i].state == 1);
 8002344:	4a07      	ldr	r2, [pc, #28]	; (8002364 <is_timer_on+0x28>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800234c:	2b01      	cmp	r3, #1
 800234e:	bf0c      	ite	eq
 8002350:	2301      	moveq	r3, #1
 8002352:	2300      	movne	r3, #0
 8002354:	b2db      	uxtb	r3, r3
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000280 	.word	0x20000280

08002368 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <MX_SPI1_Init+0x64>)
 800236e:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <MX_SPI1_Init+0x68>)
 8002370:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <MX_SPI1_Init+0x64>)
 8002374:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002378:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <MX_SPI1_Init+0x64>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <MX_SPI1_Init+0x64>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <MX_SPI1_Init+0x64>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <MX_SPI1_Init+0x64>)
 800238e:	2200      	movs	r2, #0
 8002390:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <MX_SPI1_Init+0x64>)
 8002394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002398:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <MX_SPI1_Init+0x64>)
 800239c:	2200      	movs	r2, #0
 800239e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023a0:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <MX_SPI1_Init+0x64>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <MX_SPI1_Init+0x64>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <MX_SPI1_Init+0x64>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <MX_SPI1_Init+0x64>)
 80023b4:	220a      	movs	r2, #10
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023b8:	4804      	ldr	r0, [pc, #16]	; (80023cc <MX_SPI1_Init+0x64>)
 80023ba:	f002 fdfb 	bl	8004fb4 <HAL_SPI_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023c4:	f7ff fecc 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000298 	.word	0x20000298
 80023d0:	40013000 	.word	0x40013000

080023d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a19      	ldr	r2, [pc, #100]	; (8002458 <HAL_SPI_MspInit+0x84>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d12b      	bne.n	800244e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_SPI_MspInit+0x88>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <HAL_SPI_MspInit+0x88>)
 8002400:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002404:	6453      	str	r3, [r2, #68]	; 0x44
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_SPI_MspInit+0x88>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_SPI_MspInit+0x88>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a10      	ldr	r2, [pc, #64]	; (800245c <HAL_SPI_MspInit+0x88>)
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <HAL_SPI_MspInit+0x88>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800242e:	2338      	movs	r3, #56	; 0x38
 8002430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800243e:	2305      	movs	r3, #5
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	4619      	mov	r1, r3
 8002448:	4805      	ldr	r0, [pc, #20]	; (8002460 <HAL_SPI_MspInit+0x8c>)
 800244a:	f001 fe45 	bl	80040d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800244e:	bf00      	nop
 8002450:	3728      	adds	r7, #40	; 0x28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40013000 	.word	0x40013000
 800245c:	40023800 	.word	0x40023800
 8002460:	40020400 	.word	0x40020400

08002464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_MspInit+0x4c>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a0f      	ldr	r2, [pc, #60]	; (80024b0 <HAL_MspInit+0x4c>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <HAL_MspInit+0x4c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_MspInit+0x4c>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HAL_MspInit+0x4c>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_MspInit+0x4c>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <NMI_Handler+0x4>

080024ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024be:	e7fe      	b.n	80024be <HardFault_Handler+0x4>

080024c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <MemManage_Handler+0x4>

080024c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ca:	e7fe      	b.n	80024ca <BusFault_Handler+0x4>

080024cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <UsageFault_Handler+0x4>

080024d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002500:	f000 fc80 	bl	8002e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <TIM2_IRQHandler+0x10>)
 800250e:	f003 fb1a 	bl	8005b46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000380 	.word	0x20000380

0800251c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <USART1_IRQHandler+0x10>)
 8002522:	f004 fa55 	bl	80069d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2000042c 	.word	0x2000042c

08002530 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <USART2_IRQHandler+0x10>)
 8002536:	f004 fa4b 	bl	80069d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000470 	.word	0x20000470

08002544 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <DMA2_Stream0_IRQHandler+0x10>)
 800254a:	f001 fb5b 	bl	8003c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200000f8 	.word	0x200000f8

08002558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <_sbrk+0x5c>)
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <_sbrk+0x60>)
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <_sbrk+0x64>)
 8002576:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <_sbrk+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	d207      	bcs.n	8002598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002588:	f005 f9aa 	bl	80078e0 <__errno>
 800258c:	4603      	mov	r3, r0
 800258e:	220c      	movs	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	e009      	b.n	80025ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <_sbrk+0x64>)
 80025a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20020000 	.word	0x20020000
 80025b8:	00000400 	.word	0x00000400
 80025bc:	20000098 	.word	0x20000098
 80025c0:	200004c8 	.word	0x200004c8

080025c4 <system_init>:
#include "system.h"

extern TIM_HandleTypeDef htim2;
uint16_t idx = 0;
float sum_15s = 0;
void system_init(void) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af04      	add	r7, sp, #16
	HAL_TIM_Base_Start_IT(&htim2);
 80025ca:	4815      	ldr	r0, [pc, #84]	; (8002620 <system_init+0x5c>)
 80025cc:	f003 f9f2 	bl	80059b4 <HAL_TIM_Base_Start_IT>
	set_timer(0, READ_BUTTON_TIME);
 80025d0:	210a      	movs	r1, #10
 80025d2:	2000      	movs	r0, #0
 80025d4:	f7ff fe54 	bl	8002280 <set_timer>
	set_timer(1, READ_SENSOR_TIME);
 80025d8:	2164      	movs	r1, #100	; 0x64
 80025da:	2001      	movs	r0, #1
 80025dc:	f7ff fe50 	bl	8002280 <set_timer>
	set_timer(2, SEND_DATA_TIME);
 80025e0:	f643 2198 	movw	r1, #15000	; 0x3a98
 80025e4:	2002      	movs	r0, #2
 80025e6:	f7ff fe4b 	bl	8002280 <set_timer>
	button_init();
 80025ea:	f7fe fcc9 	bl	8000f80 <button_init>
	lcd_init();
 80025ee:	f7ff fb67 	bl	8001cc0 <lcd_init>
	sensor_init();
 80025f2:	f7ff fdd9 	bl	80021a8 <sensor_init>
	uart_init_esp();
 80025f6:	f000 fa0d 	bl	8002a14 <uart_init_esp>
	lcd_Clear(BLACK);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff f97e 	bl	80018fc <lcd_Clear>
	lcd_ShowStr(0, 100, "TEMPERATURE", RED, BLACK, 24, 0);
 8002600:	2300      	movs	r3, #0
 8002602:	9302      	str	r3, [sp, #8]
 8002604:	2318      	movs	r3, #24
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	2300      	movs	r3, #0
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <system_init+0x60>)
 8002612:	2164      	movs	r1, #100	; 0x64
 8002614:	2000      	movs	r0, #0
 8002616:	f7ff fcb3 	bl	8001f80 <lcd_ShowStr>
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000380 	.word	0x20000380
 8002624:	080081dc 	.word	0x080081dc

08002628 <system_loop>:

void system_loop(void) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af02      	add	r7, sp, #8
	if (!is_timer_on(0)) {
 800262e:	2000      	movs	r0, #0
 8002630:	f7ff fe84 	bl	800233c <is_timer_on>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10b      	bne.n	8002652 <system_loop+0x2a>
		button_Scan();
 800263a:	f7fe fcad 	bl	8000f98 <button_Scan>
		test_Esp();
 800263e:	f7fe fe1d 	bl	800127c <test_Esp>
		lightProcess();
 8002642:	f7fe fde5 	bl	8001210 <lightProcess>
		set_timer(0, READ_BUTTON_TIME);
 8002646:	210a      	movs	r1, #10
 8002648:	2000      	movs	r0, #0
 800264a:	f7ff fe19 	bl	8002280 <set_timer>
		sensor_Read();
 800264e:	f7ff fdb9 	bl	80021c4 <sensor_Read>
	}
	if (!is_timer_on(1)) {
 8002652:	2001      	movs	r0, #1
 8002654:	f7ff fe72 	bl	800233c <is_timer_on>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d12e      	bne.n	80026bc <system_loop+0x94>
		sensor_CalTemperature(idx++);
 800265e:	4b27      	ldr	r3, [pc, #156]	; (80026fc <system_loop+0xd4>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	b291      	uxth	r1, r2
 8002666:	4a25      	ldr	r2, [pc, #148]	; (80026fc <system_loop+0xd4>)
 8002668:	8011      	strh	r1, [r2, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fdb8 	bl	80021e0 <sensor_CalTemperature>
		if (idx >= BUFFER_SIZE) {
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <system_loop+0xd4>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	2b09      	cmp	r3, #9
 8002676:	d91d      	bls.n	80026b4 <system_loop+0x8c>
			float value = sensor_result();
 8002678:	f7ff fddc 	bl	8002234 <sensor_result>
 800267c:	ed87 0a01 	vstr	s0, [r7, #4]
			sum_15s += value;
 8002680:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <system_loop+0xd8>)
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	edd7 7a01 	vldr	s15, [r7, #4]
 800268a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268e:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <system_loop+0xd8>)
 8002690:	edc3 7a00 	vstr	s15, [r3]
			lcd_ShowFloatNum(0, 130, value, 4, RED, BLACK, 24);
 8002694:	2318      	movs	r3, #24
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	2300      	movs	r3, #0
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026a0:	2204      	movs	r2, #4
 80026a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80026a6:	2182      	movs	r1, #130	; 0x82
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7ff fa5d 	bl	8001b68 <lcd_ShowFloatNum>
			idx = 0;
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <system_loop+0xd4>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	801a      	strh	r2, [r3, #0]
		}
		set_timer(1, READ_SENSOR_TIME);
 80026b4:	2164      	movs	r1, #100	; 0x64
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff fde2 	bl	8002280 <set_timer>
	}
	if (!is_timer_on(2)) {
 80026bc:	2002      	movs	r0, #2
 80026be:	f7ff fe3d 	bl	800233c <is_timer_on>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d115      	bne.n	80026f4 <system_loop+0xcc>
		ftoa((float)sum_15s/15);
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <system_loop+0xd8>)
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80026d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026d6:	eeb0 0a47 	vmov.f32	s0, s14
 80026da:	f7fe fd41 	bl	8001160 <ftoa>
		sum_15s = 0;
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <system_loop+0xd8>)
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
		send_data();
 80026e6:	f7fe fd7d 	bl	80011e4 <send_data>
		set_timer(2, SEND_DATA_TIME);
 80026ea:	f643 2198 	movw	r1, #15000	; 0x3a98
 80026ee:	2002      	movs	r0, #2
 80026f0:	f7ff fdc6 	bl	8002280 <set_timer>
	}
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	2000009c 	.word	0x2000009c
 8002700:	200000a0 	.word	0x200000a0

08002704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <SystemInit+0x20>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	4a05      	ldr	r2, [pc, #20]	; (8002724 <SystemInit+0x20>)
 8002710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273c:	463b      	mov	r3, r7
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <MX_TIM1_Init+0x98>)
 8002746:	4a1f      	ldr	r2, [pc, #124]	; (80027c4 <MX_TIM1_Init+0x9c>)
 8002748:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <MX_TIM1_Init+0x98>)
 800274c:	2253      	movs	r2, #83	; 0x53
 800274e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <MX_TIM1_Init+0x98>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <MX_TIM1_Init+0x98>)
 8002758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800275c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <MX_TIM1_Init+0x98>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <MX_TIM1_Init+0x98>)
 8002766:	2200      	movs	r2, #0
 8002768:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <MX_TIM1_Init+0x98>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002770:	4813      	ldr	r0, [pc, #76]	; (80027c0 <MX_TIM1_Init+0x98>)
 8002772:	f003 f8cf 	bl	8005914 <HAL_TIM_Base_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800277c:	f7ff fcf0 	bl	8002160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002786:	f107 0308 	add.w	r3, r7, #8
 800278a:	4619      	mov	r1, r3
 800278c:	480c      	ldr	r0, [pc, #48]	; (80027c0 <MX_TIM1_Init+0x98>)
 800278e:	f003 fba5 	bl	8005edc <HAL_TIM_ConfigClockSource>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002798:	f7ff fce2 	bl	8002160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027a4:	463b      	mov	r3, r7
 80027a6:	4619      	mov	r1, r3
 80027a8:	4805      	ldr	r0, [pc, #20]	; (80027c0 <MX_TIM1_Init+0x98>)
 80027aa:	f003 ff71 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80027b4:	f7ff fcd4 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000338 	.word	0x20000338
 80027c4:	40010000 	.word	0x40010000

080027c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ce:	f107 0308 	add.w	r3, r7, #8
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027dc:	463b      	mov	r3, r7
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <MX_TIM2_Init+0x94>)
 80027e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <MX_TIM2_Init+0x94>)
 80027ee:	f240 3247 	movw	r2, #839	; 0x347
 80027f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <MX_TIM2_Init+0x94>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80027fa:	4b18      	ldr	r3, [pc, #96]	; (800285c <MX_TIM2_Init+0x94>)
 80027fc:	2263      	movs	r2, #99	; 0x63
 80027fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002800:	4b16      	ldr	r3, [pc, #88]	; (800285c <MX_TIM2_Init+0x94>)
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <MX_TIM2_Init+0x94>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800280c:	4813      	ldr	r0, [pc, #76]	; (800285c <MX_TIM2_Init+0x94>)
 800280e:	f003 f881 	bl	8005914 <HAL_TIM_Base_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002818:	f7ff fca2 	bl	8002160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800281c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	4619      	mov	r1, r3
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <MX_TIM2_Init+0x94>)
 800282a:	f003 fb57 	bl	8005edc <HAL_TIM_ConfigClockSource>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002834:	f7ff fc94 	bl	8002160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002838:	2300      	movs	r3, #0
 800283a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002840:	463b      	mov	r3, r7
 8002842:	4619      	mov	r1, r3
 8002844:	4805      	ldr	r0, [pc, #20]	; (800285c <MX_TIM2_Init+0x94>)
 8002846:	f003 ff23 	bl	8006690 <HAL_TIMEx_MasterConfigSynchronization>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002850:	f7ff fc86 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000380 	.word	0x20000380

08002860 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
 8002874:	615a      	str	r2, [r3, #20]
 8002876:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002878:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <MX_TIM13_Init+0x94>)
 800287a:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <MX_TIM13_Init+0x98>)
 800287c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <MX_TIM13_Init+0x94>)
 8002880:	f240 3247 	movw	r2, #839	; 0x347
 8002884:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002886:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <MX_TIM13_Init+0x94>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <MX_TIM13_Init+0x94>)
 800288e:	2263      	movs	r2, #99	; 0x63
 8002890:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <MX_TIM13_Init+0x94>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002898:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <MX_TIM13_Init+0x94>)
 800289a:	2200      	movs	r2, #0
 800289c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800289e:	4815      	ldr	r0, [pc, #84]	; (80028f4 <MX_TIM13_Init+0x94>)
 80028a0:	f003 f838 	bl	8005914 <HAL_TIM_Base_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80028aa:	f7ff fc59 	bl	8002160 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80028ae:	4811      	ldr	r0, [pc, #68]	; (80028f4 <MX_TIM13_Init+0x94>)
 80028b0:	f003 f8f0 	bl	8005a94 <HAL_TIM_PWM_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80028ba:	f7ff fc51 	bl	8002160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028be:	2360      	movs	r3, #96	; 0x60
 80028c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	2200      	movs	r2, #0
 80028d2:	4619      	mov	r1, r3
 80028d4:	4807      	ldr	r0, [pc, #28]	; (80028f4 <MX_TIM13_Init+0x94>)
 80028d6:	f003 fa3f 	bl	8005d58 <HAL_TIM_PWM_ConfigChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80028e0:	f7ff fc3e 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80028e4:	4803      	ldr	r0, [pc, #12]	; (80028f4 <MX_TIM13_Init+0x94>)
 80028e6:	f000 f85b 	bl	80029a0 <HAL_TIM_MspPostInit>

}
 80028ea:	bf00      	nop
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200002f0 	.word	0x200002f0
 80028f8:	40001c00 	.word	0x40001c00

080028fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <HAL_TIM_Base_MspInit+0x98>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10e      	bne.n	800292c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_TIM_Base_MspInit+0x9c>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4a20      	ldr	r2, [pc, #128]	; (8002998 <HAL_TIM_Base_MspInit+0x9c>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6453      	str	r3, [r2, #68]	; 0x44
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_TIM_Base_MspInit+0x9c>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800292a:	e02e      	b.n	800298a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002934:	d116      	bne.n	8002964 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_TIM_Base_MspInit+0x9c>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a16      	ldr	r2, [pc, #88]	; (8002998 <HAL_TIM_Base_MspInit+0x9c>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_TIM_Base_MspInit+0x9c>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	201c      	movs	r0, #28
 8002958:	f000 ff85 	bl	8003866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800295c:	201c      	movs	r0, #28
 800295e:	f000 ff9e 	bl	800389e <HAL_NVIC_EnableIRQ>
}
 8002962:	e012      	b.n	800298a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0c      	ldr	r2, [pc, #48]	; (800299c <HAL_TIM_Base_MspInit+0xa0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d10d      	bne.n	800298a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_TIM_Base_MspInit+0x9c>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <HAL_TIM_Base_MspInit+0x9c>)
 8002978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800297c:	6413      	str	r3, [r2, #64]	; 0x40
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_TIM_Base_MspInit+0x9c>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40010000 	.word	0x40010000
 8002998:	40023800 	.word	0x40023800
 800299c:	40001c00 	.word	0x40001c00

080029a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 030c 	add.w	r3, r7, #12
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <HAL_TIM_MspPostInit+0x68>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d11e      	bne.n	8002a00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_TIM_MspPostInit+0x6c>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a10      	ldr	r2, [pc, #64]	; (8002a0c <HAL_TIM_MspPostInit+0x6c>)
 80029cc:	f043 0320 	orr.w	r3, r3, #32
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_TIM_MspPostInit+0x6c>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80029f0:	2309      	movs	r3, #9
 80029f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	4619      	mov	r1, r3
 80029fa:	4805      	ldr	r0, [pc, #20]	; (8002a10 <HAL_TIM_MspPostInit+0x70>)
 80029fc:	f001 fb6c 	bl	80040d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002a00:	bf00      	nop
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40001c00 	.word	0x40001c00
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40021400 	.word	0x40021400

08002a14 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4906      	ldr	r1, [pc, #24]	; (8002a34 <uart_init_esp+0x20>)
 8002a1c:	4806      	ldr	r0, [pc, #24]	; (8002a38 <uart_init_esp+0x24>)
 8002a1e:	f003 ffa6 	bl	800696e <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8002a22:	2201      	movs	r2, #1
 8002a24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a28:	4804      	ldr	r0, [pc, #16]	; (8002a3c <uart_init_esp+0x28>)
 8002a2a:	f001 fcf1 	bl	8004410 <HAL_GPIO_WritePin>
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200000a5 	.word	0x200000a5
 8002a38:	20000470 	.word	0x20000470
 8002a3c:	40021400 	.word	0x40021400

08002a40 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8002a4c:	887a      	ldrh	r2, [r7, #2]
 8002a4e:	230a      	movs	r3, #10
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4803      	ldr	r0, [pc, #12]	; (8002a60 <uart_EspSendBytes+0x20>)
 8002a54:	f003 fef9 	bl	800684a <HAL_UART_Transmit>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000470 	.word	0x20000470

08002a64 <uart_EspSendString>:
void uart_EspSendString(uint8_t* str){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4907      	ldr	r1, [pc, #28]	; (8002a8c <uart_EspSendString+0x28>)
 8002a70:	4807      	ldr	r0, [pc, #28]	; (8002a90 <uart_EspSendString+0x2c>)
 8002a72:	f004 ff67 	bl	8007944 <siprintf>
 8002a76:	4603      	mov	r3, r0
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	230a      	movs	r3, #10
 8002a7c:	4904      	ldr	r1, [pc, #16]	; (8002a90 <uart_EspSendString+0x2c>)
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <uart_EspSendString+0x30>)
 8002a80:	f003 fee3 	bl	800684a <HAL_UART_Transmit>
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	080081e8 	.word	0x080081e8
 8002a90:	200003c8 	.word	0x200003c8
 8002a94:	20000470 	.word	0x20000470

08002a98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <HAL_UART_RxCpltCallback+0x74>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002aaa:	230a      	movs	r3, #10
 8002aac:	2201      	movs	r2, #1
 8002aae:	4918      	ldr	r1, [pc, #96]	; (8002b10 <HAL_UART_RxCpltCallback+0x78>)
 8002ab0:	4818      	ldr	r0, [pc, #96]	; (8002b14 <HAL_UART_RxCpltCallback+0x7c>)
 8002ab2:	f003 feca 	bl	800684a <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	4915      	ldr	r1, [pc, #84]	; (8002b10 <HAL_UART_RxCpltCallback+0x78>)
 8002aba:	4816      	ldr	r0, [pc, #88]	; (8002b14 <HAL_UART_RxCpltCallback+0x7c>)
 8002abc:	f003 ff57 	bl	800696e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <HAL_UART_RxCpltCallback+0x80>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d11b      	bne.n	8002b02 <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_UART_RxCpltCallback+0x84>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b4f      	cmp	r3, #79	; 0x4f
 8002ad0:	d103      	bne.n	8002ada <HAL_UART_RxCpltCallback+0x42>
 8002ad2:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_UART_RxCpltCallback+0x88>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e00e      	b.n	8002af8 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_UART_RxCpltCallback+0x84>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b61      	cmp	r3, #97	; 0x61
 8002ae0:	d103      	bne.n	8002aea <HAL_UART_RxCpltCallback+0x52>
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_UART_RxCpltCallback+0x8c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e006      	b.n	8002af8 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_UART_RxCpltCallback+0x84>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b41      	cmp	r3, #65	; 0x41
 8002af0:	d102      	bne.n	8002af8 <HAL_UART_RxCpltCallback+0x60>
 8002af2:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <HAL_UART_RxCpltCallback+0x8c>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002af8:	2201      	movs	r2, #1
 8002afa:	4908      	ldr	r1, [pc, #32]	; (8002b1c <HAL_UART_RxCpltCallback+0x84>)
 8002afc:	480a      	ldr	r0, [pc, #40]	; (8002b28 <HAL_UART_RxCpltCallback+0x90>)
 8002afe:	f003 ff36 	bl	800696e <HAL_UART_Receive_IT>
	}
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40011000 	.word	0x40011000
 8002b10:	200000a4 	.word	0x200000a4
 8002b14:	2000042c 	.word	0x2000042c
 8002b18:	40004400 	.word	0x40004400
 8002b1c:	200000a5 	.word	0x200000a5
 8002b20:	200000a6 	.word	0x200000a6
 8002b24:	2000008e 	.word	0x2000008e
 8002b28:	20000470 	.word	0x20000470

08002b2c <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <uart_EspCheck+0x1c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <uart_EspCheck+0x10>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <uart_EspCheck+0x12>
	return 0;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	200000a6 	.word	0x200000a6

08002b4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <MX_USART1_UART_Init+0x50>)
 8002b54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b72:	220c      	movs	r2, #12
 8002b74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <MX_USART1_UART_Init+0x4c>)
 8002b84:	f003 fe14 	bl	80067b0 <HAL_UART_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b8e:	f7ff fae7 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000042c 	.word	0x2000042c
 8002b9c:	40011000 	.word	0x40011000

08002ba0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <MX_USART2_UART_Init+0x4c>)
 8002ba6:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <MX_USART2_UART_Init+0x50>)
 8002ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <MX_USART2_UART_Init+0x4c>)
 8002bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <MX_USART2_UART_Init+0x4c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <MX_USART2_UART_Init+0x4c>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <MX_USART2_UART_Init+0x4c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <MX_USART2_UART_Init+0x4c>)
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <MX_USART2_UART_Init+0x4c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <MX_USART2_UART_Init+0x4c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bd6:	4805      	ldr	r0, [pc, #20]	; (8002bec <MX_USART2_UART_Init+0x4c>)
 8002bd8:	f003 fdea 	bl	80067b0 <HAL_UART_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002be2:	f7ff fabd 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000470 	.word	0x20000470
 8002bf0:	40004400 	.word	0x40004400

08002bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a3a      	ldr	r2, [pc, #232]	; (8002cfc <HAL_UART_MspInit+0x108>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d135      	bne.n	8002c82 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <HAL_UART_MspInit+0x10c>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a38      	ldr	r2, [pc, #224]	; (8002d00 <HAL_UART_MspInit+0x10c>)
 8002c20:	f043 0310 	orr.w	r3, r3, #16
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <HAL_UART_MspInit+0x10c>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <HAL_UART_MspInit+0x10c>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a31      	ldr	r2, [pc, #196]	; (8002d00 <HAL_UART_MspInit+0x10c>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_UART_MspInit+0x10c>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c60:	2307      	movs	r3, #7
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c64:	f107 031c 	add.w	r3, r7, #28
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4826      	ldr	r0, [pc, #152]	; (8002d04 <HAL_UART_MspInit+0x110>)
 8002c6c:	f001 fa34 	bl	80040d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c70:	2200      	movs	r2, #0
 8002c72:	2100      	movs	r1, #0
 8002c74:	2025      	movs	r0, #37	; 0x25
 8002c76:	f000 fdf6 	bl	8003866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c7a:	2025      	movs	r0, #37	; 0x25
 8002c7c:	f000 fe0f 	bl	800389e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c80:	e038      	b.n	8002cf4 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <HAL_UART_MspInit+0x114>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d133      	bne.n	8002cf4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_UART_MspInit+0x10c>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a1a      	ldr	r2, [pc, #104]	; (8002d00 <HAL_UART_MspInit+0x10c>)
 8002c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9c:	4b18      	ldr	r3, [pc, #96]	; (8002d00 <HAL_UART_MspInit+0x10c>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <HAL_UART_MspInit+0x10c>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <HAL_UART_MspInit+0x10c>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_UART_MspInit+0x10c>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4809      	ldr	r0, [pc, #36]	; (8002d04 <HAL_UART_MspInit+0x110>)
 8002ce0:	f001 f9fa 	bl	80040d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	2026      	movs	r0, #38	; 0x26
 8002cea:	f000 fdbc 	bl	8003866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cee:	2026      	movs	r0, #38	; 0x26
 8002cf0:	f000 fdd5 	bl	800389e <HAL_NVIC_EnableIRQ>
}
 8002cf4:	bf00      	nop
 8002cf6:	3730      	adds	r7, #48	; 0x30
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40011000 	.word	0x40011000
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40020000 	.word	0x40020000
 8002d08:	40004400 	.word	0x40004400

08002d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d10:	480d      	ldr	r0, [pc, #52]	; (8002d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d12:	490e      	ldr	r1, [pc, #56]	; (8002d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d14:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d18:	e002      	b.n	8002d20 <LoopCopyDataInit>

08002d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d1e:	3304      	adds	r3, #4

08002d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d24:	d3f9      	bcc.n	8002d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d28:	4c0b      	ldr	r4, [pc, #44]	; (8002d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d2c:	e001      	b.n	8002d32 <LoopFillZerobss>

08002d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d30:	3204      	adds	r2, #4

08002d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d34:	d3fb      	bcc.n	8002d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d36:	f7ff fce5 	bl	8002704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d3a:	f004 fdd7 	bl	80078ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d3e:	f7ff f983 	bl	8002048 <main>
  bx  lr    
 8002d42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002d50:	0800b1e0 	.word	0x0800b1e0
  ldr r2, =_sbss
 8002d54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002d58:	200004c8 	.word	0x200004c8

08002d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <ADC_IRQHandler>
	...

08002d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_Init+0x40>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <HAL_Init+0x40>)
 8002d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_Init+0x40>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <HAL_Init+0x40>)
 8002d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_Init+0x40>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <HAL_Init+0x40>)
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d88:	2003      	movs	r0, #3
 8002d8a:	f000 fd61 	bl	8003850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d8e:	200f      	movs	r0, #15
 8002d90:	f000 f808 	bl	8002da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d94:	f7ff fb66 	bl	8002464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023c00 	.word	0x40023c00

08002da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dac:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_InitTick+0x54>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_InitTick+0x58>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4619      	mov	r1, r3
 8002db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fd79 	bl	80038ba <HAL_SYSTICK_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00e      	b.n	8002df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b0f      	cmp	r3, #15
 8002dd6:	d80a      	bhi.n	8002dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f000 fd41 	bl	8003866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002de4:	4a06      	ldr	r2, [pc, #24]	; (8002e00 <HAL_InitTick+0x5c>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e000      	b.n	8002df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	20000008 	.word	0x20000008
 8002e00:	20000004 	.word	0x20000004

08002e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_IncTick+0x20>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_IncTick+0x24>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <HAL_IncTick+0x24>)
 8002e16:	6013      	str	r3, [r2, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000008 	.word	0x20000008
 8002e28:	200004b4 	.word	0x200004b4

08002e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_GetTick+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	200004b4 	.word	0x200004b4

08002e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e4c:	f7ff ffee 	bl	8002e2c <HAL_GetTick>
 8002e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d005      	beq.n	8002e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_Delay+0x44>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e6a:	bf00      	nop
 8002e6c:	f7ff ffde 	bl	8002e2c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d8f7      	bhi.n	8002e6c <HAL_Delay+0x28>
  {
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000008 	.word	0x20000008

08002e8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e033      	b.n	8002f0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fd ffd4 	bl	8000e58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d118      	bne.n	8002efc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ed2:	f023 0302 	bic.w	r3, r3, #2
 8002ed6:	f043 0202 	orr.w	r2, r3, #2
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fa68 	bl	80033b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f023 0303 	bic.w	r3, r3, #3
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8002efa:	e001      	b.n	8002f00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_Start_DMA+0x1e>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e0e9      	b.n	8003106 <HAL_ADC_Start_DMA+0x1f2>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d018      	beq.n	8002f7a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f58:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <HAL_ADC_Start_DMA+0x1fc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6d      	ldr	r2, [pc, #436]	; (8003114 <HAL_ADC_Start_DMA+0x200>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	0c9a      	lsrs	r2, r3, #18
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f6c:	e002      	b.n	8002f74 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f9      	bne.n	8002f6e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f88:	d107      	bne.n	8002f9a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f98:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	f040 80a1 	bne.w	80030ec <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe8:	d106      	bne.n	8002ff8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f023 0206 	bic.w	r2, r3, #6
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44
 8002ff6:	e002      	b.n	8002ffe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003006:	4b44      	ldr	r3, [pc, #272]	; (8003118 <HAL_ADC_Start_DMA+0x204>)
 8003008:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	4a43      	ldr	r2, [pc, #268]	; (800311c <HAL_ADC_Start_DMA+0x208>)
 8003010:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	4a42      	ldr	r2, [pc, #264]	; (8003120 <HAL_ADC_Start_DMA+0x20c>)
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	4a41      	ldr	r2, [pc, #260]	; (8003124 <HAL_ADC_Start_DMA+0x210>)
 8003020:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800302a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800303a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	334c      	adds	r3, #76	; 0x4c
 8003056:	4619      	mov	r1, r3
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f000 fce8 	bl	8003a30 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	2b00      	cmp	r3, #0
 800306a:	d12a      	bne.n	80030c2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2d      	ldr	r2, [pc, #180]	; (8003128 <HAL_ADC_Start_DMA+0x214>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d015      	beq.n	80030a2 <HAL_ADC_Start_DMA+0x18e>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a2c      	ldr	r2, [pc, #176]	; (800312c <HAL_ADC_Start_DMA+0x218>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d105      	bne.n	800308c <HAL_ADC_Start_DMA+0x178>
 8003080:	4b25      	ldr	r3, [pc, #148]	; (8003118 <HAL_ADC_Start_DMA+0x204>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a27      	ldr	r2, [pc, #156]	; (8003130 <HAL_ADC_Start_DMA+0x21c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d136      	bne.n	8003104 <HAL_ADC_Start_DMA+0x1f0>
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_ADC_Start_DMA+0x204>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d130      	bne.n	8003104 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d129      	bne.n	8003104 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e020      	b.n	8003104 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a18      	ldr	r2, [pc, #96]	; (8003128 <HAL_ADC_Start_DMA+0x214>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d11b      	bne.n	8003104 <HAL_ADC_Start_DMA+0x1f0>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d114      	bne.n	8003104 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	e00b      	b.n	8003104 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f043 0210 	orr.w	r2, r3, #16
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000000 	.word	0x20000000
 8003114:	431bde83 	.word	0x431bde83
 8003118:	40012300 	.word	0x40012300
 800311c:	080035ad 	.word	0x080035ad
 8003120:	08003667 	.word	0x08003667
 8003124:	08003683 	.word	0x08003683
 8003128:	40012000 	.word	0x40012000
 800312c:	40012100 	.word	0x40012100
 8003130:	40012200 	.word	0x40012200

08003134 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1c>
 8003188:	2302      	movs	r3, #2
 800318a:	e105      	b.n	8003398 <HAL_ADC_ConfigChannel+0x228>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b09      	cmp	r3, #9
 800319a:	d925      	bls.n	80031e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68d9      	ldr	r1, [r3, #12]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	3b1e      	subs	r3, #30
 80031b2:	2207      	movs	r2, #7
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43da      	mvns	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	400a      	ands	r2, r1
 80031c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68d9      	ldr	r1, [r3, #12]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	4618      	mov	r0, r3
 80031d4:	4603      	mov	r3, r0
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4403      	add	r3, r0
 80031da:	3b1e      	subs	r3, #30
 80031dc:	409a      	lsls	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	e022      	b.n	800322e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6919      	ldr	r1, [r3, #16]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	2207      	movs	r2, #7
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	400a      	ands	r2, r1
 800320a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6919      	ldr	r1, [r3, #16]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	4618      	mov	r0, r3
 800321e:	4603      	mov	r3, r0
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4403      	add	r3, r0
 8003224:	409a      	lsls	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b06      	cmp	r3, #6
 8003234:	d824      	bhi.n	8003280 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	3b05      	subs	r3, #5
 8003248:	221f      	movs	r2, #31
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	400a      	ands	r2, r1
 8003256:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	4618      	mov	r0, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	3b05      	subs	r3, #5
 8003272:	fa00 f203 	lsl.w	r2, r0, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	635a      	str	r2, [r3, #52]	; 0x34
 800327e:	e04c      	b.n	800331a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d824      	bhi.n	80032d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	3b23      	subs	r3, #35	; 0x23
 800329a:	221f      	movs	r2, #31
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43da      	mvns	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	400a      	ands	r2, r1
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	4618      	mov	r0, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	3b23      	subs	r3, #35	; 0x23
 80032c4:	fa00 f203 	lsl.w	r2, r0, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
 80032d0:	e023      	b.n	800331a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	3b41      	subs	r3, #65	; 0x41
 80032e4:	221f      	movs	r2, #31
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43da      	mvns	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	400a      	ands	r2, r1
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	4618      	mov	r0, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	3b41      	subs	r3, #65	; 0x41
 800330e:	fa00 f203 	lsl.w	r2, r0, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_ADC_ConfigChannel+0x234>)
 800331c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a21      	ldr	r2, [pc, #132]	; (80033a8 <HAL_ADC_ConfigChannel+0x238>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d109      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1cc>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b12      	cmp	r3, #18
 800332e:	d105      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <HAL_ADC_ConfigChannel+0x238>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d123      	bne.n	800338e <HAL_ADC_ConfigChannel+0x21e>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b10      	cmp	r3, #16
 800334c:	d003      	beq.n	8003356 <HAL_ADC_ConfigChannel+0x1e6>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b11      	cmp	r3, #17
 8003354:	d11b      	bne.n	800338e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b10      	cmp	r3, #16
 8003368:	d111      	bne.n	800338e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <HAL_ADC_ConfigChannel+0x23c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <HAL_ADC_ConfigChannel+0x240>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	0c9a      	lsrs	r2, r3, #18
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003380:	e002      	b.n	8003388 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3b01      	subs	r3, #1
 8003386:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f9      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40012300 	.word	0x40012300
 80033a8:	40012000 	.word	0x40012000
 80033ac:	20000000 	.word	0x20000000
 80033b0:	431bde83 	.word	0x431bde83

080033b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033bc:	4b79      	ldr	r3, [pc, #484]	; (80035a4 <ADC_Init+0x1f0>)
 80033be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	021a      	lsls	r2, r3, #8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800340c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800342e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6899      	ldr	r1, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	4a58      	ldr	r2, [pc, #352]	; (80035a8 <ADC_Init+0x1f4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d022      	beq.n	8003492 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800345a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6899      	ldr	r1, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800347c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6899      	ldr	r1, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	e00f      	b.n	80034b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0202 	bic.w	r2, r2, #2
 80034c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6899      	ldr	r1, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	7e1b      	ldrb	r3, [r3, #24]
 80034cc:	005a      	lsls	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01b      	beq.n	8003518 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6859      	ldr	r1, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	3b01      	subs	r3, #1
 800350c:	035a      	lsls	r2, r3, #13
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	e007      	b.n	8003528 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003526:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	3b01      	subs	r3, #1
 8003544:	051a      	lsls	r2, r3, #20
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800355c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6899      	ldr	r1, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800356a:	025a      	lsls	r2, r3, #9
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003582:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6899      	ldr	r1, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	029a      	lsls	r2, r3, #10
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40012300 	.word	0x40012300
 80035a8:	0f000001 	.word	0x0f000001

080035ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d13c      	bne.n	8003640 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d12b      	bne.n	8003638 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d127      	bne.n	8003638 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d006      	beq.n	8003604 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003600:	2b00      	cmp	r3, #0
 8003602:	d119      	bne.n	8003638 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0220 	bic.w	r2, r2, #32
 8003612:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	f043 0201 	orr.w	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff fd7b 	bl	8003134 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800363e:	e00e      	b.n	800365e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f7ff fd85 	bl	800315c <HAL_ADC_ErrorCallback>
}
 8003652:	e004      	b.n	800365e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f7ff fd67 	bl	8003148 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f043 0204 	orr.w	r2, r3, #4
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f7ff fd5a 	bl	800315c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036cc:	4013      	ands	r3, r2
 80036ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036e2:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	60d3      	str	r3, [r2, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <__NVIC_GetPriorityGrouping+0x18>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	f003 0307 	and.w	r3, r3, #7
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	db0b      	blt.n	800373e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4907      	ldr	r1, [pc, #28]	; (800374c <__NVIC_EnableIRQ+0x38>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2001      	movs	r0, #1
 8003736:	fa00 f202 	lsl.w	r2, r0, r2
 800373a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000e100 	.word	0xe000e100

08003750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	2b00      	cmp	r3, #0
 8003762:	db0a      	blt.n	800377a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	490c      	ldr	r1, [pc, #48]	; (800379c <__NVIC_SetPriority+0x4c>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	0112      	lsls	r2, r2, #4
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	440b      	add	r3, r1
 8003774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003778:	e00a      	b.n	8003790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4908      	ldr	r1, [pc, #32]	; (80037a0 <__NVIC_SetPriority+0x50>)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	3b04      	subs	r3, #4
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	440b      	add	r3, r1
 800378e:	761a      	strb	r2, [r3, #24]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000e100 	.word	0xe000e100
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f1c3 0307 	rsb	r3, r3, #7
 80037be:	2b04      	cmp	r3, #4
 80037c0:	bf28      	it	cs
 80037c2:	2304      	movcs	r3, #4
 80037c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	d902      	bls.n	80037d4 <NVIC_EncodePriority+0x30>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3b03      	subs	r3, #3
 80037d2:	e000      	b.n	80037d6 <NVIC_EncodePriority+0x32>
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	f04f 32ff 	mov.w	r2, #4294967295
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	401a      	ands	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ec:	f04f 31ff 	mov.w	r1, #4294967295
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	fa01 f303 	lsl.w	r3, r1, r3
 80037f6:	43d9      	mvns	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037fc:	4313      	orrs	r3, r2
         );
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3724      	adds	r7, #36	; 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800381c:	d301      	bcc.n	8003822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800381e:	2301      	movs	r3, #1
 8003820:	e00f      	b.n	8003842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003822:	4a0a      	ldr	r2, [pc, #40]	; (800384c <SysTick_Config+0x40>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382a:	210f      	movs	r1, #15
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	f7ff ff8e 	bl	8003750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <SysTick_Config+0x40>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383a:	4b04      	ldr	r3, [pc, #16]	; (800384c <SysTick_Config+0x40>)
 800383c:	2207      	movs	r2, #7
 800383e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	e000e010 	.word	0xe000e010

08003850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ff29 	bl	80036b0 <__NVIC_SetPriorityGrouping>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003878:	f7ff ff3e 	bl	80036f8 <__NVIC_GetPriorityGrouping>
 800387c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	6978      	ldr	r0, [r7, #20]
 8003884:	f7ff ff8e 	bl	80037a4 <NVIC_EncodePriority>
 8003888:	4602      	mov	r2, r0
 800388a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff5d 	bl	8003750 <__NVIC_SetPriority>
}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff ff31 	bl	8003714 <__NVIC_EnableIRQ>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ffa2 	bl	800380c <SysTick_Config>
 80038c8:	4603      	mov	r3, r0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038e0:	f7ff faa4 	bl	8002e2c <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e099      	b.n	8003a24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003910:	e00f      	b.n	8003932 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003912:	f7ff fa8b 	bl	8002e2c <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b05      	cmp	r3, #5
 800391e:	d908      	bls.n	8003932 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2203      	movs	r2, #3
 800392a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e078      	b.n	8003a24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e8      	bne.n	8003912 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4b38      	ldr	r3, [pc, #224]	; (8003a2c <HAL_DMA_Init+0x158>)
 800394c:	4013      	ands	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800395e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	2b04      	cmp	r3, #4
 800398a:	d107      	bne.n	800399c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	4313      	orrs	r3, r2
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0307 	bic.w	r3, r3, #7
 80039b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d117      	bne.n	80039f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fb01 	bl	8003fe0 <DMA_CheckFifoParam>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2240      	movs	r2, #64	; 0x40
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039f2:	2301      	movs	r3, #1
 80039f4:	e016      	b.n	8003a24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fab8 	bl	8003f74 <DMA_CalcBaseAndBitshift>
 8003a04:	4603      	mov	r3, r0
 8003a06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	223f      	movs	r2, #63	; 0x3f
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	f010803f 	.word	0xf010803f

08003a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_DMA_Start_IT+0x26>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e040      	b.n	8003ad8 <HAL_DMA_Start_IT+0xa8>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d12f      	bne.n	8003aca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 fa4a 	bl	8003f18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	223f      	movs	r2, #63	; 0x3f
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0216 	orr.w	r2, r2, #22
 8003a9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0208 	orr.w	r2, r2, #8
 8003ab6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e005      	b.n	8003ad6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003aee:	f7ff f99d 	bl	8002e2c <HAL_GetTick>
 8003af2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d008      	beq.n	8003b12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2280      	movs	r2, #128	; 0x80
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e052      	b.n	8003bb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0216 	bic.w	r2, r2, #22
 8003b20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <HAL_DMA_Abort+0x62>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0208 	bic.w	r2, r2, #8
 8003b50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0201 	bic.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b62:	e013      	b.n	8003b8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b64:	f7ff f962 	bl	8002e2c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d90c      	bls.n	8003b8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e015      	b.n	8003bb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e4      	bne.n	8003b64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9e:	223f      	movs	r2, #63	; 0x3f
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d004      	beq.n	8003bde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2280      	movs	r2, #128	; 0x80
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e00c      	b.n	8003bf8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2205      	movs	r2, #5
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0201 	bic.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c10:	4b92      	ldr	r3, [pc, #584]	; (8003e5c <HAL_DMA_IRQHandler+0x258>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a92      	ldr	r2, [pc, #584]	; (8003e60 <HAL_DMA_IRQHandler+0x25c>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2e:	2208      	movs	r2, #8
 8003c30:	409a      	lsls	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01a      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0204 	bic.w	r2, r2, #4
 8003c56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c68:	f043 0201 	orr.w	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	2201      	movs	r2, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d012      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c92:	2201      	movs	r2, #1
 8003c94:	409a      	lsls	r2, r3
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	f043 0202 	orr.w	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	2204      	movs	r2, #4
 8003cac:	409a      	lsls	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d012      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc8:	2204      	movs	r2, #4
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	f043 0204 	orr.w	r2, r3, #4
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	2210      	movs	r2, #16
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d043      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d03c      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	2210      	movs	r2, #16
 8003d00:	409a      	lsls	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d018      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d108      	bne.n	8003d34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d024      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4798      	blx	r3
 8003d32:	e01f      	b.n	8003d74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01b      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
 8003d44:	e016      	b.n	8003d74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d107      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0208 	bic.w	r2, r2, #8
 8003d62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	2220      	movs	r2, #32
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 808e 	beq.w	8003ea2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8086 	beq.w	8003ea2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d136      	bne.n	8003e1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0216 	bic.w	r2, r2, #22
 8003dbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d103      	bne.n	8003dde <HAL_DMA_IRQHandler+0x1da>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0208 	bic.w	r2, r2, #8
 8003dec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	223f      	movs	r2, #63	; 0x3f
 8003df4:	409a      	lsls	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d07d      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	4798      	blx	r3
        }
        return;
 8003e1a:	e078      	b.n	8003f0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01c      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d108      	bne.n	8003e4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d030      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
 8003e48:	e02b      	b.n	8003ea2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d027      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
 8003e5a:	e022      	b.n	8003ea2 <HAL_DMA_IRQHandler+0x29e>
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10f      	bne.n	8003e92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0210 	bic.w	r2, r2, #16
 8003e80:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d032      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d022      	beq.n	8003efc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2205      	movs	r2, #5
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d307      	bcc.n	8003eea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f2      	bne.n	8003ece <HAL_DMA_IRQHandler+0x2ca>
 8003ee8:	e000      	b.n	8003eec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003eea:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4798      	blx	r3
 8003f0c:	e000      	b.n	8003f10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003f0e:	bf00      	nop
    }
  }
}
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop

08003f18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d108      	bne.n	8003f58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f56:	e007      	b.n	8003f68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	60da      	str	r2, [r3, #12]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	3b10      	subs	r3, #16
 8003f84:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <DMA_CalcBaseAndBitshift+0x64>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f8e:	4a13      	ldr	r2, [pc, #76]	; (8003fdc <DMA_CalcBaseAndBitshift+0x68>)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d909      	bls.n	8003fb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003faa:	f023 0303 	bic.w	r3, r3, #3
 8003fae:	1d1a      	adds	r2, r3, #4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	659a      	str	r2, [r3, #88]	; 0x58
 8003fb4:	e007      	b.n	8003fc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	aaaaaaab 	.word	0xaaaaaaab
 8003fdc:	0800b194 	.word	0x0800b194

08003fe0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11f      	bne.n	800403a <DMA_CheckFifoParam+0x5a>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d856      	bhi.n	80040ae <DMA_CheckFifoParam+0xce>
 8004000:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <DMA_CheckFifoParam+0x28>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	08004019 	.word	0x08004019
 800400c:	0800402b 	.word	0x0800402b
 8004010:	08004019 	.word	0x08004019
 8004014:	080040af 	.word	0x080040af
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d046      	beq.n	80040b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004028:	e043      	b.n	80040b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004032:	d140      	bne.n	80040b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004038:	e03d      	b.n	80040b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004042:	d121      	bne.n	8004088 <DMA_CheckFifoParam+0xa8>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d837      	bhi.n	80040ba <DMA_CheckFifoParam+0xda>
 800404a:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <DMA_CheckFifoParam+0x70>)
 800404c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004050:	08004061 	.word	0x08004061
 8004054:	08004067 	.word	0x08004067
 8004058:	08004061 	.word	0x08004061
 800405c:	08004079 	.word	0x08004079
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      break;
 8004064:	e030      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d025      	beq.n	80040be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004076:	e022      	b.n	80040be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004080:	d11f      	bne.n	80040c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004086:	e01c      	b.n	80040c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d903      	bls.n	8004096 <DMA_CheckFifoParam+0xb6>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d003      	beq.n	800409c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004094:	e018      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
      break;
 800409a:	e015      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      break;
 80040ac:	e00b      	b.n	80040c6 <DMA_CheckFifoParam+0xe6>
      break;
 80040ae:	bf00      	nop
 80040b0:	e00a      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040b2:	bf00      	nop
 80040b4:	e008      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040b6:	bf00      	nop
 80040b8:	e006      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ba:	bf00      	nop
 80040bc:	e004      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040be:	bf00      	nop
 80040c0:	e002      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80040c2:	bf00      	nop
 80040c4:	e000      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040c6:	bf00      	nop
    }
  } 
  
  return status; 
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop

080040d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	; 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	e16b      	b.n	80043cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040f4:	2201      	movs	r2, #1
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	429a      	cmp	r2, r3
 800410e:	f040 815a 	bne.w	80043c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d005      	beq.n	800412a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004126:	2b02      	cmp	r3, #2
 8004128:	d130      	bne.n	800418c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	2203      	movs	r2, #3
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4013      	ands	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004160:	2201      	movs	r2, #1
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 0201 	and.w	r2, r3, #1
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4313      	orrs	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b03      	cmp	r3, #3
 8004196:	d017      	beq.n	80041c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	2203      	movs	r2, #3
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d123      	bne.n	800421c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	08da      	lsrs	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3208      	adds	r2, #8
 80041dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	220f      	movs	r2, #15
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	08da      	lsrs	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3208      	adds	r2, #8
 8004216:	69b9      	ldr	r1, [r7, #24]
 8004218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 0203 	and.w	r2, r3, #3
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80b4 	beq.w	80043c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	4b60      	ldr	r3, [pc, #384]	; (80043e4 <HAL_GPIO_Init+0x30c>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	4a5f      	ldr	r2, [pc, #380]	; (80043e4 <HAL_GPIO_Init+0x30c>)
 8004268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800426c:	6453      	str	r3, [r2, #68]	; 0x44
 800426e:	4b5d      	ldr	r3, [pc, #372]	; (80043e4 <HAL_GPIO_Init+0x30c>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800427a:	4a5b      	ldr	r2, [pc, #364]	; (80043e8 <HAL_GPIO_Init+0x310>)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	089b      	lsrs	r3, r3, #2
 8004280:	3302      	adds	r3, #2
 8004282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	220f      	movs	r2, #15
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a52      	ldr	r2, [pc, #328]	; (80043ec <HAL_GPIO_Init+0x314>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d02b      	beq.n	80042fe <HAL_GPIO_Init+0x226>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a51      	ldr	r2, [pc, #324]	; (80043f0 <HAL_GPIO_Init+0x318>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d025      	beq.n	80042fa <HAL_GPIO_Init+0x222>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a50      	ldr	r2, [pc, #320]	; (80043f4 <HAL_GPIO_Init+0x31c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01f      	beq.n	80042f6 <HAL_GPIO_Init+0x21e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a4f      	ldr	r2, [pc, #316]	; (80043f8 <HAL_GPIO_Init+0x320>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d019      	beq.n	80042f2 <HAL_GPIO_Init+0x21a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a4e      	ldr	r2, [pc, #312]	; (80043fc <HAL_GPIO_Init+0x324>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_GPIO_Init+0x216>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a4d      	ldr	r2, [pc, #308]	; (8004400 <HAL_GPIO_Init+0x328>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00d      	beq.n	80042ea <HAL_GPIO_Init+0x212>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a4c      	ldr	r2, [pc, #304]	; (8004404 <HAL_GPIO_Init+0x32c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <HAL_GPIO_Init+0x20e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a4b      	ldr	r2, [pc, #300]	; (8004408 <HAL_GPIO_Init+0x330>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d101      	bne.n	80042e2 <HAL_GPIO_Init+0x20a>
 80042de:	2307      	movs	r3, #7
 80042e0:	e00e      	b.n	8004300 <HAL_GPIO_Init+0x228>
 80042e2:	2308      	movs	r3, #8
 80042e4:	e00c      	b.n	8004300 <HAL_GPIO_Init+0x228>
 80042e6:	2306      	movs	r3, #6
 80042e8:	e00a      	b.n	8004300 <HAL_GPIO_Init+0x228>
 80042ea:	2305      	movs	r3, #5
 80042ec:	e008      	b.n	8004300 <HAL_GPIO_Init+0x228>
 80042ee:	2304      	movs	r3, #4
 80042f0:	e006      	b.n	8004300 <HAL_GPIO_Init+0x228>
 80042f2:	2303      	movs	r3, #3
 80042f4:	e004      	b.n	8004300 <HAL_GPIO_Init+0x228>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e002      	b.n	8004300 <HAL_GPIO_Init+0x228>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <HAL_GPIO_Init+0x228>
 80042fe:	2300      	movs	r3, #0
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	f002 0203 	and.w	r2, r2, #3
 8004306:	0092      	lsls	r2, r2, #2
 8004308:	4093      	lsls	r3, r2
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4313      	orrs	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004310:	4935      	ldr	r1, [pc, #212]	; (80043e8 <HAL_GPIO_Init+0x310>)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	3302      	adds	r3, #2
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800431e:	4b3b      	ldr	r3, [pc, #236]	; (800440c <HAL_GPIO_Init+0x334>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	43db      	mvns	r3, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4013      	ands	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004342:	4a32      	ldr	r2, [pc, #200]	; (800440c <HAL_GPIO_Init+0x334>)
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004348:	4b30      	ldr	r3, [pc, #192]	; (800440c <HAL_GPIO_Init+0x334>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	43db      	mvns	r3, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800436c:	4a27      	ldr	r2, [pc, #156]	; (800440c <HAL_GPIO_Init+0x334>)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <HAL_GPIO_Init+0x334>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004396:	4a1d      	ldr	r2, [pc, #116]	; (800440c <HAL_GPIO_Init+0x334>)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800439c:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_GPIO_Init+0x334>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043c0:	4a12      	ldr	r2, [pc, #72]	; (800440c <HAL_GPIO_Init+0x334>)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3301      	adds	r3, #1
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2b0f      	cmp	r3, #15
 80043d0:	f67f ae90 	bls.w	80040f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop
 80043d8:	3724      	adds	r7, #36	; 0x24
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40013800 	.word	0x40013800
 80043ec:	40020000 	.word	0x40020000
 80043f0:	40020400 	.word	0x40020400
 80043f4:	40020800 	.word	0x40020800
 80043f8:	40020c00 	.word	0x40020c00
 80043fc:	40021000 	.word	0x40021000
 8004400:	40021400 	.word	0x40021400
 8004404:	40021800 	.word	0x40021800
 8004408:	40021c00 	.word	0x40021c00
 800440c:	40013c00 	.word	0x40013c00

08004410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	807b      	strh	r3, [r7, #2]
 800441c:	4613      	mov	r3, r2
 800441e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004420:	787b      	ldrb	r3, [r7, #1]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004426:	887a      	ldrh	r2, [r7, #2]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800442c:	e003      	b.n	8004436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800442e:	887b      	ldrh	r3, [r7, #2]
 8004430:	041a      	lsls	r2, r3, #16
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	619a      	str	r2, [r3, #24]
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e12b      	b.n	80046ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fd f980 	bl	8001770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2224      	movs	r2, #36	; 0x24
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004496:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044a8:	f000 fd5c 	bl	8004f64 <HAL_RCC_GetPCLK1Freq>
 80044ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4a81      	ldr	r2, [pc, #516]	; (80046b8 <HAL_I2C_Init+0x274>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d807      	bhi.n	80044c8 <HAL_I2C_Init+0x84>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a80      	ldr	r2, [pc, #512]	; (80046bc <HAL_I2C_Init+0x278>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	bf94      	ite	ls
 80044c0:	2301      	movls	r3, #1
 80044c2:	2300      	movhi	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e006      	b.n	80044d6 <HAL_I2C_Init+0x92>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a7d      	ldr	r2, [pc, #500]	; (80046c0 <HAL_I2C_Init+0x27c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bf94      	ite	ls
 80044d0:	2301      	movls	r3, #1
 80044d2:	2300      	movhi	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0e7      	b.n	80046ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4a78      	ldr	r2, [pc, #480]	; (80046c4 <HAL_I2C_Init+0x280>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	0c9b      	lsrs	r3, r3, #18
 80044e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4a6a      	ldr	r2, [pc, #424]	; (80046b8 <HAL_I2C_Init+0x274>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d802      	bhi.n	8004518 <HAL_I2C_Init+0xd4>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3301      	adds	r3, #1
 8004516:	e009      	b.n	800452c <HAL_I2C_Init+0xe8>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800451e:	fb02 f303 	mul.w	r3, r2, r3
 8004522:	4a69      	ldr	r2, [pc, #420]	; (80046c8 <HAL_I2C_Init+0x284>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	099b      	lsrs	r3, r3, #6
 800452a:	3301      	adds	r3, #1
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	430b      	orrs	r3, r1
 8004532:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800453e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	495c      	ldr	r1, [pc, #368]	; (80046b8 <HAL_I2C_Init+0x274>)
 8004548:	428b      	cmp	r3, r1
 800454a:	d819      	bhi.n	8004580 <HAL_I2C_Init+0x13c>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1e59      	subs	r1, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	fbb1 f3f3 	udiv	r3, r1, r3
 800455a:	1c59      	adds	r1, r3, #1
 800455c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004560:	400b      	ands	r3, r1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_I2C_Init+0x138>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1e59      	subs	r1, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	fbb1 f3f3 	udiv	r3, r1, r3
 8004574:	3301      	adds	r3, #1
 8004576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457a:	e051      	b.n	8004620 <HAL_I2C_Init+0x1dc>
 800457c:	2304      	movs	r3, #4
 800457e:	e04f      	b.n	8004620 <HAL_I2C_Init+0x1dc>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d111      	bne.n	80045ac <HAL_I2C_Init+0x168>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1e58      	subs	r0, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6859      	ldr	r1, [r3, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	440b      	add	r3, r1
 8004596:	fbb0 f3f3 	udiv	r3, r0, r3
 800459a:	3301      	adds	r3, #1
 800459c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e012      	b.n	80045d2 <HAL_I2C_Init+0x18e>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1e58      	subs	r0, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	0099      	lsls	r1, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	fbb0 f3f3 	udiv	r3, r0, r3
 80045c2:	3301      	adds	r3, #1
 80045c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_I2C_Init+0x196>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e022      	b.n	8004620 <HAL_I2C_Init+0x1dc>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10e      	bne.n	8004600 <HAL_I2C_Init+0x1bc>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1e58      	subs	r0, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6859      	ldr	r1, [r3, #4]
 80045ea:	460b      	mov	r3, r1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	440b      	add	r3, r1
 80045f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80045f4:	3301      	adds	r3, #1
 80045f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fe:	e00f      	b.n	8004620 <HAL_I2C_Init+0x1dc>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1e58      	subs	r0, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6859      	ldr	r1, [r3, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	0099      	lsls	r1, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	fbb0 f3f3 	udiv	r3, r0, r3
 8004616:	3301      	adds	r3, #1
 8004618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	6809      	ldr	r1, [r1, #0]
 8004624:	4313      	orrs	r3, r2
 8004626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69da      	ldr	r2, [r3, #28]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800464e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6911      	ldr	r1, [r2, #16]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68d2      	ldr	r2, [r2, #12]
 800465a:	4311      	orrs	r1, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	430b      	orrs	r3, r1
 8004662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	000186a0 	.word	0x000186a0
 80046bc:	001e847f 	.word	0x001e847f
 80046c0:	003d08ff 	.word	0x003d08ff
 80046c4:	431bde83 	.word	0x431bde83
 80046c8:	10624dd3 	.word	0x10624dd3

080046cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e264      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d075      	beq.n	80047d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ea:	4ba3      	ldr	r3, [pc, #652]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d00c      	beq.n	8004710 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046f6:	4ba0      	ldr	r3, [pc, #640]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d112      	bne.n	8004728 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004702:	4b9d      	ldr	r3, [pc, #628]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800470e:	d10b      	bne.n	8004728 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004710:	4b99      	ldr	r3, [pc, #612]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d05b      	beq.n	80047d4 <HAL_RCC_OscConfig+0x108>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d157      	bne.n	80047d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e23f      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004730:	d106      	bne.n	8004740 <HAL_RCC_OscConfig+0x74>
 8004732:	4b91      	ldr	r3, [pc, #580]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a90      	ldr	r2, [pc, #576]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e01d      	b.n	800477c <HAL_RCC_OscConfig+0xb0>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0x98>
 800474a:	4b8b      	ldr	r3, [pc, #556]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a8a      	ldr	r2, [pc, #552]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b88      	ldr	r3, [pc, #544]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a87      	ldr	r2, [pc, #540]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e00b      	b.n	800477c <HAL_RCC_OscConfig+0xb0>
 8004764:	4b84      	ldr	r3, [pc, #528]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a83      	ldr	r2, [pc, #524]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 800476a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b81      	ldr	r3, [pc, #516]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a80      	ldr	r2, [pc, #512]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d013      	beq.n	80047ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fe fb52 	bl	8002e2c <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800478c:	f7fe fb4e 	bl	8002e2c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e204      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b76      	ldr	r3, [pc, #472]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0xc0>
 80047aa:	e014      	b.n	80047d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fe fb3e 	bl	8002e2c <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fe fb3a 	bl	8002e2c <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e1f0      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c6:	4b6c      	ldr	r3, [pc, #432]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0xe8>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d063      	beq.n	80048aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047e2:	4b65      	ldr	r3, [pc, #404]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ee:	4b62      	ldr	r3, [pc, #392]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d11c      	bne.n	8004834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fa:	4b5f      	ldr	r3, [pc, #380]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d116      	bne.n	8004834 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	4b5c      	ldr	r3, [pc, #368]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_RCC_OscConfig+0x152>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d001      	beq.n	800481e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e1c4      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481e:	4b56      	ldr	r3, [pc, #344]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4952      	ldr	r1, [pc, #328]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	e03a      	b.n	80048aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d020      	beq.n	800487e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483c:	4b4f      	ldr	r3, [pc, #316]	; (800497c <HAL_RCC_OscConfig+0x2b0>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004842:	f7fe faf3 	bl	8002e2c <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800484a:	f7fe faef 	bl	8002e2c <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e1a5      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485c:	4b46      	ldr	r3, [pc, #280]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004868:	4b43      	ldr	r3, [pc, #268]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4940      	ldr	r1, [pc, #256]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]
 800487c:	e015      	b.n	80048aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487e:	4b3f      	ldr	r3, [pc, #252]	; (800497c <HAL_RCC_OscConfig+0x2b0>)
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004884:	f7fe fad2 	bl	8002e2c <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800488c:	f7fe face 	bl	8002e2c <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e184      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489e:	4b36      	ldr	r3, [pc, #216]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d030      	beq.n	8004918 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d016      	beq.n	80048ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048be:	4b30      	ldr	r3, [pc, #192]	; (8004980 <HAL_RCC_OscConfig+0x2b4>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fe fab2 	bl	8002e2c <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048cc:	f7fe faae 	bl	8002e2c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e164      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x200>
 80048ea:	e015      	b.n	8004918 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ec:	4b24      	ldr	r3, [pc, #144]	; (8004980 <HAL_RCC_OscConfig+0x2b4>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f2:	f7fe fa9b 	bl	8002e2c <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048fa:	f7fe fa97 	bl	8002e2c <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e14d      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800490c:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 800490e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f0      	bne.n	80048fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 80a0 	beq.w	8004a66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004926:	2300      	movs	r3, #0
 8004928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10f      	bne.n	8004956 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4a0e      	ldr	r2, [pc, #56]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004944:	6413      	str	r3, [r2, #64]	; 0x40
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004952:	2301      	movs	r3, #1
 8004954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_OscConfig+0x2b8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d121      	bne.n	80049a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <HAL_RCC_OscConfig+0x2b8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a07      	ldr	r2, [pc, #28]	; (8004984 <HAL_RCC_OscConfig+0x2b8>)
 8004968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800496e:	f7fe fa5d 	bl	8002e2c <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004974:	e011      	b.n	800499a <HAL_RCC_OscConfig+0x2ce>
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800
 800497c:	42470000 	.word	0x42470000
 8004980:	42470e80 	.word	0x42470e80
 8004984:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004988:	f7fe fa50 	bl	8002e2c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e106      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499a:	4b85      	ldr	r3, [pc, #532]	; (8004bb0 <HAL_RCC_OscConfig+0x4e4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d106      	bne.n	80049bc <HAL_RCC_OscConfig+0x2f0>
 80049ae:	4b81      	ldr	r3, [pc, #516]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	4a80      	ldr	r2, [pc, #512]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ba:	e01c      	b.n	80049f6 <HAL_RCC_OscConfig+0x32a>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b05      	cmp	r3, #5
 80049c2:	d10c      	bne.n	80049de <HAL_RCC_OscConfig+0x312>
 80049c4:	4b7b      	ldr	r3, [pc, #492]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	4a7a      	ldr	r2, [pc, #488]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 80049ca:	f043 0304 	orr.w	r3, r3, #4
 80049ce:	6713      	str	r3, [r2, #112]	; 0x70
 80049d0:	4b78      	ldr	r3, [pc, #480]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	4a77      	ldr	r2, [pc, #476]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6713      	str	r3, [r2, #112]	; 0x70
 80049dc:	e00b      	b.n	80049f6 <HAL_RCC_OscConfig+0x32a>
 80049de:	4b75      	ldr	r3, [pc, #468]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e2:	4a74      	ldr	r2, [pc, #464]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ea:	4b72      	ldr	r3, [pc, #456]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	4a71      	ldr	r2, [pc, #452]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 80049f0:	f023 0304 	bic.w	r3, r3, #4
 80049f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d015      	beq.n	8004a2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fe:	f7fe fa15 	bl	8002e2c <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a06:	f7fe fa11 	bl	8002e2c <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e0c5      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1c:	4b65      	ldr	r3, [pc, #404]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ee      	beq.n	8004a06 <HAL_RCC_OscConfig+0x33a>
 8004a28:	e014      	b.n	8004a54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2a:	f7fe f9ff 	bl	8002e2c <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fe f9fb 	bl	8002e2c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e0af      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a48:	4b5a      	ldr	r3, [pc, #360]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1ee      	bne.n	8004a32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d105      	bne.n	8004a66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5a:	4b56      	ldr	r3, [pc, #344]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	4a55      	ldr	r2, [pc, #340]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 8004a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 809b 	beq.w	8004ba6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a70:	4b50      	ldr	r3, [pc, #320]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d05c      	beq.n	8004b36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d141      	bne.n	8004b08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a84:	4b4c      	ldr	r3, [pc, #304]	; (8004bb8 <HAL_RCC_OscConfig+0x4ec>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8a:	f7fe f9cf 	bl	8002e2c <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a92:	f7fe f9cb 	bl	8002e2c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e081      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa4:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	019b      	lsls	r3, r3, #6
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	085b      	lsrs	r3, r3, #1
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	061b      	lsls	r3, r3, #24
 8004ad4:	4937      	ldr	r1, [pc, #220]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ada:	4b37      	ldr	r3, [pc, #220]	; (8004bb8 <HAL_RCC_OscConfig+0x4ec>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fe f9a4 	bl	8002e2c <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fe f9a0 	bl	8002e2c <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e056      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afa:	4b2e      	ldr	r3, [pc, #184]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x41c>
 8004b06:	e04e      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b08:	4b2b      	ldr	r3, [pc, #172]	; (8004bb8 <HAL_RCC_OscConfig+0x4ec>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0e:	f7fe f98d 	bl	8002e2c <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b16:	f7fe f989 	bl	8002e2c <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e03f      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b28:	4b22      	ldr	r3, [pc, #136]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <HAL_RCC_OscConfig+0x44a>
 8004b34:	e037      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e032      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b42:	4b1c      	ldr	r3, [pc, #112]	; (8004bb4 <HAL_RCC_OscConfig+0x4e8>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d028      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d121      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d11a      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b72:	4013      	ands	r3, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d111      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d001      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40007000 	.word	0x40007000
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	42470060 	.word	0x42470060

08004bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0cc      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd0:	4b68      	ldr	r3, [pc, #416]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d90c      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bde:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b63      	ldr	r3, [pc, #396]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0b8      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d020      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c10:	4b59      	ldr	r3, [pc, #356]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4a58      	ldr	r2, [pc, #352]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c28:	4b53      	ldr	r3, [pc, #332]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4a52      	ldr	r2, [pc, #328]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c34:	4b50      	ldr	r3, [pc, #320]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	494d      	ldr	r1, [pc, #308]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d044      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d107      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b47      	ldr	r3, [pc, #284]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d119      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d003      	beq.n	8004c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7a:	4b3f      	ldr	r3, [pc, #252]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e06f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8a:	4b3b      	ldr	r3, [pc, #236]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e067      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c9a:	4b37      	ldr	r3, [pc, #220]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f023 0203 	bic.w	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4934      	ldr	r1, [pc, #208]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cac:	f7fe f8be 	bl	8002e2c <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	e00a      	b.n	8004cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb4:	f7fe f8ba 	bl	8002e2c <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e04f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 020c 	and.w	r2, r3, #12
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d1eb      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d20c      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b22      	ldr	r3, [pc, #136]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e032      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4916      	ldr	r1, [pc, #88]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	490e      	ldr	r1, [pc, #56]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d42:	f000 f821 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d46:	4602      	mov	r2, r0
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	490a      	ldr	r1, [pc, #40]	; (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004d54:	5ccb      	ldrb	r3, [r1, r3]
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d5e:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <HAL_RCC_ClockConfig+0x1c8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe f81e 	bl	8002da4 <HAL_InitTick>

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023c00 	.word	0x40023c00
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	0800b17c 	.word	0x0800b17c
 8004d80:	20000000 	.word	0x20000000
 8004d84:	20000004 	.word	0x20000004

08004d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004da0:	4b67      	ldr	r3, [pc, #412]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 030c 	and.w	r3, r3, #12
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d00d      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	f200 80bd 	bhi.w	8004f2c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x34>
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dba:	e0b7      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b61      	ldr	r3, [pc, #388]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004dbe:	60bb      	str	r3, [r7, #8]
       break;
 8004dc0:	e0b7      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dc2:	4b61      	ldr	r3, [pc, #388]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004dc4:	60bb      	str	r3, [r7, #8]
      break;
 8004dc6:	e0b4      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dc8:	4b5d      	ldr	r3, [pc, #372]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dd0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dd2:	4b5b      	ldr	r3, [pc, #364]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d04d      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dde:	4b58      	ldr	r3, [pc, #352]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	099b      	lsrs	r3, r3, #6
 8004de4:	461a      	mov	r2, r3
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dee:	f04f 0100 	mov.w	r1, #0
 8004df2:	ea02 0800 	and.w	r8, r2, r0
 8004df6:	ea03 0901 	and.w	r9, r3, r1
 8004dfa:	4640      	mov	r0, r8
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	014b      	lsls	r3, r1, #5
 8004e08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e0c:	0142      	lsls	r2, r0, #5
 8004e0e:	4610      	mov	r0, r2
 8004e10:	4619      	mov	r1, r3
 8004e12:	ebb0 0008 	subs.w	r0, r0, r8
 8004e16:	eb61 0109 	sbc.w	r1, r1, r9
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	018b      	lsls	r3, r1, #6
 8004e24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e28:	0182      	lsls	r2, r0, #6
 8004e2a:	1a12      	subs	r2, r2, r0
 8004e2c:	eb63 0301 	sbc.w	r3, r3, r1
 8004e30:	f04f 0000 	mov.w	r0, #0
 8004e34:	f04f 0100 	mov.w	r1, #0
 8004e38:	00d9      	lsls	r1, r3, #3
 8004e3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e3e:	00d0      	lsls	r0, r2, #3
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	eb12 0208 	adds.w	r2, r2, r8
 8004e48:	eb43 0309 	adc.w	r3, r3, r9
 8004e4c:	f04f 0000 	mov.w	r0, #0
 8004e50:	f04f 0100 	mov.w	r1, #0
 8004e54:	0259      	lsls	r1, r3, #9
 8004e56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e5a:	0250      	lsls	r0, r2, #9
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4610      	mov	r0, r2
 8004e62:	4619      	mov	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	f7fb fdee 	bl	8000a4c <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e04a      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7a:	4b31      	ldr	r3, [pc, #196]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	099b      	lsrs	r3, r3, #6
 8004e80:	461a      	mov	r2, r3
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e8a:	f04f 0100 	mov.w	r1, #0
 8004e8e:	ea02 0400 	and.w	r4, r2, r0
 8004e92:	ea03 0501 	and.w	r5, r3, r1
 8004e96:	4620      	mov	r0, r4
 8004e98:	4629      	mov	r1, r5
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	014b      	lsls	r3, r1, #5
 8004ea4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ea8:	0142      	lsls	r2, r0, #5
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	1b00      	subs	r0, r0, r4
 8004eb0:	eb61 0105 	sbc.w	r1, r1, r5
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	018b      	lsls	r3, r1, #6
 8004ebe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ec2:	0182      	lsls	r2, r0, #6
 8004ec4:	1a12      	subs	r2, r2, r0
 8004ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eca:	f04f 0000 	mov.w	r0, #0
 8004ece:	f04f 0100 	mov.w	r1, #0
 8004ed2:	00d9      	lsls	r1, r3, #3
 8004ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ed8:	00d0      	lsls	r0, r2, #3
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	1912      	adds	r2, r2, r4
 8004ee0:	eb45 0303 	adc.w	r3, r5, r3
 8004ee4:	f04f 0000 	mov.w	r0, #0
 8004ee8:	f04f 0100 	mov.w	r1, #0
 8004eec:	0299      	lsls	r1, r3, #10
 8004eee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ef2:	0290      	lsls	r0, r2, #10
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4610      	mov	r0, r2
 8004efa:	4619      	mov	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	f7fb fda2 	bl	8000a4c <__aeabi_uldivmod>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f28:	60bb      	str	r3, [r7, #8]
      break;
 8004f2a:	e002      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f2c:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f2e:	60bb      	str	r3, [r7, #8]
      break;
 8004f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f32:	68bb      	ldr	r3, [r7, #8]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f3e:	bf00      	nop
 8004f40:	40023800 	.word	0x40023800
 8004f44:	00f42400 	.word	0x00f42400
 8004f48:	007a1200 	.word	0x007a1200

08004f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f50:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f52:	681b      	ldr	r3, [r3, #0]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000000 	.word	0x20000000

08004f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f68:	f7ff fff0 	bl	8004f4c <HAL_RCC_GetHCLKFreq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	0a9b      	lsrs	r3, r3, #10
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	4903      	ldr	r1, [pc, #12]	; (8004f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40023800 	.word	0x40023800
 8004f88:	0800b18c 	.word	0x0800b18c

08004f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f90:	f7ff ffdc 	bl	8004f4c <HAL_RCC_GetHCLKFreq>
 8004f94:	4602      	mov	r2, r0
 8004f96:	4b05      	ldr	r3, [pc, #20]	; (8004fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	0b5b      	lsrs	r3, r3, #13
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	4903      	ldr	r1, [pc, #12]	; (8004fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa2:	5ccb      	ldrb	r3, [r1, r3]
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	0800b18c 	.word	0x0800b18c

08004fb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e07b      	b.n	80050be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d108      	bne.n	8004fe0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd6:	d009      	beq.n	8004fec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	61da      	str	r2, [r3, #28]
 8004fde:	e005      	b.n	8004fec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fd f9e4 	bl	80023d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005022:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005070:	ea42 0103 	orr.w	r1, r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	0c1b      	lsrs	r3, r3, #16
 800508a:	f003 0104 	and.w	r1, r3, #4
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f003 0210 	and.w	r2, r3, #16
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69da      	ldr	r2, [r3, #28]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b088      	sub	sp, #32
 80050ca:	af02      	add	r7, sp, #8
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e2:	d112      	bne.n	800510a <HAL_SPI_Receive+0x44>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10e      	bne.n	800510a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2204      	movs	r2, #4
 80050f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80050f4:	88fa      	ldrh	r2, [r7, #6]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	4613      	mov	r3, r2
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f8f1 	bl	80052e8 <HAL_SPI_TransmitReceive>
 8005106:	4603      	mov	r3, r0
 8005108:	e0ea      	b.n	80052e0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_SPI_Receive+0x52>
 8005114:	2302      	movs	r3, #2
 8005116:	e0e3      	b.n	80052e0 <HAL_SPI_Receive+0x21a>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005120:	f7fd fe84 	bl	8002e2c <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	d002      	beq.n	8005138 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005132:	2302      	movs	r3, #2
 8005134:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005136:	e0ca      	b.n	80052ce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_SPI_Receive+0x7e>
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005148:	e0c1      	b.n	80052ce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2204      	movs	r2, #4
 800514e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	88fa      	ldrh	r2, [r7, #6]
 8005168:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005190:	d10f      	bne.n	80051b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	d007      	beq.n	80051d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d162      	bne.n	800529e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051d8:	e02e      	b.n	8005238 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d115      	bne.n	8005214 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f103 020c 	add.w	r2, r3, #12
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	7812      	ldrb	r2, [r2, #0]
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005212:	e011      	b.n	8005238 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005214:	f7fd fe0a 	bl	8002e2c <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d803      	bhi.n	800522c <HAL_SPI_Receive+0x166>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522a:	d102      	bne.n	8005232 <HAL_SPI_Receive+0x16c>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d102      	bne.n	8005238 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005236:	e04a      	b.n	80052ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1cb      	bne.n	80051da <HAL_SPI_Receive+0x114>
 8005242:	e031      	b.n	80052a8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b01      	cmp	r3, #1
 8005250:	d113      	bne.n	800527a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	b292      	uxth	r2, r2
 800525e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	1c9a      	adds	r2, r3, #2
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005278:	e011      	b.n	800529e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800527a:	f7fd fdd7 	bl	8002e2c <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d803      	bhi.n	8005292 <HAL_SPI_Receive+0x1cc>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d102      	bne.n	8005298 <HAL_SPI_Receive+0x1d2>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d102      	bne.n	800529e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800529c:	e017      	b.n	80052ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1cd      	bne.n	8005244 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fa45 	bl	800573c <SPI_EndRxTransaction>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	75fb      	strb	r3, [r7, #23]
 80052ca:	e000      	b.n	80052ce <HAL_SPI_Receive+0x208>
  }

error :
 80052cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08c      	sub	sp, #48	; 0x30
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052f6:	2301      	movs	r3, #1
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_SPI_TransmitReceive+0x26>
 800530a:	2302      	movs	r3, #2
 800530c:	e18a      	b.n	8005624 <HAL_SPI_TransmitReceive+0x33c>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005316:	f7fd fd89 	bl	8002e2c <HAL_GetTick>
 800531a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800532c:	887b      	ldrh	r3, [r7, #2]
 800532e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005330:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005334:	2b01      	cmp	r3, #1
 8005336:	d00f      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x70>
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533e:	d107      	bne.n	8005350 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d103      	bne.n	8005350 <HAL_SPI_TransmitReceive+0x68>
 8005348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800534c:	2b04      	cmp	r3, #4
 800534e:	d003      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005350:	2302      	movs	r3, #2
 8005352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005356:	e15b      	b.n	8005610 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_SPI_TransmitReceive+0x82>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_SPI_TransmitReceive+0x82>
 8005364:	887b      	ldrh	r3, [r7, #2]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d103      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005370:	e14e      	b.n	8005610 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b04      	cmp	r3, #4
 800537c:	d003      	beq.n	8005386 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2205      	movs	r2, #5
 8005382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	887a      	ldrh	r2, [r7, #2]
 8005396:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	887a      	ldrh	r2, [r7, #2]
 800539c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	887a      	ldrh	r2, [r7, #2]
 80053a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	887a      	ldrh	r2, [r7, #2]
 80053ae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d007      	beq.n	80053da <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e2:	d178      	bne.n	80054d6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_SPI_TransmitReceive+0x10a>
 80053ec:	8b7b      	ldrh	r3, [r7, #26]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d166      	bne.n	80054c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005416:	e053      	b.n	80054c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b02      	cmp	r3, #2
 8005424:	d11b      	bne.n	800545e <HAL_SPI_TransmitReceive+0x176>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d016      	beq.n	800545e <HAL_SPI_TransmitReceive+0x176>
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	2b01      	cmp	r3, #1
 8005434:	d113      	bne.n	800545e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	881a      	ldrh	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	1c9a      	adds	r2, r3, #2
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d119      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x1b8>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d014      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	b292      	uxth	r2, r2
 8005482:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	1c9a      	adds	r2, r3, #2
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800549c:	2301      	movs	r3, #1
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054a0:	f7fd fcc4 	bl	8002e2c <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d807      	bhi.n	80054c0 <HAL_SPI_TransmitReceive+0x1d8>
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b6:	d003      	beq.n	80054c0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054be:	e0a7      	b.n	8005610 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1a6      	bne.n	8005418 <HAL_SPI_TransmitReceive+0x130>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1a1      	bne.n	8005418 <HAL_SPI_TransmitReceive+0x130>
 80054d4:	e07c      	b.n	80055d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_SPI_TransmitReceive+0x1fc>
 80054de:	8b7b      	ldrh	r3, [r7, #26]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d16b      	bne.n	80055bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	330c      	adds	r3, #12
 80054ee:	7812      	ldrb	r2, [r2, #0]
 80054f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005500:	b29b      	uxth	r3, r3
 8005502:	3b01      	subs	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800550a:	e057      	b.n	80055bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b02      	cmp	r3, #2
 8005518:	d11c      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x26c>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d017      	beq.n	8005554 <HAL_SPI_TransmitReceive+0x26c>
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	2b01      	cmp	r3, #1
 8005528:	d114      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	7812      	ldrb	r2, [r2, #0]
 8005536:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b01      	cmp	r3, #1
 8005560:	d119      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x2ae>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d014      	beq.n	8005596 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005592:	2301      	movs	r3, #1
 8005594:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005596:	f7fd fc49 	bl	8002e2c <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d803      	bhi.n	80055ae <HAL_SPI_TransmitReceive+0x2c6>
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d102      	bne.n	80055b4 <HAL_SPI_TransmitReceive+0x2cc>
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d103      	bne.n	80055bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055ba:	e029      	b.n	8005610 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1a2      	bne.n	800550c <HAL_SPI_TransmitReceive+0x224>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d19d      	bne.n	800550c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f917 	bl	8005808 <SPI_EndRxTxTransaction>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d006      	beq.n	80055ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80055ec:	e010      	b.n	8005610 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	e000      	b.n	8005610 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800560e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005620:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005624:	4618      	mov	r0, r3
 8005626:	3730      	adds	r7, #48	; 0x30
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800563c:	f7fd fbf6 	bl	8002e2c <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	4413      	add	r3, r2
 800564a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800564c:	f7fd fbee 	bl	8002e2c <HAL_GetTick>
 8005650:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005652:	4b39      	ldr	r3, [pc, #228]	; (8005738 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	015b      	lsls	r3, r3, #5
 8005658:	0d1b      	lsrs	r3, r3, #20
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	fb02 f303 	mul.w	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005662:	e054      	b.n	800570e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d050      	beq.n	800570e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800566c:	f7fd fbde 	bl	8002e2c <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	429a      	cmp	r2, r3
 800567a:	d902      	bls.n	8005682 <SPI_WaitFlagStateUntilTimeout+0x56>
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d13d      	bne.n	80056fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005690:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800569a:	d111      	bne.n	80056c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a4:	d004      	beq.n	80056b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ae:	d107      	bne.n	80056c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c8:	d10f      	bne.n	80056ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e017      	b.n	800572e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	3b01      	subs	r3, #1
 800570c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4013      	ands	r3, r2
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	429a      	cmp	r2, r3
 800571c:	bf0c      	ite	eq
 800571e:	2301      	moveq	r3, #1
 8005720:	2300      	movne	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	429a      	cmp	r2, r3
 800572a:	d19b      	bne.n	8005664 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3720      	adds	r7, #32
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000000 	.word	0x20000000

0800573c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af02      	add	r7, sp, #8
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005750:	d111      	bne.n	8005776 <SPI_EndRxTransaction+0x3a>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575a:	d004      	beq.n	8005766 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005764:	d107      	bne.n	8005776 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005774:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800577e:	d12a      	bne.n	80057d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005788:	d012      	beq.n	80057b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2200      	movs	r2, #0
 8005792:	2180      	movs	r1, #128	; 0x80
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff ff49 	bl	800562c <SPI_WaitFlagStateUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02d      	beq.n	80057fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a4:	f043 0220 	orr.w	r2, r3, #32
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e026      	b.n	80057fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2200      	movs	r2, #0
 80057b8:	2101      	movs	r1, #1
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff ff36 	bl	800562c <SPI_WaitFlagStateUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01a      	beq.n	80057fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	f043 0220 	orr.w	r2, r3, #32
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e013      	b.n	80057fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2200      	movs	r2, #0
 80057de:	2101      	movs	r1, #1
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f7ff ff23 	bl	800562c <SPI_WaitFlagStateUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f0:	f043 0220 	orr.w	r2, r3, #32
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e000      	b.n	80057fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005814:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <SPI_EndRxTxTransaction+0x7c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1b      	ldr	r2, [pc, #108]	; (8005888 <SPI_EndRxTxTransaction+0x80>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	0d5b      	lsrs	r3, r3, #21
 8005820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005824:	fb02 f303 	mul.w	r3, r2, r3
 8005828:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005832:	d112      	bne.n	800585a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2200      	movs	r2, #0
 800583c:	2180      	movs	r1, #128	; 0x80
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff fef4 	bl	800562c <SPI_WaitFlagStateUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584e:	f043 0220 	orr.w	r2, r3, #32
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e00f      	b.n	800587a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	3b01      	subs	r3, #1
 8005864:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005870:	2b80      	cmp	r3, #128	; 0x80
 8005872:	d0f2      	beq.n	800585a <SPI_EndRxTxTransaction+0x52>
 8005874:	e000      	b.n	8005878 <SPI_EndRxTxTransaction+0x70>
        break;
 8005876:	bf00      	nop
  }

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000000 	.word	0x20000000
 8005888:	165e9f81 	.word	0x165e9f81

0800588c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e034      	b.n	800590c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7fb fde8 	bl	800148c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3308      	adds	r3, #8
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f001 ff3a 	bl	8007740 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	461a      	mov	r2, r3
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	f001 ff84 	bl	80077e4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6858      	ldr	r0, [r3, #4]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	f001 ffb9 	bl	8007860 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	6892      	ldr	r2, [r2, #8]
 80058f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	6892      	ldr	r2, [r2, #8]
 8005902:	f041 0101 	orr.w	r1, r1, #1
 8005906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e041      	b.n	80059aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fc ffde 	bl	80028fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f000 fbb2 	bl	80060bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d001      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e04e      	b.n	8005a6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a23      	ldr	r2, [pc, #140]	; (8005a78 <HAL_TIM_Base_Start_IT+0xc4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d022      	beq.n	8005a34 <HAL_TIM_Base_Start_IT+0x80>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f6:	d01d      	beq.n	8005a34 <HAL_TIM_Base_Start_IT+0x80>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1f      	ldr	r2, [pc, #124]	; (8005a7c <HAL_TIM_Base_Start_IT+0xc8>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d018      	beq.n	8005a34 <HAL_TIM_Base_Start_IT+0x80>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a1e      	ldr	r2, [pc, #120]	; (8005a80 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d013      	beq.n	8005a34 <HAL_TIM_Base_Start_IT+0x80>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1c      	ldr	r2, [pc, #112]	; (8005a84 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00e      	beq.n	8005a34 <HAL_TIM_Base_Start_IT+0x80>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1b      	ldr	r2, [pc, #108]	; (8005a88 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d009      	beq.n	8005a34 <HAL_TIM_Base_Start_IT+0x80>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a19      	ldr	r2, [pc, #100]	; (8005a8c <HAL_TIM_Base_Start_IT+0xd8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <HAL_TIM_Base_Start_IT+0x80>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a18      	ldr	r2, [pc, #96]	; (8005a90 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d111      	bne.n	8005a58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b06      	cmp	r3, #6
 8005a44:	d010      	beq.n	8005a68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0201 	orr.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a56:	e007      	b.n	8005a68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800
 8005a84:	40000c00 	.word	0x40000c00
 8005a88:	40010400 	.word	0x40010400
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40001800 	.word	0x40001800

08005a94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e041      	b.n	8005b2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f839 	bl	8005b32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f000 faf2 	bl	80060bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b082      	sub	sp, #8
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d122      	bne.n	8005ba2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d11b      	bne.n	8005ba2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f06f 0202 	mvn.w	r2, #2
 8005b72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fa78 	bl	800607e <HAL_TIM_IC_CaptureCallback>
 8005b8e:	e005      	b.n	8005b9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fa6a 	bl	800606a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa7b 	bl	8006092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d122      	bne.n	8005bf6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d11b      	bne.n	8005bf6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f06f 0204 	mvn.w	r2, #4
 8005bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fa4e 	bl	800607e <HAL_TIM_IC_CaptureCallback>
 8005be2:	e005      	b.n	8005bf0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fa40 	bl	800606a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa51 	bl	8006092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d122      	bne.n	8005c4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d11b      	bne.n	8005c4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f06f 0208 	mvn.w	r2, #8
 8005c1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2204      	movs	r2, #4
 8005c20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fa24 	bl	800607e <HAL_TIM_IC_CaptureCallback>
 8005c36:	e005      	b.n	8005c44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fa16 	bl	800606a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fa27 	bl	8006092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b10      	cmp	r3, #16
 8005c56:	d122      	bne.n	8005c9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0310 	and.w	r3, r3, #16
 8005c62:	2b10      	cmp	r3, #16
 8005c64:	d11b      	bne.n	8005c9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f06f 0210 	mvn.w	r2, #16
 8005c6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2208      	movs	r2, #8
 8005c74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f9fa 	bl	800607e <HAL_TIM_IC_CaptureCallback>
 8005c8a:	e005      	b.n	8005c98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f9ec 	bl	800606a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f9fd 	bl	8006092 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d10e      	bne.n	8005cca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d107      	bne.n	8005cca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f06f 0201 	mvn.w	r2, #1
 8005cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7fc fad1 	bl	800226c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd4:	2b80      	cmp	r3, #128	; 0x80
 8005cd6:	d10e      	bne.n	8005cf6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce2:	2b80      	cmp	r3, #128	; 0x80
 8005ce4:	d107      	bne.n	8005cf6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fd53 	bl	800679c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d10e      	bne.n	8005d22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0e:	2b40      	cmp	r3, #64	; 0x40
 8005d10:	d107      	bne.n	8005d22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f9c2 	bl	80060a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d10e      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d107      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f06f 0220 	mvn.w	r2, #32
 8005d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fd1d 	bl	8006788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d4e:	bf00      	nop
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e0ae      	b.n	8005ed4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b0c      	cmp	r3, #12
 8005d82:	f200 809f 	bhi.w	8005ec4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d86:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005dc1 	.word	0x08005dc1
 8005d90:	08005ec5 	.word	0x08005ec5
 8005d94:	08005ec5 	.word	0x08005ec5
 8005d98:	08005ec5 	.word	0x08005ec5
 8005d9c:	08005e01 	.word	0x08005e01
 8005da0:	08005ec5 	.word	0x08005ec5
 8005da4:	08005ec5 	.word	0x08005ec5
 8005da8:	08005ec5 	.word	0x08005ec5
 8005dac:	08005e43 	.word	0x08005e43
 8005db0:	08005ec5 	.word	0x08005ec5
 8005db4:	08005ec5 	.word	0x08005ec5
 8005db8:	08005ec5 	.word	0x08005ec5
 8005dbc:	08005e83 	.word	0x08005e83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fa18 	bl	80061fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0208 	orr.w	r2, r2, #8
 8005dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0204 	bic.w	r2, r2, #4
 8005dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6999      	ldr	r1, [r3, #24]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	619a      	str	r2, [r3, #24]
      break;
 8005dfe:	e064      	b.n	8005eca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fa68 	bl	80062dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6999      	ldr	r1, [r3, #24]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	021a      	lsls	r2, r3, #8
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	619a      	str	r2, [r3, #24]
      break;
 8005e40:	e043      	b.n	8005eca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fabd 	bl	80063c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69da      	ldr	r2, [r3, #28]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0208 	orr.w	r2, r2, #8
 8005e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0204 	bic.w	r2, r2, #4
 8005e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69d9      	ldr	r1, [r3, #28]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	61da      	str	r2, [r3, #28]
      break;
 8005e80:	e023      	b.n	8005eca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fb11 	bl	80064b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69d9      	ldr	r1, [r3, #28]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	021a      	lsls	r2, r3, #8
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	61da      	str	r2, [r3, #28]
      break;
 8005ec2:	e002      	b.n	8005eca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e0b4      	b.n	8006062 <HAL_TIM_ConfigClockSource+0x186>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f30:	d03e      	beq.n	8005fb0 <HAL_TIM_ConfigClockSource+0xd4>
 8005f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f36:	f200 8087 	bhi.w	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3e:	f000 8086 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x172>
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f46:	d87f      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f48:	2b70      	cmp	r3, #112	; 0x70
 8005f4a:	d01a      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0xa6>
 8005f4c:	2b70      	cmp	r3, #112	; 0x70
 8005f4e:	d87b      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f50:	2b60      	cmp	r3, #96	; 0x60
 8005f52:	d050      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8005f54:	2b60      	cmp	r3, #96	; 0x60
 8005f56:	d877      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f58:	2b50      	cmp	r3, #80	; 0x50
 8005f5a:	d03c      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0xfa>
 8005f5c:	2b50      	cmp	r3, #80	; 0x50
 8005f5e:	d873      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f60:	2b40      	cmp	r3, #64	; 0x40
 8005f62:	d058      	beq.n	8006016 <HAL_TIM_ConfigClockSource+0x13a>
 8005f64:	2b40      	cmp	r3, #64	; 0x40
 8005f66:	d86f      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f68:	2b30      	cmp	r3, #48	; 0x30
 8005f6a:	d064      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f6c:	2b30      	cmp	r3, #48	; 0x30
 8005f6e:	d86b      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d060      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d867      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d05c      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d05a      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f80:	e062      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6899      	ldr	r1, [r3, #8]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f000 fb5d 	bl	8006650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	609a      	str	r2, [r3, #8]
      break;
 8005fae:	e04f      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6899      	ldr	r1, [r3, #8]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f000 fb46 	bl	8006650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fd2:	609a      	str	r2, [r3, #8]
      break;
 8005fd4:	e03c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6859      	ldr	r1, [r3, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f000 faba 	bl	800655c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2150      	movs	r1, #80	; 0x50
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fb13 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 8005ff4:	e02c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6818      	ldr	r0, [r3, #0]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	6859      	ldr	r1, [r3, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	461a      	mov	r2, r3
 8006004:	f000 fad9 	bl	80065ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2160      	movs	r1, #96	; 0x60
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fb03 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 8006014:	e01c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6859      	ldr	r1, [r3, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	461a      	mov	r2, r3
 8006024:	f000 fa9a 	bl	800655c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2140      	movs	r1, #64	; 0x40
 800602e:	4618      	mov	r0, r3
 8006030:	f000 faf3 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 8006034:	e00c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f000 faea 	bl	800661a <TIM_ITRx_SetConfig>
      break;
 8006046:	e003      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
      break;
 800604c:	e000      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800604e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a40      	ldr	r2, [pc, #256]	; (80061d0 <TIM_Base_SetConfig+0x114>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d013      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060da:	d00f      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a3d      	ldr	r2, [pc, #244]	; (80061d4 <TIM_Base_SetConfig+0x118>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00b      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a3c      	ldr	r2, [pc, #240]	; (80061d8 <TIM_Base_SetConfig+0x11c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d007      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a3b      	ldr	r2, [pc, #236]	; (80061dc <TIM_Base_SetConfig+0x120>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a3a      	ldr	r2, [pc, #232]	; (80061e0 <TIM_Base_SetConfig+0x124>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d108      	bne.n	800610e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a2f      	ldr	r2, [pc, #188]	; (80061d0 <TIM_Base_SetConfig+0x114>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d02b      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611c:	d027      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a2c      	ldr	r2, [pc, #176]	; (80061d4 <TIM_Base_SetConfig+0x118>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d023      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a2b      	ldr	r2, [pc, #172]	; (80061d8 <TIM_Base_SetConfig+0x11c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d01f      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a2a      	ldr	r2, [pc, #168]	; (80061dc <TIM_Base_SetConfig+0x120>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d01b      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a29      	ldr	r2, [pc, #164]	; (80061e0 <TIM_Base_SetConfig+0x124>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d017      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a28      	ldr	r2, [pc, #160]	; (80061e4 <TIM_Base_SetConfig+0x128>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d013      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a27      	ldr	r2, [pc, #156]	; (80061e8 <TIM_Base_SetConfig+0x12c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00f      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a26      	ldr	r2, [pc, #152]	; (80061ec <TIM_Base_SetConfig+0x130>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00b      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a25      	ldr	r2, [pc, #148]	; (80061f0 <TIM_Base_SetConfig+0x134>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d007      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a24      	ldr	r2, [pc, #144]	; (80061f4 <TIM_Base_SetConfig+0x138>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d003      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a23      	ldr	r2, [pc, #140]	; (80061f8 <TIM_Base_SetConfig+0x13c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d108      	bne.n	8006180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a0a      	ldr	r2, [pc, #40]	; (80061d0 <TIM_Base_SetConfig+0x114>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d003      	beq.n	80061b4 <TIM_Base_SetConfig+0xf8>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a0c      	ldr	r2, [pc, #48]	; (80061e0 <TIM_Base_SetConfig+0x124>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d103      	bne.n	80061bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	615a      	str	r2, [r3, #20]
}
 80061c2:	bf00      	nop
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40000800 	.word	0x40000800
 80061dc:	40000c00 	.word	0x40000c00
 80061e0:	40010400 	.word	0x40010400
 80061e4:	40014000 	.word	0x40014000
 80061e8:	40014400 	.word	0x40014400
 80061ec:	40014800 	.word	0x40014800
 80061f0:	40001800 	.word	0x40001800
 80061f4:	40001c00 	.word	0x40001c00
 80061f8:	40002000 	.word	0x40002000

080061fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f023 0201 	bic.w	r2, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0303 	bic.w	r3, r3, #3
 8006232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f023 0302 	bic.w	r3, r3, #2
 8006244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a20      	ldr	r2, [pc, #128]	; (80062d4 <TIM_OC1_SetConfig+0xd8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_OC1_SetConfig+0x64>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a1f      	ldr	r2, [pc, #124]	; (80062d8 <TIM_OC1_SetConfig+0xdc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d10c      	bne.n	800627a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f023 0308 	bic.w	r3, r3, #8
 8006266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f023 0304 	bic.w	r3, r3, #4
 8006278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <TIM_OC1_SetConfig+0xd8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d003      	beq.n	800628a <TIM_OC1_SetConfig+0x8e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a14      	ldr	r2, [pc, #80]	; (80062d8 <TIM_OC1_SetConfig+0xdc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d111      	bne.n	80062ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	621a      	str	r2, [r3, #32]
}
 80062c8:	bf00      	nop
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40010400 	.word	0x40010400

080062dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f023 0210 	bic.w	r2, r3, #16
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f023 0320 	bic.w	r3, r3, #32
 8006326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	011b      	lsls	r3, r3, #4
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <TIM_OC2_SetConfig+0xe4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d003      	beq.n	8006344 <TIM_OC2_SetConfig+0x68>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <TIM_OC2_SetConfig+0xe8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d10d      	bne.n	8006360 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800634a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800635e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a17      	ldr	r2, [pc, #92]	; (80063c0 <TIM_OC2_SetConfig+0xe4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_OC2_SetConfig+0x94>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a16      	ldr	r2, [pc, #88]	; (80063c4 <TIM_OC2_SetConfig+0xe8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d113      	bne.n	8006398 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006376:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800637e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	621a      	str	r2, [r3, #32]
}
 80063b2:	bf00      	nop
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40010400 	.word	0x40010400

080063c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0303 	bic.w	r3, r3, #3
 80063fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	021b      	lsls	r3, r3, #8
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a21      	ldr	r2, [pc, #132]	; (80064a8 <TIM_OC3_SetConfig+0xe0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d003      	beq.n	800642e <TIM_OC3_SetConfig+0x66>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a20      	ldr	r2, [pc, #128]	; (80064ac <TIM_OC3_SetConfig+0xe4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d10d      	bne.n	800644a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	021b      	lsls	r3, r3, #8
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a16      	ldr	r2, [pc, #88]	; (80064a8 <TIM_OC3_SetConfig+0xe0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d003      	beq.n	800645a <TIM_OC3_SetConfig+0x92>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a15      	ldr	r2, [pc, #84]	; (80064ac <TIM_OC3_SetConfig+0xe4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d113      	bne.n	8006482 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	621a      	str	r2, [r3, #32]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	40010000 	.word	0x40010000
 80064ac:	40010400 	.word	0x40010400

080064b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	031b      	lsls	r3, r3, #12
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a12      	ldr	r2, [pc, #72]	; (8006554 <TIM_OC4_SetConfig+0xa4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_OC4_SetConfig+0x68>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a11      	ldr	r2, [pc, #68]	; (8006558 <TIM_OC4_SetConfig+0xa8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d109      	bne.n	800652c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800651e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	019b      	lsls	r3, r3, #6
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40010000 	.word	0x40010000
 8006558:	40010400 	.word	0x40010400

0800655c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f023 0201 	bic.w	r2, r3, #1
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f023 030a 	bic.w	r3, r3, #10
 8006598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b087      	sub	sp, #28
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f023 0210 	bic.w	r2, r3, #16
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	031b      	lsls	r3, r3, #12
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	f043 0307 	orr.w	r3, r3, #7
 800663c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	609a      	str	r2, [r3, #8]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800666a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	021a      	lsls	r2, r3, #8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	431a      	orrs	r2, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4313      	orrs	r3, r2
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	609a      	str	r2, [r3, #8]
}
 8006684:	bf00      	nop
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e05a      	b.n	800675e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a21      	ldr	r2, [pc, #132]	; (800676c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d022      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f4:	d01d      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1d      	ldr	r2, [pc, #116]	; (8006770 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d018      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1b      	ldr	r2, [pc, #108]	; (8006774 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1a      	ldr	r2, [pc, #104]	; (8006778 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00e      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a18      	ldr	r2, [pc, #96]	; (800677c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d009      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a17      	ldr	r2, [pc, #92]	; (8006780 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a15      	ldr	r2, [pc, #84]	; (8006784 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d10c      	bne.n	800674c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	4313      	orrs	r3, r2
 8006742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40010000 	.word	0x40010000
 8006770:	40000400 	.word	0x40000400
 8006774:	40000800 	.word	0x40000800
 8006778:	40000c00 	.word	0x40000c00
 800677c:	40010400 	.word	0x40010400
 8006780:	40014000 	.word	0x40014000
 8006784:	40001800 	.word	0x40001800

08006788 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e03f      	b.n	8006842 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fc fa0c 	bl	8002bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2224      	movs	r2, #36	; 0x24
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68da      	ldr	r2, [r3, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fddb 	bl	80073b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2220      	movs	r2, #32
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b08a      	sub	sp, #40	; 0x28
 800684e:	af02      	add	r7, sp, #8
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	603b      	str	r3, [r7, #0]
 8006856:	4613      	mov	r3, r2
 8006858:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b20      	cmp	r3, #32
 8006868:	d17c      	bne.n	8006964 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <HAL_UART_Transmit+0x2c>
 8006870:	88fb      	ldrh	r3, [r7, #6]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e075      	b.n	8006966 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_UART_Transmit+0x3e>
 8006884:	2302      	movs	r3, #2
 8006886:	e06e      	b.n	8006966 <HAL_UART_Transmit+0x11c>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2221      	movs	r2, #33	; 0x21
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800689e:	f7fc fac5 	bl	8002e2c <HAL_GetTick>
 80068a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	88fa      	ldrh	r2, [r7, #6]
 80068a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	88fa      	ldrh	r2, [r7, #6]
 80068ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b8:	d108      	bne.n	80068cc <HAL_UART_Transmit+0x82>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d104      	bne.n	80068cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	e003      	b.n	80068d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068d0:	2300      	movs	r3, #0
 80068d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80068dc:	e02a      	b.n	8006934 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2200      	movs	r2, #0
 80068e6:	2180      	movs	r1, #128	; 0x80
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fb1f 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e036      	b.n	8006966 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10b      	bne.n	8006916 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800690c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	3302      	adds	r3, #2
 8006912:	61bb      	str	r3, [r7, #24]
 8006914:	e007      	b.n	8006926 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	781a      	ldrb	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	3301      	adds	r3, #1
 8006924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1cf      	bne.n	80068de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2200      	movs	r2, #0
 8006946:	2140      	movs	r1, #64	; 0x40
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 faef 	bl	8006f2c <UART_WaitOnFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e006      	b.n	8006966 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	e000      	b.n	8006966 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006964:	2302      	movs	r3, #2
  }
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	4613      	mov	r3, r2
 800697a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b20      	cmp	r3, #32
 8006986:	d11d      	bne.n	80069c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <HAL_UART_Receive_IT+0x26>
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e016      	b.n	80069c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d101      	bne.n	80069a6 <HAL_UART_Receive_IT+0x38>
 80069a2:	2302      	movs	r3, #2
 80069a4:	e00f      	b.n	80069c6 <HAL_UART_Receive_IT+0x58>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069b4:	88fb      	ldrh	r3, [r7, #6]
 80069b6:	461a      	mov	r2, r3
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 fb24 	bl	8007008 <UART_Start_Receive_IT>
 80069c0:	4603      	mov	r3, r0
 80069c2:	e000      	b.n	80069c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80069c4:	2302      	movs	r3, #2
  }
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b0ba      	sub	sp, #232	; 0xe8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10f      	bne.n	8006a36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d009      	beq.n	8006a36 <HAL_UART_IRQHandler+0x66>
 8006a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fc03 	bl	800723a <UART_Receive_IT>
      return;
 8006a34:	e256      	b.n	8006ee4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80de 	beq.w	8006bfc <HAL_UART_IRQHandler+0x22c>
 8006a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80d1 	beq.w	8006bfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00b      	beq.n	8006a7e <HAL_UART_IRQHandler+0xae>
 8006a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d005      	beq.n	8006a7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	f043 0201 	orr.w	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00b      	beq.n	8006aa2 <HAL_UART_IRQHandler+0xd2>
 8006a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d005      	beq.n	8006aa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	f043 0202 	orr.w	r2, r3, #2
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00b      	beq.n	8006ac6 <HAL_UART_IRQHandler+0xf6>
 8006aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	f043 0204 	orr.w	r2, r3, #4
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d011      	beq.n	8006af6 <HAL_UART_IRQHandler+0x126>
 8006ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d105      	bne.n	8006aea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	f043 0208 	orr.w	r2, r3, #8
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 81ed 	beq.w	8006eda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <HAL_UART_IRQHandler+0x14e>
 8006b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fb8e 	bl	800723a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	bf0c      	ite	eq
 8006b2c:	2301      	moveq	r3, #1
 8006b2e:	2300      	movne	r3, #0
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f003 0308 	and.w	r3, r3, #8
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d103      	bne.n	8006b4a <HAL_UART_IRQHandler+0x17a>
 8006b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d04f      	beq.n	8006bea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa96 	bl	800707c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5a:	2b40      	cmp	r3, #64	; 0x40
 8006b5c:	d141      	bne.n	8006be2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3314      	adds	r3, #20
 8006b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3314      	adds	r3, #20
 8006b86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1d9      	bne.n	8006b5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d013      	beq.n	8006bda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	4a7d      	ldr	r2, [pc, #500]	; (8006dac <HAL_UART_IRQHandler+0x3dc>)
 8006bb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fc fffe 	bl	8003bc0 <HAL_DMA_Abort_IT>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd8:	e00e      	b.n	8006bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f990 	bl	8006f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be0:	e00a      	b.n	8006bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f98c 	bl	8006f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be8:	e006      	b.n	8006bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f988 	bl	8006f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006bf6:	e170      	b.n	8006eda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf8:	bf00      	nop
    return;
 8006bfa:	e16e      	b.n	8006eda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	f040 814a 	bne.w	8006e9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0a:	f003 0310 	and.w	r3, r3, #16
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8143 	beq.w	8006e9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c18:	f003 0310 	and.w	r3, r3, #16
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 813c 	beq.w	8006e9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c22:	2300      	movs	r3, #0
 8006c24:	60bb      	str	r3, [r7, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	60bb      	str	r3, [r7, #8]
 8006c36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c42:	2b40      	cmp	r3, #64	; 0x40
 8006c44:	f040 80b4 	bne.w	8006db0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8140 	beq.w	8006ede <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c66:	429a      	cmp	r2, r3
 8006c68:	f080 8139 	bcs.w	8006ede <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7e:	f000 8088 	beq.w	8006d92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	330c      	adds	r3, #12
 8006c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006cae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1d9      	bne.n	8006c82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3314      	adds	r3, #20
 8006cd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ce0:	f023 0301 	bic.w	r3, r3, #1
 8006ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3314      	adds	r3, #20
 8006cee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e1      	bne.n	8006cce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3314      	adds	r3, #20
 8006d10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3314      	adds	r3, #20
 8006d2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e3      	bne.n	8006d0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	330c      	adds	r3, #12
 8006d56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d5a:	e853 3f00 	ldrex	r3, [r3]
 8006d5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d62:	f023 0310 	bic.w	r3, r3, #16
 8006d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	330c      	adds	r3, #12
 8006d70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d74:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e3      	bne.n	8006d50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fc fea7 	bl	8003ae0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f8b6 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006da8:	e099      	b.n	8006ede <HAL_UART_IRQHandler+0x50e>
 8006daa:	bf00      	nop
 8006dac:	08007143 	.word	0x08007143
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 808b 	beq.w	8006ee2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8086 	beq.w	8006ee2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	330c      	adds	r3, #12
 8006ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	330c      	adds	r3, #12
 8006df6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006dfa:	647a      	str	r2, [r7, #68]	; 0x44
 8006dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e3      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3314      	adds	r3, #20
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	f023 0301 	bic.w	r3, r3, #1
 8006e24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3314      	adds	r3, #20
 8006e2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e32:	633a      	str	r2, [r7, #48]	; 0x30
 8006e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e3      	bne.n	8006e0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0310 	bic.w	r3, r3, #16
 8006e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	330c      	adds	r3, #12
 8006e74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e78:	61fa      	str	r2, [r7, #28]
 8006e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	69b9      	ldr	r1, [r7, #24]
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	e841 2300 	strex	r3, r2, [r1]
 8006e84:	617b      	str	r3, [r7, #20]
   return(result);
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e3      	bne.n	8006e54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f83e 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e98:	e023      	b.n	8006ee2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <HAL_UART_IRQHandler+0x4ea>
 8006ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f959 	bl	800716a <UART_Transmit_IT>
    return;
 8006eb8:	e014      	b.n	8006ee4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00e      	beq.n	8006ee4 <HAL_UART_IRQHandler+0x514>
 8006ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d008      	beq.n	8006ee4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f999 	bl	800720a <UART_EndTransmit_IT>
    return;
 8006ed8:	e004      	b.n	8006ee4 <HAL_UART_IRQHandler+0x514>
    return;
 8006eda:	bf00      	nop
 8006edc:	e002      	b.n	8006ee4 <HAL_UART_IRQHandler+0x514>
      return;
 8006ede:	bf00      	nop
 8006ee0:	e000      	b.n	8006ee4 <HAL_UART_IRQHandler+0x514>
      return;
 8006ee2:	bf00      	nop
  }
}
 8006ee4:	37e8      	adds	r7, #232	; 0xe8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop

08006eec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b090      	sub	sp, #64	; 0x40
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f3c:	e050      	b.n	8006fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f44:	d04c      	beq.n	8006fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f4c:	f7fb ff6e 	bl	8002e2c <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d241      	bcs.n	8006fe0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	330c      	adds	r3, #12
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	e853 3f00 	ldrex	r3, [r3]
 8006f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f7c:	637a      	str	r2, [r7, #52]	; 0x34
 8006f7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e5      	bne.n	8006f5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3314      	adds	r3, #20
 8006f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f023 0301 	bic.w	r3, r3, #1
 8006fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3314      	adds	r3, #20
 8006fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fb0:	623a      	str	r2, [r7, #32]
 8006fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	69f9      	ldr	r1, [r7, #28]
 8006fb6:	6a3a      	ldr	r2, [r7, #32]
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e5      	bne.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e00f      	b.n	8007000 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	bf0c      	ite	eq
 8006ff0:	2301      	moveq	r3, #1
 8006ff2:	2300      	movne	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d09f      	beq.n	8006f3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3740      	adds	r7, #64	; 0x40
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	4613      	mov	r3, r2
 8007014:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	88fa      	ldrh	r2, [r7, #6]
 8007020:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	88fa      	ldrh	r2, [r7, #6]
 8007026:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2222      	movs	r2, #34	; 0x22
 8007032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800704c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	695a      	ldr	r2, [r3, #20]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0201 	orr.w	r2, r2, #1
 800705c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f042 0220 	orr.w	r2, r2, #32
 800706c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800707c:	b480      	push	{r7}
 800707e:	b095      	sub	sp, #84	; 0x54
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	330c      	adds	r3, #12
 800708a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800709a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070a4:	643a      	str	r2, [r7, #64]	; 0x40
 80070a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e5      	bne.n	8007084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3314      	adds	r3, #20
 80070be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f023 0301 	bic.w	r3, r3, #1
 80070ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3314      	adds	r3, #20
 80070d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e5      	bne.n	80070b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d119      	bne.n	8007128 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	330c      	adds	r3, #12
 80070fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	60bb      	str	r3, [r7, #8]
   return(result);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f023 0310 	bic.w	r3, r3, #16
 800710a:	647b      	str	r3, [r7, #68]	; 0x44
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	330c      	adds	r3, #12
 8007112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007114:	61ba      	str	r2, [r7, #24]
 8007116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	6979      	ldr	r1, [r7, #20]
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	613b      	str	r3, [r7, #16]
   return(result);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e5      	bne.n	80070f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007136:	bf00      	nop
 8007138:	3754      	adds	r7, #84	; 0x54
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff fecf 	bl	8006f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007162:	bf00      	nop
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800716a:	b480      	push	{r7}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b21      	cmp	r3, #33	; 0x21
 800717c:	d13e      	bne.n	80071fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007186:	d114      	bne.n	80071b2 <UART_Transmit_IT+0x48>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d110      	bne.n	80071b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	1c9a      	adds	r2, r3, #2
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	621a      	str	r2, [r3, #32]
 80071b0:	e008      	b.n	80071c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	1c59      	adds	r1, r3, #1
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6211      	str	r1, [r2, #32]
 80071bc:	781a      	ldrb	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	3b01      	subs	r3, #1
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	4619      	mov	r1, r3
 80071d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10f      	bne.n	80071f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	e000      	b.n	80071fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071fc:	2302      	movs	r3, #2
  }
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b082      	sub	sp, #8
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007220:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff fe5e 	bl	8006eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b08c      	sub	sp, #48	; 0x30
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b22      	cmp	r3, #34	; 0x22
 800724c:	f040 80ab 	bne.w	80073a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007258:	d117      	bne.n	800728a <UART_Receive_IT+0x50>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d113      	bne.n	800728a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	b29b      	uxth	r3, r3
 8007274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007278:	b29a      	uxth	r2, r3
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	1c9a      	adds	r2, r3, #2
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	629a      	str	r2, [r3, #40]	; 0x28
 8007288:	e026      	b.n	80072d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007290:	2300      	movs	r3, #0
 8007292:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800729c:	d007      	beq.n	80072ae <UART_Receive_IT+0x74>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <UART_Receive_IT+0x82>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d106      	bne.n	80072bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	e008      	b.n	80072ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	4619      	mov	r1, r3
 80072e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d15a      	bne.n	80073a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0220 	bic.w	r2, r2, #32
 80072fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800730a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695a      	ldr	r2, [r3, #20]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0201 	bic.w	r2, r2, #1
 800731a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2220      	movs	r2, #32
 8007320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007328:	2b01      	cmp	r3, #1
 800732a:	d135      	bne.n	8007398 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	330c      	adds	r3, #12
 8007338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	613b      	str	r3, [r7, #16]
   return(result);
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f023 0310 	bic.w	r3, r3, #16
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	330c      	adds	r3, #12
 8007350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007352:	623a      	str	r2, [r7, #32]
 8007354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	69f9      	ldr	r1, [r7, #28]
 8007358:	6a3a      	ldr	r2, [r7, #32]
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e5      	bne.n	8007332 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0310 	and.w	r3, r3, #16
 8007370:	2b10      	cmp	r3, #16
 8007372:	d10a      	bne.n	800738a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7ff fdbf 	bl	8006f14 <HAL_UARTEx_RxEventCallback>
 8007396:	e002      	b.n	800739e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7fb fb7d 	bl	8002a98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	e002      	b.n	80073a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	e000      	b.n	80073a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80073a6:	2302      	movs	r3, #2
  }
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3730      	adds	r7, #48	; 0x30
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	b09f      	sub	sp, #124	; 0x7c
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80073c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c6:	68d9      	ldr	r1, [r3, #12]
 80073c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	ea40 0301 	orr.w	r3, r0, r1
 80073d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d4:	689a      	ldr	r2, [r3, #8]
 80073d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	431a      	orrs	r2, r3
 80073dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	431a      	orrs	r2, r3
 80073e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80073ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80073f4:	f021 010c 	bic.w	r1, r1, #12
 80073f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073fe:	430b      	orrs	r3, r1
 8007400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800740c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800740e:	6999      	ldr	r1, [r3, #24]
 8007410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	ea40 0301 	orr.w	r3, r0, r1
 8007418:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800741a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	4bc5      	ldr	r3, [pc, #788]	; (8007734 <UART_SetConfig+0x384>)
 8007420:	429a      	cmp	r2, r3
 8007422:	d004      	beq.n	800742e <UART_SetConfig+0x7e>
 8007424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	4bc3      	ldr	r3, [pc, #780]	; (8007738 <UART_SetConfig+0x388>)
 800742a:	429a      	cmp	r2, r3
 800742c:	d103      	bne.n	8007436 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800742e:	f7fd fdad 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 8007432:	6778      	str	r0, [r7, #116]	; 0x74
 8007434:	e002      	b.n	800743c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007436:	f7fd fd95 	bl	8004f64 <HAL_RCC_GetPCLK1Freq>
 800743a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800743c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007444:	f040 80b6 	bne.w	80075b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800744a:	461c      	mov	r4, r3
 800744c:	f04f 0500 	mov.w	r5, #0
 8007450:	4622      	mov	r2, r4
 8007452:	462b      	mov	r3, r5
 8007454:	1891      	adds	r1, r2, r2
 8007456:	6439      	str	r1, [r7, #64]	; 0x40
 8007458:	415b      	adcs	r3, r3
 800745a:	647b      	str	r3, [r7, #68]	; 0x44
 800745c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007460:	1912      	adds	r2, r2, r4
 8007462:	eb45 0303 	adc.w	r3, r5, r3
 8007466:	f04f 0000 	mov.w	r0, #0
 800746a:	f04f 0100 	mov.w	r1, #0
 800746e:	00d9      	lsls	r1, r3, #3
 8007470:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007474:	00d0      	lsls	r0, r2, #3
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	1911      	adds	r1, r2, r4
 800747c:	6639      	str	r1, [r7, #96]	; 0x60
 800747e:	416b      	adcs	r3, r5
 8007480:	667b      	str	r3, [r7, #100]	; 0x64
 8007482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	461a      	mov	r2, r3
 8007488:	f04f 0300 	mov.w	r3, #0
 800748c:	1891      	adds	r1, r2, r2
 800748e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007490:	415b      	adcs	r3, r3
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007498:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800749c:	f7f9 fad6 	bl	8000a4c <__aeabi_uldivmod>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4ba5      	ldr	r3, [pc, #660]	; (800773c <UART_SetConfig+0x38c>)
 80074a6:	fba3 2302 	umull	r2, r3, r3, r2
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	011e      	lsls	r6, r3, #4
 80074ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074b0:	461c      	mov	r4, r3
 80074b2:	f04f 0500 	mov.w	r5, #0
 80074b6:	4622      	mov	r2, r4
 80074b8:	462b      	mov	r3, r5
 80074ba:	1891      	adds	r1, r2, r2
 80074bc:	6339      	str	r1, [r7, #48]	; 0x30
 80074be:	415b      	adcs	r3, r3
 80074c0:	637b      	str	r3, [r7, #52]	; 0x34
 80074c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80074c6:	1912      	adds	r2, r2, r4
 80074c8:	eb45 0303 	adc.w	r3, r5, r3
 80074cc:	f04f 0000 	mov.w	r0, #0
 80074d0:	f04f 0100 	mov.w	r1, #0
 80074d4:	00d9      	lsls	r1, r3, #3
 80074d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074da:	00d0      	lsls	r0, r2, #3
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	1911      	adds	r1, r2, r4
 80074e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80074e4:	416b      	adcs	r3, r5
 80074e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	461a      	mov	r2, r3
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	1891      	adds	r1, r2, r2
 80074f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80074f6:	415b      	adcs	r3, r3
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007502:	f7f9 faa3 	bl	8000a4c <__aeabi_uldivmod>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4b8c      	ldr	r3, [pc, #560]	; (800773c <UART_SetConfig+0x38c>)
 800750c:	fba3 1302 	umull	r1, r3, r3, r2
 8007510:	095b      	lsrs	r3, r3, #5
 8007512:	2164      	movs	r1, #100	; 0x64
 8007514:	fb01 f303 	mul.w	r3, r1, r3
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	3332      	adds	r3, #50	; 0x32
 800751e:	4a87      	ldr	r2, [pc, #540]	; (800773c <UART_SetConfig+0x38c>)
 8007520:	fba2 2303 	umull	r2, r3, r2, r3
 8007524:	095b      	lsrs	r3, r3, #5
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800752c:	441e      	add	r6, r3
 800752e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007530:	4618      	mov	r0, r3
 8007532:	f04f 0100 	mov.w	r1, #0
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	1894      	adds	r4, r2, r2
 800753c:	623c      	str	r4, [r7, #32]
 800753e:	415b      	adcs	r3, r3
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
 8007542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007546:	1812      	adds	r2, r2, r0
 8007548:	eb41 0303 	adc.w	r3, r1, r3
 800754c:	f04f 0400 	mov.w	r4, #0
 8007550:	f04f 0500 	mov.w	r5, #0
 8007554:	00dd      	lsls	r5, r3, #3
 8007556:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800755a:	00d4      	lsls	r4, r2, #3
 800755c:	4622      	mov	r2, r4
 800755e:	462b      	mov	r3, r5
 8007560:	1814      	adds	r4, r2, r0
 8007562:	653c      	str	r4, [r7, #80]	; 0x50
 8007564:	414b      	adcs	r3, r1
 8007566:	657b      	str	r3, [r7, #84]	; 0x54
 8007568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	461a      	mov	r2, r3
 800756e:	f04f 0300 	mov.w	r3, #0
 8007572:	1891      	adds	r1, r2, r2
 8007574:	61b9      	str	r1, [r7, #24]
 8007576:	415b      	adcs	r3, r3
 8007578:	61fb      	str	r3, [r7, #28]
 800757a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800757e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007582:	f7f9 fa63 	bl	8000a4c <__aeabi_uldivmod>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4b6c      	ldr	r3, [pc, #432]	; (800773c <UART_SetConfig+0x38c>)
 800758c:	fba3 1302 	umull	r1, r3, r3, r2
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	2164      	movs	r1, #100	; 0x64
 8007594:	fb01 f303 	mul.w	r3, r1, r3
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	3332      	adds	r3, #50	; 0x32
 800759e:	4a67      	ldr	r2, [pc, #412]	; (800773c <UART_SetConfig+0x38c>)
 80075a0:	fba2 2303 	umull	r2, r3, r2, r3
 80075a4:	095b      	lsrs	r3, r3, #5
 80075a6:	f003 0207 	and.w	r2, r3, #7
 80075aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4432      	add	r2, r6
 80075b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075b2:	e0b9      	b.n	8007728 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b6:	461c      	mov	r4, r3
 80075b8:	f04f 0500 	mov.w	r5, #0
 80075bc:	4622      	mov	r2, r4
 80075be:	462b      	mov	r3, r5
 80075c0:	1891      	adds	r1, r2, r2
 80075c2:	6139      	str	r1, [r7, #16]
 80075c4:	415b      	adcs	r3, r3
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80075cc:	1912      	adds	r2, r2, r4
 80075ce:	eb45 0303 	adc.w	r3, r5, r3
 80075d2:	f04f 0000 	mov.w	r0, #0
 80075d6:	f04f 0100 	mov.w	r1, #0
 80075da:	00d9      	lsls	r1, r3, #3
 80075dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075e0:	00d0      	lsls	r0, r2, #3
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	eb12 0804 	adds.w	r8, r2, r4
 80075ea:	eb43 0905 	adc.w	r9, r3, r5
 80075ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f04f 0100 	mov.w	r1, #0
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	008b      	lsls	r3, r1, #2
 8007602:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007606:	0082      	lsls	r2, r0, #2
 8007608:	4640      	mov	r0, r8
 800760a:	4649      	mov	r1, r9
 800760c:	f7f9 fa1e 	bl	8000a4c <__aeabi_uldivmod>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4b49      	ldr	r3, [pc, #292]	; (800773c <UART_SetConfig+0x38c>)
 8007616:	fba3 2302 	umull	r2, r3, r3, r2
 800761a:	095b      	lsrs	r3, r3, #5
 800761c:	011e      	lsls	r6, r3, #4
 800761e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007620:	4618      	mov	r0, r3
 8007622:	f04f 0100 	mov.w	r1, #0
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	1894      	adds	r4, r2, r2
 800762c:	60bc      	str	r4, [r7, #8]
 800762e:	415b      	adcs	r3, r3
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007636:	1812      	adds	r2, r2, r0
 8007638:	eb41 0303 	adc.w	r3, r1, r3
 800763c:	f04f 0400 	mov.w	r4, #0
 8007640:	f04f 0500 	mov.w	r5, #0
 8007644:	00dd      	lsls	r5, r3, #3
 8007646:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800764a:	00d4      	lsls	r4, r2, #3
 800764c:	4622      	mov	r2, r4
 800764e:	462b      	mov	r3, r5
 8007650:	1814      	adds	r4, r2, r0
 8007652:	64bc      	str	r4, [r7, #72]	; 0x48
 8007654:	414b      	adcs	r3, r1
 8007656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	4618      	mov	r0, r3
 800765e:	f04f 0100 	mov.w	r1, #0
 8007662:	f04f 0200 	mov.w	r2, #0
 8007666:	f04f 0300 	mov.w	r3, #0
 800766a:	008b      	lsls	r3, r1, #2
 800766c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007670:	0082      	lsls	r2, r0, #2
 8007672:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007676:	f7f9 f9e9 	bl	8000a4c <__aeabi_uldivmod>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	4b2f      	ldr	r3, [pc, #188]	; (800773c <UART_SetConfig+0x38c>)
 8007680:	fba3 1302 	umull	r1, r3, r3, r2
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	2164      	movs	r1, #100	; 0x64
 8007688:	fb01 f303 	mul.w	r3, r1, r3
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	3332      	adds	r3, #50	; 0x32
 8007692:	4a2a      	ldr	r2, [pc, #168]	; (800773c <UART_SetConfig+0x38c>)
 8007694:	fba2 2303 	umull	r2, r3, r2, r3
 8007698:	095b      	lsrs	r3, r3, #5
 800769a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800769e:	441e      	add	r6, r3
 80076a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076a2:	4618      	mov	r0, r3
 80076a4:	f04f 0100 	mov.w	r1, #0
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	1894      	adds	r4, r2, r2
 80076ae:	603c      	str	r4, [r7, #0]
 80076b0:	415b      	adcs	r3, r3
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076b8:	1812      	adds	r2, r2, r0
 80076ba:	eb41 0303 	adc.w	r3, r1, r3
 80076be:	f04f 0400 	mov.w	r4, #0
 80076c2:	f04f 0500 	mov.w	r5, #0
 80076c6:	00dd      	lsls	r5, r3, #3
 80076c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80076cc:	00d4      	lsls	r4, r2, #3
 80076ce:	4622      	mov	r2, r4
 80076d0:	462b      	mov	r3, r5
 80076d2:	eb12 0a00 	adds.w	sl, r2, r0
 80076d6:	eb43 0b01 	adc.w	fp, r3, r1
 80076da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	4618      	mov	r0, r3
 80076e0:	f04f 0100 	mov.w	r1, #0
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	f04f 0300 	mov.w	r3, #0
 80076ec:	008b      	lsls	r3, r1, #2
 80076ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076f2:	0082      	lsls	r2, r0, #2
 80076f4:	4650      	mov	r0, sl
 80076f6:	4659      	mov	r1, fp
 80076f8:	f7f9 f9a8 	bl	8000a4c <__aeabi_uldivmod>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4b0e      	ldr	r3, [pc, #56]	; (800773c <UART_SetConfig+0x38c>)
 8007702:	fba3 1302 	umull	r1, r3, r3, r2
 8007706:	095b      	lsrs	r3, r3, #5
 8007708:	2164      	movs	r1, #100	; 0x64
 800770a:	fb01 f303 	mul.w	r3, r1, r3
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	3332      	adds	r3, #50	; 0x32
 8007714:	4a09      	ldr	r2, [pc, #36]	; (800773c <UART_SetConfig+0x38c>)
 8007716:	fba2 2303 	umull	r2, r3, r2, r3
 800771a:	095b      	lsrs	r3, r3, #5
 800771c:	f003 020f 	and.w	r2, r3, #15
 8007720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4432      	add	r2, r6
 8007726:	609a      	str	r2, [r3, #8]
}
 8007728:	bf00      	nop
 800772a:	377c      	adds	r7, #124	; 0x7c
 800772c:	46bd      	mov	sp, r7
 800772e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007732:	bf00      	nop
 8007734:	40011000 	.word	0x40011000
 8007738:	40011400 	.word	0x40011400
 800773c:	51eb851f 	.word	0x51eb851f

08007740 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007758:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4b20      	ldr	r3, [pc, #128]	; (80077e0 <FSMC_NORSRAM_Init+0xa0>)
 800775e:	4013      	ands	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800776a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007770:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007776:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800777c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007782:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007788:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800778e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007794:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800779a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80077a0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80077a6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80077ac:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b08      	cmp	r3, #8
 80077ba:	d103      	bne.n	80077c4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68f9      	ldr	r1, [r7, #12]
 80077cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	fff00080 	.word	0xfff00080

080077e4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fe:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007806:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007812:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800781a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007822:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	3b01      	subs	r3, #1
 800782a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800782c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	3b02      	subs	r3, #2
 8007834:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007836:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800783c:	4313      	orrs	r3, r2
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6979      	ldr	r1, [r7, #20]
 800784c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
	...

08007860 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800786e:	2300      	movs	r3, #0
 8007870:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007878:	d122      	bne.n	80078c0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007882:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	4b15      	ldr	r3, [pc, #84]	; (80078dc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007888:	4013      	ands	r3, r2
 800788a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007896:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800789e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80078a6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80078ac:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6979      	ldr	r1, [r7, #20]
 80078ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80078be:	e005      	b.n	80078cc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80078c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	cff00000 	.word	0xcff00000

080078e0 <__errno>:
 80078e0:	4b01      	ldr	r3, [pc, #4]	; (80078e8 <__errno+0x8>)
 80078e2:	6818      	ldr	r0, [r3, #0]
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	2000000c 	.word	0x2000000c

080078ec <__libc_init_array>:
 80078ec:	b570      	push	{r4, r5, r6, lr}
 80078ee:	4d0d      	ldr	r5, [pc, #52]	; (8007924 <__libc_init_array+0x38>)
 80078f0:	4c0d      	ldr	r4, [pc, #52]	; (8007928 <__libc_init_array+0x3c>)
 80078f2:	1b64      	subs	r4, r4, r5
 80078f4:	10a4      	asrs	r4, r4, #2
 80078f6:	2600      	movs	r6, #0
 80078f8:	42a6      	cmp	r6, r4
 80078fa:	d109      	bne.n	8007910 <__libc_init_array+0x24>
 80078fc:	4d0b      	ldr	r5, [pc, #44]	; (800792c <__libc_init_array+0x40>)
 80078fe:	4c0c      	ldr	r4, [pc, #48]	; (8007930 <__libc_init_array+0x44>)
 8007900:	f000 fc4e 	bl	80081a0 <_init>
 8007904:	1b64      	subs	r4, r4, r5
 8007906:	10a4      	asrs	r4, r4, #2
 8007908:	2600      	movs	r6, #0
 800790a:	42a6      	cmp	r6, r4
 800790c:	d105      	bne.n	800791a <__libc_init_array+0x2e>
 800790e:	bd70      	pop	{r4, r5, r6, pc}
 8007910:	f855 3b04 	ldr.w	r3, [r5], #4
 8007914:	4798      	blx	r3
 8007916:	3601      	adds	r6, #1
 8007918:	e7ee      	b.n	80078f8 <__libc_init_array+0xc>
 800791a:	f855 3b04 	ldr.w	r3, [r5], #4
 800791e:	4798      	blx	r3
 8007920:	3601      	adds	r6, #1
 8007922:	e7f2      	b.n	800790a <__libc_init_array+0x1e>
 8007924:	0800b1d8 	.word	0x0800b1d8
 8007928:	0800b1d8 	.word	0x0800b1d8
 800792c:	0800b1d8 	.word	0x0800b1d8
 8007930:	0800b1dc 	.word	0x0800b1dc

08007934 <memset>:
 8007934:	4402      	add	r2, r0
 8007936:	4603      	mov	r3, r0
 8007938:	4293      	cmp	r3, r2
 800793a:	d100      	bne.n	800793e <memset+0xa>
 800793c:	4770      	bx	lr
 800793e:	f803 1b01 	strb.w	r1, [r3], #1
 8007942:	e7f9      	b.n	8007938 <memset+0x4>

08007944 <siprintf>:
 8007944:	b40e      	push	{r1, r2, r3}
 8007946:	b500      	push	{lr}
 8007948:	b09c      	sub	sp, #112	; 0x70
 800794a:	ab1d      	add	r3, sp, #116	; 0x74
 800794c:	9002      	str	r0, [sp, #8]
 800794e:	9006      	str	r0, [sp, #24]
 8007950:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007954:	4809      	ldr	r0, [pc, #36]	; (800797c <siprintf+0x38>)
 8007956:	9107      	str	r1, [sp, #28]
 8007958:	9104      	str	r1, [sp, #16]
 800795a:	4909      	ldr	r1, [pc, #36]	; (8007980 <siprintf+0x3c>)
 800795c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007960:	9105      	str	r1, [sp, #20]
 8007962:	6800      	ldr	r0, [r0, #0]
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	a902      	add	r1, sp, #8
 8007968:	f000 f868 	bl	8007a3c <_svfiprintf_r>
 800796c:	9b02      	ldr	r3, [sp, #8]
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	b01c      	add	sp, #112	; 0x70
 8007974:	f85d eb04 	ldr.w	lr, [sp], #4
 8007978:	b003      	add	sp, #12
 800797a:	4770      	bx	lr
 800797c:	2000000c 	.word	0x2000000c
 8007980:	ffff0208 	.word	0xffff0208

08007984 <__ssputs_r>:
 8007984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007988:	688e      	ldr	r6, [r1, #8]
 800798a:	429e      	cmp	r6, r3
 800798c:	4682      	mov	sl, r0
 800798e:	460c      	mov	r4, r1
 8007990:	4690      	mov	r8, r2
 8007992:	461f      	mov	r7, r3
 8007994:	d838      	bhi.n	8007a08 <__ssputs_r+0x84>
 8007996:	898a      	ldrh	r2, [r1, #12]
 8007998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800799c:	d032      	beq.n	8007a04 <__ssputs_r+0x80>
 800799e:	6825      	ldr	r5, [r4, #0]
 80079a0:	6909      	ldr	r1, [r1, #16]
 80079a2:	eba5 0901 	sub.w	r9, r5, r1
 80079a6:	6965      	ldr	r5, [r4, #20]
 80079a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079b0:	3301      	adds	r3, #1
 80079b2:	444b      	add	r3, r9
 80079b4:	106d      	asrs	r5, r5, #1
 80079b6:	429d      	cmp	r5, r3
 80079b8:	bf38      	it	cc
 80079ba:	461d      	movcc	r5, r3
 80079bc:	0553      	lsls	r3, r2, #21
 80079be:	d531      	bpl.n	8007a24 <__ssputs_r+0xa0>
 80079c0:	4629      	mov	r1, r5
 80079c2:	f000 fb47 	bl	8008054 <_malloc_r>
 80079c6:	4606      	mov	r6, r0
 80079c8:	b950      	cbnz	r0, 80079e0 <__ssputs_r+0x5c>
 80079ca:	230c      	movs	r3, #12
 80079cc:	f8ca 3000 	str.w	r3, [sl]
 80079d0:	89a3      	ldrh	r3, [r4, #12]
 80079d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d6:	81a3      	strh	r3, [r4, #12]
 80079d8:	f04f 30ff 	mov.w	r0, #4294967295
 80079dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e0:	6921      	ldr	r1, [r4, #16]
 80079e2:	464a      	mov	r2, r9
 80079e4:	f000 fabe 	bl	8007f64 <memcpy>
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	6126      	str	r6, [r4, #16]
 80079f6:	6165      	str	r5, [r4, #20]
 80079f8:	444e      	add	r6, r9
 80079fa:	eba5 0509 	sub.w	r5, r5, r9
 80079fe:	6026      	str	r6, [r4, #0]
 8007a00:	60a5      	str	r5, [r4, #8]
 8007a02:	463e      	mov	r6, r7
 8007a04:	42be      	cmp	r6, r7
 8007a06:	d900      	bls.n	8007a0a <__ssputs_r+0x86>
 8007a08:	463e      	mov	r6, r7
 8007a0a:	4632      	mov	r2, r6
 8007a0c:	6820      	ldr	r0, [r4, #0]
 8007a0e:	4641      	mov	r1, r8
 8007a10:	f000 fab6 	bl	8007f80 <memmove>
 8007a14:	68a3      	ldr	r3, [r4, #8]
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	1b9b      	subs	r3, r3, r6
 8007a1a:	4432      	add	r2, r6
 8007a1c:	60a3      	str	r3, [r4, #8]
 8007a1e:	6022      	str	r2, [r4, #0]
 8007a20:	2000      	movs	r0, #0
 8007a22:	e7db      	b.n	80079dc <__ssputs_r+0x58>
 8007a24:	462a      	mov	r2, r5
 8007a26:	f000 fb6f 	bl	8008108 <_realloc_r>
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d1e1      	bne.n	80079f4 <__ssputs_r+0x70>
 8007a30:	6921      	ldr	r1, [r4, #16]
 8007a32:	4650      	mov	r0, sl
 8007a34:	f000 fabe 	bl	8007fb4 <_free_r>
 8007a38:	e7c7      	b.n	80079ca <__ssputs_r+0x46>
	...

08007a3c <_svfiprintf_r>:
 8007a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a40:	4698      	mov	r8, r3
 8007a42:	898b      	ldrh	r3, [r1, #12]
 8007a44:	061b      	lsls	r3, r3, #24
 8007a46:	b09d      	sub	sp, #116	; 0x74
 8007a48:	4607      	mov	r7, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	4614      	mov	r4, r2
 8007a4e:	d50e      	bpl.n	8007a6e <_svfiprintf_r+0x32>
 8007a50:	690b      	ldr	r3, [r1, #16]
 8007a52:	b963      	cbnz	r3, 8007a6e <_svfiprintf_r+0x32>
 8007a54:	2140      	movs	r1, #64	; 0x40
 8007a56:	f000 fafd 	bl	8008054 <_malloc_r>
 8007a5a:	6028      	str	r0, [r5, #0]
 8007a5c:	6128      	str	r0, [r5, #16]
 8007a5e:	b920      	cbnz	r0, 8007a6a <_svfiprintf_r+0x2e>
 8007a60:	230c      	movs	r3, #12
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	e0d1      	b.n	8007c0e <_svfiprintf_r+0x1d2>
 8007a6a:	2340      	movs	r3, #64	; 0x40
 8007a6c:	616b      	str	r3, [r5, #20]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9309      	str	r3, [sp, #36]	; 0x24
 8007a72:	2320      	movs	r3, #32
 8007a74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a78:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a7c:	2330      	movs	r3, #48	; 0x30
 8007a7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c28 <_svfiprintf_r+0x1ec>
 8007a82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a86:	f04f 0901 	mov.w	r9, #1
 8007a8a:	4623      	mov	r3, r4
 8007a8c:	469a      	mov	sl, r3
 8007a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a92:	b10a      	cbz	r2, 8007a98 <_svfiprintf_r+0x5c>
 8007a94:	2a25      	cmp	r2, #37	; 0x25
 8007a96:	d1f9      	bne.n	8007a8c <_svfiprintf_r+0x50>
 8007a98:	ebba 0b04 	subs.w	fp, sl, r4
 8007a9c:	d00b      	beq.n	8007ab6 <_svfiprintf_r+0x7a>
 8007a9e:	465b      	mov	r3, fp
 8007aa0:	4622      	mov	r2, r4
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	f7ff ff6d 	bl	8007984 <__ssputs_r>
 8007aaa:	3001      	adds	r0, #1
 8007aac:	f000 80aa 	beq.w	8007c04 <_svfiprintf_r+0x1c8>
 8007ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab2:	445a      	add	r2, fp
 8007ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 80a2 	beq.w	8007c04 <_svfiprintf_r+0x1c8>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aca:	f10a 0a01 	add.w	sl, sl, #1
 8007ace:	9304      	str	r3, [sp, #16]
 8007ad0:	9307      	str	r3, [sp, #28]
 8007ad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ad6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ad8:	4654      	mov	r4, sl
 8007ada:	2205      	movs	r2, #5
 8007adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae0:	4851      	ldr	r0, [pc, #324]	; (8007c28 <_svfiprintf_r+0x1ec>)
 8007ae2:	f7f8 fb75 	bl	80001d0 <memchr>
 8007ae6:	9a04      	ldr	r2, [sp, #16]
 8007ae8:	b9d8      	cbnz	r0, 8007b22 <_svfiprintf_r+0xe6>
 8007aea:	06d0      	lsls	r0, r2, #27
 8007aec:	bf44      	itt	mi
 8007aee:	2320      	movmi	r3, #32
 8007af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af4:	0711      	lsls	r1, r2, #28
 8007af6:	bf44      	itt	mi
 8007af8:	232b      	movmi	r3, #43	; 0x2b
 8007afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007afe:	f89a 3000 	ldrb.w	r3, [sl]
 8007b02:	2b2a      	cmp	r3, #42	; 0x2a
 8007b04:	d015      	beq.n	8007b32 <_svfiprintf_r+0xf6>
 8007b06:	9a07      	ldr	r2, [sp, #28]
 8007b08:	4654      	mov	r4, sl
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	f04f 0c0a 	mov.w	ip, #10
 8007b10:	4621      	mov	r1, r4
 8007b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b16:	3b30      	subs	r3, #48	; 0x30
 8007b18:	2b09      	cmp	r3, #9
 8007b1a:	d94e      	bls.n	8007bba <_svfiprintf_r+0x17e>
 8007b1c:	b1b0      	cbz	r0, 8007b4c <_svfiprintf_r+0x110>
 8007b1e:	9207      	str	r2, [sp, #28]
 8007b20:	e014      	b.n	8007b4c <_svfiprintf_r+0x110>
 8007b22:	eba0 0308 	sub.w	r3, r0, r8
 8007b26:	fa09 f303 	lsl.w	r3, r9, r3
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	46a2      	mov	sl, r4
 8007b30:	e7d2      	b.n	8007ad8 <_svfiprintf_r+0x9c>
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	1d19      	adds	r1, r3, #4
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	9103      	str	r1, [sp, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	bfbb      	ittet	lt
 8007b3e:	425b      	neglt	r3, r3
 8007b40:	f042 0202 	orrlt.w	r2, r2, #2
 8007b44:	9307      	strge	r3, [sp, #28]
 8007b46:	9307      	strlt	r3, [sp, #28]
 8007b48:	bfb8      	it	lt
 8007b4a:	9204      	strlt	r2, [sp, #16]
 8007b4c:	7823      	ldrb	r3, [r4, #0]
 8007b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b50:	d10c      	bne.n	8007b6c <_svfiprintf_r+0x130>
 8007b52:	7863      	ldrb	r3, [r4, #1]
 8007b54:	2b2a      	cmp	r3, #42	; 0x2a
 8007b56:	d135      	bne.n	8007bc4 <_svfiprintf_r+0x188>
 8007b58:	9b03      	ldr	r3, [sp, #12]
 8007b5a:	1d1a      	adds	r2, r3, #4
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	9203      	str	r2, [sp, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bfb8      	it	lt
 8007b64:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b68:	3402      	adds	r4, #2
 8007b6a:	9305      	str	r3, [sp, #20]
 8007b6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c38 <_svfiprintf_r+0x1fc>
 8007b70:	7821      	ldrb	r1, [r4, #0]
 8007b72:	2203      	movs	r2, #3
 8007b74:	4650      	mov	r0, sl
 8007b76:	f7f8 fb2b 	bl	80001d0 <memchr>
 8007b7a:	b140      	cbz	r0, 8007b8e <_svfiprintf_r+0x152>
 8007b7c:	2340      	movs	r3, #64	; 0x40
 8007b7e:	eba0 000a 	sub.w	r0, r0, sl
 8007b82:	fa03 f000 	lsl.w	r0, r3, r0
 8007b86:	9b04      	ldr	r3, [sp, #16]
 8007b88:	4303      	orrs	r3, r0
 8007b8a:	3401      	adds	r4, #1
 8007b8c:	9304      	str	r3, [sp, #16]
 8007b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b92:	4826      	ldr	r0, [pc, #152]	; (8007c2c <_svfiprintf_r+0x1f0>)
 8007b94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b98:	2206      	movs	r2, #6
 8007b9a:	f7f8 fb19 	bl	80001d0 <memchr>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d038      	beq.n	8007c14 <_svfiprintf_r+0x1d8>
 8007ba2:	4b23      	ldr	r3, [pc, #140]	; (8007c30 <_svfiprintf_r+0x1f4>)
 8007ba4:	bb1b      	cbnz	r3, 8007bee <_svfiprintf_r+0x1b2>
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	3307      	adds	r3, #7
 8007baa:	f023 0307 	bic.w	r3, r3, #7
 8007bae:	3308      	adds	r3, #8
 8007bb0:	9303      	str	r3, [sp, #12]
 8007bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb4:	4433      	add	r3, r6
 8007bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb8:	e767      	b.n	8007a8a <_svfiprintf_r+0x4e>
 8007bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	2001      	movs	r0, #1
 8007bc2:	e7a5      	b.n	8007b10 <_svfiprintf_r+0xd4>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	3401      	adds	r4, #1
 8007bc8:	9305      	str	r3, [sp, #20]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	f04f 0c0a 	mov.w	ip, #10
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd6:	3a30      	subs	r2, #48	; 0x30
 8007bd8:	2a09      	cmp	r2, #9
 8007bda:	d903      	bls.n	8007be4 <_svfiprintf_r+0x1a8>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0c5      	beq.n	8007b6c <_svfiprintf_r+0x130>
 8007be0:	9105      	str	r1, [sp, #20]
 8007be2:	e7c3      	b.n	8007b6c <_svfiprintf_r+0x130>
 8007be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007be8:	4604      	mov	r4, r0
 8007bea:	2301      	movs	r3, #1
 8007bec:	e7f0      	b.n	8007bd0 <_svfiprintf_r+0x194>
 8007bee:	ab03      	add	r3, sp, #12
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	462a      	mov	r2, r5
 8007bf4:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <_svfiprintf_r+0x1f8>)
 8007bf6:	a904      	add	r1, sp, #16
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f3af 8000 	nop.w
 8007bfe:	1c42      	adds	r2, r0, #1
 8007c00:	4606      	mov	r6, r0
 8007c02:	d1d6      	bne.n	8007bb2 <_svfiprintf_r+0x176>
 8007c04:	89ab      	ldrh	r3, [r5, #12]
 8007c06:	065b      	lsls	r3, r3, #25
 8007c08:	f53f af2c 	bmi.w	8007a64 <_svfiprintf_r+0x28>
 8007c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c0e:	b01d      	add	sp, #116	; 0x74
 8007c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c14:	ab03      	add	r3, sp, #12
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	462a      	mov	r2, r5
 8007c1a:	4b06      	ldr	r3, [pc, #24]	; (8007c34 <_svfiprintf_r+0x1f8>)
 8007c1c:	a904      	add	r1, sp, #16
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f000 f87a 	bl	8007d18 <_printf_i>
 8007c24:	e7eb      	b.n	8007bfe <_svfiprintf_r+0x1c2>
 8007c26:	bf00      	nop
 8007c28:	0800b19c 	.word	0x0800b19c
 8007c2c:	0800b1a6 	.word	0x0800b1a6
 8007c30:	00000000 	.word	0x00000000
 8007c34:	08007985 	.word	0x08007985
 8007c38:	0800b1a2 	.word	0x0800b1a2

08007c3c <_printf_common>:
 8007c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	4616      	mov	r6, r2
 8007c42:	4699      	mov	r9, r3
 8007c44:	688a      	ldr	r2, [r1, #8]
 8007c46:	690b      	ldr	r3, [r1, #16]
 8007c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	bfb8      	it	lt
 8007c50:	4613      	movlt	r3, r2
 8007c52:	6033      	str	r3, [r6, #0]
 8007c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c58:	4607      	mov	r7, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	b10a      	cbz	r2, 8007c62 <_printf_common+0x26>
 8007c5e:	3301      	adds	r3, #1
 8007c60:	6033      	str	r3, [r6, #0]
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	0699      	lsls	r1, r3, #26
 8007c66:	bf42      	ittt	mi
 8007c68:	6833      	ldrmi	r3, [r6, #0]
 8007c6a:	3302      	addmi	r3, #2
 8007c6c:	6033      	strmi	r3, [r6, #0]
 8007c6e:	6825      	ldr	r5, [r4, #0]
 8007c70:	f015 0506 	ands.w	r5, r5, #6
 8007c74:	d106      	bne.n	8007c84 <_printf_common+0x48>
 8007c76:	f104 0a19 	add.w	sl, r4, #25
 8007c7a:	68e3      	ldr	r3, [r4, #12]
 8007c7c:	6832      	ldr	r2, [r6, #0]
 8007c7e:	1a9b      	subs	r3, r3, r2
 8007c80:	42ab      	cmp	r3, r5
 8007c82:	dc26      	bgt.n	8007cd2 <_printf_common+0x96>
 8007c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c88:	1e13      	subs	r3, r2, #0
 8007c8a:	6822      	ldr	r2, [r4, #0]
 8007c8c:	bf18      	it	ne
 8007c8e:	2301      	movne	r3, #1
 8007c90:	0692      	lsls	r2, r2, #26
 8007c92:	d42b      	bmi.n	8007cec <_printf_common+0xb0>
 8007c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c98:	4649      	mov	r1, r9
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	47c0      	blx	r8
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d01e      	beq.n	8007ce0 <_printf_common+0xa4>
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	68e5      	ldr	r5, [r4, #12]
 8007ca6:	6832      	ldr	r2, [r6, #0]
 8007ca8:	f003 0306 	and.w	r3, r3, #6
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	bf08      	it	eq
 8007cb0:	1aad      	subeq	r5, r5, r2
 8007cb2:	68a3      	ldr	r3, [r4, #8]
 8007cb4:	6922      	ldr	r2, [r4, #16]
 8007cb6:	bf0c      	ite	eq
 8007cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cbc:	2500      	movne	r5, #0
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	bfc4      	itt	gt
 8007cc2:	1a9b      	subgt	r3, r3, r2
 8007cc4:	18ed      	addgt	r5, r5, r3
 8007cc6:	2600      	movs	r6, #0
 8007cc8:	341a      	adds	r4, #26
 8007cca:	42b5      	cmp	r5, r6
 8007ccc:	d11a      	bne.n	8007d04 <_printf_common+0xc8>
 8007cce:	2000      	movs	r0, #0
 8007cd0:	e008      	b.n	8007ce4 <_printf_common+0xa8>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	4652      	mov	r2, sl
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	4638      	mov	r0, r7
 8007cda:	47c0      	blx	r8
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d103      	bne.n	8007ce8 <_printf_common+0xac>
 8007ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce8:	3501      	adds	r5, #1
 8007cea:	e7c6      	b.n	8007c7a <_printf_common+0x3e>
 8007cec:	18e1      	adds	r1, r4, r3
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	2030      	movs	r0, #48	; 0x30
 8007cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cf6:	4422      	add	r2, r4
 8007cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d00:	3302      	adds	r3, #2
 8007d02:	e7c7      	b.n	8007c94 <_printf_common+0x58>
 8007d04:	2301      	movs	r3, #1
 8007d06:	4622      	mov	r2, r4
 8007d08:	4649      	mov	r1, r9
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	47c0      	blx	r8
 8007d0e:	3001      	adds	r0, #1
 8007d10:	d0e6      	beq.n	8007ce0 <_printf_common+0xa4>
 8007d12:	3601      	adds	r6, #1
 8007d14:	e7d9      	b.n	8007cca <_printf_common+0x8e>
	...

08007d18 <_printf_i>:
 8007d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	4691      	mov	r9, r2
 8007d20:	7e27      	ldrb	r7, [r4, #24]
 8007d22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d24:	2f78      	cmp	r7, #120	; 0x78
 8007d26:	4680      	mov	r8, r0
 8007d28:	469a      	mov	sl, r3
 8007d2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d2e:	d807      	bhi.n	8007d40 <_printf_i+0x28>
 8007d30:	2f62      	cmp	r7, #98	; 0x62
 8007d32:	d80a      	bhi.n	8007d4a <_printf_i+0x32>
 8007d34:	2f00      	cmp	r7, #0
 8007d36:	f000 80d8 	beq.w	8007eea <_printf_i+0x1d2>
 8007d3a:	2f58      	cmp	r7, #88	; 0x58
 8007d3c:	f000 80a3 	beq.w	8007e86 <_printf_i+0x16e>
 8007d40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d48:	e03a      	b.n	8007dc0 <_printf_i+0xa8>
 8007d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d4e:	2b15      	cmp	r3, #21
 8007d50:	d8f6      	bhi.n	8007d40 <_printf_i+0x28>
 8007d52:	a001      	add	r0, pc, #4	; (adr r0, 8007d58 <_printf_i+0x40>)
 8007d54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d58:	08007db1 	.word	0x08007db1
 8007d5c:	08007dc5 	.word	0x08007dc5
 8007d60:	08007d41 	.word	0x08007d41
 8007d64:	08007d41 	.word	0x08007d41
 8007d68:	08007d41 	.word	0x08007d41
 8007d6c:	08007d41 	.word	0x08007d41
 8007d70:	08007dc5 	.word	0x08007dc5
 8007d74:	08007d41 	.word	0x08007d41
 8007d78:	08007d41 	.word	0x08007d41
 8007d7c:	08007d41 	.word	0x08007d41
 8007d80:	08007d41 	.word	0x08007d41
 8007d84:	08007ed1 	.word	0x08007ed1
 8007d88:	08007df5 	.word	0x08007df5
 8007d8c:	08007eb3 	.word	0x08007eb3
 8007d90:	08007d41 	.word	0x08007d41
 8007d94:	08007d41 	.word	0x08007d41
 8007d98:	08007ef3 	.word	0x08007ef3
 8007d9c:	08007d41 	.word	0x08007d41
 8007da0:	08007df5 	.word	0x08007df5
 8007da4:	08007d41 	.word	0x08007d41
 8007da8:	08007d41 	.word	0x08007d41
 8007dac:	08007ebb 	.word	0x08007ebb
 8007db0:	680b      	ldr	r3, [r1, #0]
 8007db2:	1d1a      	adds	r2, r3, #4
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	600a      	str	r2, [r1, #0]
 8007db8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e0a3      	b.n	8007f0c <_printf_i+0x1f4>
 8007dc4:	6825      	ldr	r5, [r4, #0]
 8007dc6:	6808      	ldr	r0, [r1, #0]
 8007dc8:	062e      	lsls	r6, r5, #24
 8007dca:	f100 0304 	add.w	r3, r0, #4
 8007dce:	d50a      	bpl.n	8007de6 <_printf_i+0xce>
 8007dd0:	6805      	ldr	r5, [r0, #0]
 8007dd2:	600b      	str	r3, [r1, #0]
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	da03      	bge.n	8007de0 <_printf_i+0xc8>
 8007dd8:	232d      	movs	r3, #45	; 0x2d
 8007dda:	426d      	negs	r5, r5
 8007ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de0:	485e      	ldr	r0, [pc, #376]	; (8007f5c <_printf_i+0x244>)
 8007de2:	230a      	movs	r3, #10
 8007de4:	e019      	b.n	8007e1a <_printf_i+0x102>
 8007de6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007dea:	6805      	ldr	r5, [r0, #0]
 8007dec:	600b      	str	r3, [r1, #0]
 8007dee:	bf18      	it	ne
 8007df0:	b22d      	sxthne	r5, r5
 8007df2:	e7ef      	b.n	8007dd4 <_printf_i+0xbc>
 8007df4:	680b      	ldr	r3, [r1, #0]
 8007df6:	6825      	ldr	r5, [r4, #0]
 8007df8:	1d18      	adds	r0, r3, #4
 8007dfa:	6008      	str	r0, [r1, #0]
 8007dfc:	0628      	lsls	r0, r5, #24
 8007dfe:	d501      	bpl.n	8007e04 <_printf_i+0xec>
 8007e00:	681d      	ldr	r5, [r3, #0]
 8007e02:	e002      	b.n	8007e0a <_printf_i+0xf2>
 8007e04:	0669      	lsls	r1, r5, #25
 8007e06:	d5fb      	bpl.n	8007e00 <_printf_i+0xe8>
 8007e08:	881d      	ldrh	r5, [r3, #0]
 8007e0a:	4854      	ldr	r0, [pc, #336]	; (8007f5c <_printf_i+0x244>)
 8007e0c:	2f6f      	cmp	r7, #111	; 0x6f
 8007e0e:	bf0c      	ite	eq
 8007e10:	2308      	moveq	r3, #8
 8007e12:	230a      	movne	r3, #10
 8007e14:	2100      	movs	r1, #0
 8007e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e1a:	6866      	ldr	r6, [r4, #4]
 8007e1c:	60a6      	str	r6, [r4, #8]
 8007e1e:	2e00      	cmp	r6, #0
 8007e20:	bfa2      	ittt	ge
 8007e22:	6821      	ldrge	r1, [r4, #0]
 8007e24:	f021 0104 	bicge.w	r1, r1, #4
 8007e28:	6021      	strge	r1, [r4, #0]
 8007e2a:	b90d      	cbnz	r5, 8007e30 <_printf_i+0x118>
 8007e2c:	2e00      	cmp	r6, #0
 8007e2e:	d04d      	beq.n	8007ecc <_printf_i+0x1b4>
 8007e30:	4616      	mov	r6, r2
 8007e32:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e36:	fb03 5711 	mls	r7, r3, r1, r5
 8007e3a:	5dc7      	ldrb	r7, [r0, r7]
 8007e3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e40:	462f      	mov	r7, r5
 8007e42:	42bb      	cmp	r3, r7
 8007e44:	460d      	mov	r5, r1
 8007e46:	d9f4      	bls.n	8007e32 <_printf_i+0x11a>
 8007e48:	2b08      	cmp	r3, #8
 8007e4a:	d10b      	bne.n	8007e64 <_printf_i+0x14c>
 8007e4c:	6823      	ldr	r3, [r4, #0]
 8007e4e:	07df      	lsls	r7, r3, #31
 8007e50:	d508      	bpl.n	8007e64 <_printf_i+0x14c>
 8007e52:	6923      	ldr	r3, [r4, #16]
 8007e54:	6861      	ldr	r1, [r4, #4]
 8007e56:	4299      	cmp	r1, r3
 8007e58:	bfde      	ittt	le
 8007e5a:	2330      	movle	r3, #48	; 0x30
 8007e5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e64:	1b92      	subs	r2, r2, r6
 8007e66:	6122      	str	r2, [r4, #16]
 8007e68:	f8cd a000 	str.w	sl, [sp]
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	aa03      	add	r2, sp, #12
 8007e70:	4621      	mov	r1, r4
 8007e72:	4640      	mov	r0, r8
 8007e74:	f7ff fee2 	bl	8007c3c <_printf_common>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d14c      	bne.n	8007f16 <_printf_i+0x1fe>
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e80:	b004      	add	sp, #16
 8007e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e86:	4835      	ldr	r0, [pc, #212]	; (8007f5c <_printf_i+0x244>)
 8007e88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	680e      	ldr	r6, [r1, #0]
 8007e90:	061f      	lsls	r7, r3, #24
 8007e92:	f856 5b04 	ldr.w	r5, [r6], #4
 8007e96:	600e      	str	r6, [r1, #0]
 8007e98:	d514      	bpl.n	8007ec4 <_printf_i+0x1ac>
 8007e9a:	07d9      	lsls	r1, r3, #31
 8007e9c:	bf44      	itt	mi
 8007e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8007ea2:	6023      	strmi	r3, [r4, #0]
 8007ea4:	b91d      	cbnz	r5, 8007eae <_printf_i+0x196>
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	f023 0320 	bic.w	r3, r3, #32
 8007eac:	6023      	str	r3, [r4, #0]
 8007eae:	2310      	movs	r3, #16
 8007eb0:	e7b0      	b.n	8007e14 <_printf_i+0xfc>
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	f043 0320 	orr.w	r3, r3, #32
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	2378      	movs	r3, #120	; 0x78
 8007ebc:	4828      	ldr	r0, [pc, #160]	; (8007f60 <_printf_i+0x248>)
 8007ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ec2:	e7e3      	b.n	8007e8c <_printf_i+0x174>
 8007ec4:	065e      	lsls	r6, r3, #25
 8007ec6:	bf48      	it	mi
 8007ec8:	b2ad      	uxthmi	r5, r5
 8007eca:	e7e6      	b.n	8007e9a <_printf_i+0x182>
 8007ecc:	4616      	mov	r6, r2
 8007ece:	e7bb      	b.n	8007e48 <_printf_i+0x130>
 8007ed0:	680b      	ldr	r3, [r1, #0]
 8007ed2:	6826      	ldr	r6, [r4, #0]
 8007ed4:	6960      	ldr	r0, [r4, #20]
 8007ed6:	1d1d      	adds	r5, r3, #4
 8007ed8:	600d      	str	r5, [r1, #0]
 8007eda:	0635      	lsls	r5, r6, #24
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	d501      	bpl.n	8007ee4 <_printf_i+0x1cc>
 8007ee0:	6018      	str	r0, [r3, #0]
 8007ee2:	e002      	b.n	8007eea <_printf_i+0x1d2>
 8007ee4:	0671      	lsls	r1, r6, #25
 8007ee6:	d5fb      	bpl.n	8007ee0 <_printf_i+0x1c8>
 8007ee8:	8018      	strh	r0, [r3, #0]
 8007eea:	2300      	movs	r3, #0
 8007eec:	6123      	str	r3, [r4, #16]
 8007eee:	4616      	mov	r6, r2
 8007ef0:	e7ba      	b.n	8007e68 <_printf_i+0x150>
 8007ef2:	680b      	ldr	r3, [r1, #0]
 8007ef4:	1d1a      	adds	r2, r3, #4
 8007ef6:	600a      	str	r2, [r1, #0]
 8007ef8:	681e      	ldr	r6, [r3, #0]
 8007efa:	6862      	ldr	r2, [r4, #4]
 8007efc:	2100      	movs	r1, #0
 8007efe:	4630      	mov	r0, r6
 8007f00:	f7f8 f966 	bl	80001d0 <memchr>
 8007f04:	b108      	cbz	r0, 8007f0a <_printf_i+0x1f2>
 8007f06:	1b80      	subs	r0, r0, r6
 8007f08:	6060      	str	r0, [r4, #4]
 8007f0a:	6863      	ldr	r3, [r4, #4]
 8007f0c:	6123      	str	r3, [r4, #16]
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f14:	e7a8      	b.n	8007e68 <_printf_i+0x150>
 8007f16:	6923      	ldr	r3, [r4, #16]
 8007f18:	4632      	mov	r2, r6
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	47d0      	blx	sl
 8007f20:	3001      	adds	r0, #1
 8007f22:	d0ab      	beq.n	8007e7c <_printf_i+0x164>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	079b      	lsls	r3, r3, #30
 8007f28:	d413      	bmi.n	8007f52 <_printf_i+0x23a>
 8007f2a:	68e0      	ldr	r0, [r4, #12]
 8007f2c:	9b03      	ldr	r3, [sp, #12]
 8007f2e:	4298      	cmp	r0, r3
 8007f30:	bfb8      	it	lt
 8007f32:	4618      	movlt	r0, r3
 8007f34:	e7a4      	b.n	8007e80 <_printf_i+0x168>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4632      	mov	r2, r6
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	47d0      	blx	sl
 8007f40:	3001      	adds	r0, #1
 8007f42:	d09b      	beq.n	8007e7c <_printf_i+0x164>
 8007f44:	3501      	adds	r5, #1
 8007f46:	68e3      	ldr	r3, [r4, #12]
 8007f48:	9903      	ldr	r1, [sp, #12]
 8007f4a:	1a5b      	subs	r3, r3, r1
 8007f4c:	42ab      	cmp	r3, r5
 8007f4e:	dcf2      	bgt.n	8007f36 <_printf_i+0x21e>
 8007f50:	e7eb      	b.n	8007f2a <_printf_i+0x212>
 8007f52:	2500      	movs	r5, #0
 8007f54:	f104 0619 	add.w	r6, r4, #25
 8007f58:	e7f5      	b.n	8007f46 <_printf_i+0x22e>
 8007f5a:	bf00      	nop
 8007f5c:	0800b1ad 	.word	0x0800b1ad
 8007f60:	0800b1be 	.word	0x0800b1be

08007f64 <memcpy>:
 8007f64:	440a      	add	r2, r1
 8007f66:	4291      	cmp	r1, r2
 8007f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f6c:	d100      	bne.n	8007f70 <memcpy+0xc>
 8007f6e:	4770      	bx	lr
 8007f70:	b510      	push	{r4, lr}
 8007f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f7a:	4291      	cmp	r1, r2
 8007f7c:	d1f9      	bne.n	8007f72 <memcpy+0xe>
 8007f7e:	bd10      	pop	{r4, pc}

08007f80 <memmove>:
 8007f80:	4288      	cmp	r0, r1
 8007f82:	b510      	push	{r4, lr}
 8007f84:	eb01 0402 	add.w	r4, r1, r2
 8007f88:	d902      	bls.n	8007f90 <memmove+0x10>
 8007f8a:	4284      	cmp	r4, r0
 8007f8c:	4623      	mov	r3, r4
 8007f8e:	d807      	bhi.n	8007fa0 <memmove+0x20>
 8007f90:	1e43      	subs	r3, r0, #1
 8007f92:	42a1      	cmp	r1, r4
 8007f94:	d008      	beq.n	8007fa8 <memmove+0x28>
 8007f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f9e:	e7f8      	b.n	8007f92 <memmove+0x12>
 8007fa0:	4402      	add	r2, r0
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	428a      	cmp	r2, r1
 8007fa6:	d100      	bne.n	8007faa <memmove+0x2a>
 8007fa8:	bd10      	pop	{r4, pc}
 8007faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fb2:	e7f7      	b.n	8007fa4 <memmove+0x24>

08007fb4 <_free_r>:
 8007fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fb6:	2900      	cmp	r1, #0
 8007fb8:	d048      	beq.n	800804c <_free_r+0x98>
 8007fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fbe:	9001      	str	r0, [sp, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8007fc6:	bfb8      	it	lt
 8007fc8:	18e4      	addlt	r4, r4, r3
 8007fca:	f000 f8d3 	bl	8008174 <__malloc_lock>
 8007fce:	4a20      	ldr	r2, [pc, #128]	; (8008050 <_free_r+0x9c>)
 8007fd0:	9801      	ldr	r0, [sp, #4]
 8007fd2:	6813      	ldr	r3, [r2, #0]
 8007fd4:	4615      	mov	r5, r2
 8007fd6:	b933      	cbnz	r3, 8007fe6 <_free_r+0x32>
 8007fd8:	6063      	str	r3, [r4, #4]
 8007fda:	6014      	str	r4, [r2, #0]
 8007fdc:	b003      	add	sp, #12
 8007fde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fe2:	f000 b8cd 	b.w	8008180 <__malloc_unlock>
 8007fe6:	42a3      	cmp	r3, r4
 8007fe8:	d90b      	bls.n	8008002 <_free_r+0x4e>
 8007fea:	6821      	ldr	r1, [r4, #0]
 8007fec:	1862      	adds	r2, r4, r1
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	bf04      	itt	eq
 8007ff2:	681a      	ldreq	r2, [r3, #0]
 8007ff4:	685b      	ldreq	r3, [r3, #4]
 8007ff6:	6063      	str	r3, [r4, #4]
 8007ff8:	bf04      	itt	eq
 8007ffa:	1852      	addeq	r2, r2, r1
 8007ffc:	6022      	streq	r2, [r4, #0]
 8007ffe:	602c      	str	r4, [r5, #0]
 8008000:	e7ec      	b.n	8007fdc <_free_r+0x28>
 8008002:	461a      	mov	r2, r3
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	b10b      	cbz	r3, 800800c <_free_r+0x58>
 8008008:	42a3      	cmp	r3, r4
 800800a:	d9fa      	bls.n	8008002 <_free_r+0x4e>
 800800c:	6811      	ldr	r1, [r2, #0]
 800800e:	1855      	adds	r5, r2, r1
 8008010:	42a5      	cmp	r5, r4
 8008012:	d10b      	bne.n	800802c <_free_r+0x78>
 8008014:	6824      	ldr	r4, [r4, #0]
 8008016:	4421      	add	r1, r4
 8008018:	1854      	adds	r4, r2, r1
 800801a:	42a3      	cmp	r3, r4
 800801c:	6011      	str	r1, [r2, #0]
 800801e:	d1dd      	bne.n	8007fdc <_free_r+0x28>
 8008020:	681c      	ldr	r4, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	6053      	str	r3, [r2, #4]
 8008026:	4421      	add	r1, r4
 8008028:	6011      	str	r1, [r2, #0]
 800802a:	e7d7      	b.n	8007fdc <_free_r+0x28>
 800802c:	d902      	bls.n	8008034 <_free_r+0x80>
 800802e:	230c      	movs	r3, #12
 8008030:	6003      	str	r3, [r0, #0]
 8008032:	e7d3      	b.n	8007fdc <_free_r+0x28>
 8008034:	6825      	ldr	r5, [r4, #0]
 8008036:	1961      	adds	r1, r4, r5
 8008038:	428b      	cmp	r3, r1
 800803a:	bf04      	itt	eq
 800803c:	6819      	ldreq	r1, [r3, #0]
 800803e:	685b      	ldreq	r3, [r3, #4]
 8008040:	6063      	str	r3, [r4, #4]
 8008042:	bf04      	itt	eq
 8008044:	1949      	addeq	r1, r1, r5
 8008046:	6021      	streq	r1, [r4, #0]
 8008048:	6054      	str	r4, [r2, #4]
 800804a:	e7c7      	b.n	8007fdc <_free_r+0x28>
 800804c:	b003      	add	sp, #12
 800804e:	bd30      	pop	{r4, r5, pc}
 8008050:	200000a8 	.word	0x200000a8

08008054 <_malloc_r>:
 8008054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008056:	1ccd      	adds	r5, r1, #3
 8008058:	f025 0503 	bic.w	r5, r5, #3
 800805c:	3508      	adds	r5, #8
 800805e:	2d0c      	cmp	r5, #12
 8008060:	bf38      	it	cc
 8008062:	250c      	movcc	r5, #12
 8008064:	2d00      	cmp	r5, #0
 8008066:	4606      	mov	r6, r0
 8008068:	db01      	blt.n	800806e <_malloc_r+0x1a>
 800806a:	42a9      	cmp	r1, r5
 800806c:	d903      	bls.n	8008076 <_malloc_r+0x22>
 800806e:	230c      	movs	r3, #12
 8008070:	6033      	str	r3, [r6, #0]
 8008072:	2000      	movs	r0, #0
 8008074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008076:	f000 f87d 	bl	8008174 <__malloc_lock>
 800807a:	4921      	ldr	r1, [pc, #132]	; (8008100 <_malloc_r+0xac>)
 800807c:	680a      	ldr	r2, [r1, #0]
 800807e:	4614      	mov	r4, r2
 8008080:	b99c      	cbnz	r4, 80080aa <_malloc_r+0x56>
 8008082:	4f20      	ldr	r7, [pc, #128]	; (8008104 <_malloc_r+0xb0>)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	b923      	cbnz	r3, 8008092 <_malloc_r+0x3e>
 8008088:	4621      	mov	r1, r4
 800808a:	4630      	mov	r0, r6
 800808c:	f000 f862 	bl	8008154 <_sbrk_r>
 8008090:	6038      	str	r0, [r7, #0]
 8008092:	4629      	mov	r1, r5
 8008094:	4630      	mov	r0, r6
 8008096:	f000 f85d 	bl	8008154 <_sbrk_r>
 800809a:	1c43      	adds	r3, r0, #1
 800809c:	d123      	bne.n	80080e6 <_malloc_r+0x92>
 800809e:	230c      	movs	r3, #12
 80080a0:	6033      	str	r3, [r6, #0]
 80080a2:	4630      	mov	r0, r6
 80080a4:	f000 f86c 	bl	8008180 <__malloc_unlock>
 80080a8:	e7e3      	b.n	8008072 <_malloc_r+0x1e>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	1b5b      	subs	r3, r3, r5
 80080ae:	d417      	bmi.n	80080e0 <_malloc_r+0x8c>
 80080b0:	2b0b      	cmp	r3, #11
 80080b2:	d903      	bls.n	80080bc <_malloc_r+0x68>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	441c      	add	r4, r3
 80080b8:	6025      	str	r5, [r4, #0]
 80080ba:	e004      	b.n	80080c6 <_malloc_r+0x72>
 80080bc:	6863      	ldr	r3, [r4, #4]
 80080be:	42a2      	cmp	r2, r4
 80080c0:	bf0c      	ite	eq
 80080c2:	600b      	streq	r3, [r1, #0]
 80080c4:	6053      	strne	r3, [r2, #4]
 80080c6:	4630      	mov	r0, r6
 80080c8:	f000 f85a 	bl	8008180 <__malloc_unlock>
 80080cc:	f104 000b 	add.w	r0, r4, #11
 80080d0:	1d23      	adds	r3, r4, #4
 80080d2:	f020 0007 	bic.w	r0, r0, #7
 80080d6:	1ac2      	subs	r2, r0, r3
 80080d8:	d0cc      	beq.n	8008074 <_malloc_r+0x20>
 80080da:	1a1b      	subs	r3, r3, r0
 80080dc:	50a3      	str	r3, [r4, r2]
 80080de:	e7c9      	b.n	8008074 <_malloc_r+0x20>
 80080e0:	4622      	mov	r2, r4
 80080e2:	6864      	ldr	r4, [r4, #4]
 80080e4:	e7cc      	b.n	8008080 <_malloc_r+0x2c>
 80080e6:	1cc4      	adds	r4, r0, #3
 80080e8:	f024 0403 	bic.w	r4, r4, #3
 80080ec:	42a0      	cmp	r0, r4
 80080ee:	d0e3      	beq.n	80080b8 <_malloc_r+0x64>
 80080f0:	1a21      	subs	r1, r4, r0
 80080f2:	4630      	mov	r0, r6
 80080f4:	f000 f82e 	bl	8008154 <_sbrk_r>
 80080f8:	3001      	adds	r0, #1
 80080fa:	d1dd      	bne.n	80080b8 <_malloc_r+0x64>
 80080fc:	e7cf      	b.n	800809e <_malloc_r+0x4a>
 80080fe:	bf00      	nop
 8008100:	200000a8 	.word	0x200000a8
 8008104:	200000ac 	.word	0x200000ac

08008108 <_realloc_r>:
 8008108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810a:	4607      	mov	r7, r0
 800810c:	4614      	mov	r4, r2
 800810e:	460e      	mov	r6, r1
 8008110:	b921      	cbnz	r1, 800811c <_realloc_r+0x14>
 8008112:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008116:	4611      	mov	r1, r2
 8008118:	f7ff bf9c 	b.w	8008054 <_malloc_r>
 800811c:	b922      	cbnz	r2, 8008128 <_realloc_r+0x20>
 800811e:	f7ff ff49 	bl	8007fb4 <_free_r>
 8008122:	4625      	mov	r5, r4
 8008124:	4628      	mov	r0, r5
 8008126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008128:	f000 f830 	bl	800818c <_malloc_usable_size_r>
 800812c:	42a0      	cmp	r0, r4
 800812e:	d20f      	bcs.n	8008150 <_realloc_r+0x48>
 8008130:	4621      	mov	r1, r4
 8008132:	4638      	mov	r0, r7
 8008134:	f7ff ff8e 	bl	8008054 <_malloc_r>
 8008138:	4605      	mov	r5, r0
 800813a:	2800      	cmp	r0, #0
 800813c:	d0f2      	beq.n	8008124 <_realloc_r+0x1c>
 800813e:	4631      	mov	r1, r6
 8008140:	4622      	mov	r2, r4
 8008142:	f7ff ff0f 	bl	8007f64 <memcpy>
 8008146:	4631      	mov	r1, r6
 8008148:	4638      	mov	r0, r7
 800814a:	f7ff ff33 	bl	8007fb4 <_free_r>
 800814e:	e7e9      	b.n	8008124 <_realloc_r+0x1c>
 8008150:	4635      	mov	r5, r6
 8008152:	e7e7      	b.n	8008124 <_realloc_r+0x1c>

08008154 <_sbrk_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d06      	ldr	r5, [pc, #24]	; (8008170 <_sbrk_r+0x1c>)
 8008158:	2300      	movs	r3, #0
 800815a:	4604      	mov	r4, r0
 800815c:	4608      	mov	r0, r1
 800815e:	602b      	str	r3, [r5, #0]
 8008160:	f7fa f9fa 	bl	8002558 <_sbrk>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_sbrk_r+0x1a>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_sbrk_r+0x1a>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	200004b8 	.word	0x200004b8

08008174 <__malloc_lock>:
 8008174:	4801      	ldr	r0, [pc, #4]	; (800817c <__malloc_lock+0x8>)
 8008176:	f000 b811 	b.w	800819c <__retarget_lock_acquire_recursive>
 800817a:	bf00      	nop
 800817c:	200004c0 	.word	0x200004c0

08008180 <__malloc_unlock>:
 8008180:	4801      	ldr	r0, [pc, #4]	; (8008188 <__malloc_unlock+0x8>)
 8008182:	f000 b80c 	b.w	800819e <__retarget_lock_release_recursive>
 8008186:	bf00      	nop
 8008188:	200004c0 	.word	0x200004c0

0800818c <_malloc_usable_size_r>:
 800818c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008190:	1f18      	subs	r0, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfbc      	itt	lt
 8008196:	580b      	ldrlt	r3, [r1, r0]
 8008198:	18c0      	addlt	r0, r0, r3
 800819a:	4770      	bx	lr

0800819c <__retarget_lock_acquire_recursive>:
 800819c:	4770      	bx	lr

0800819e <__retarget_lock_release_recursive>:
 800819e:	4770      	bx	lr

080081a0 <_init>:
 80081a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a2:	bf00      	nop
 80081a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a6:	bc08      	pop	{r3}
 80081a8:	469e      	mov	lr, r3
 80081aa:	4770      	bx	lr

080081ac <_fini>:
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ae:	bf00      	nop
 80081b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b2:	bc08      	pop	{r3}
 80081b4:	469e      	mov	lr, r3
 80081b6:	4770      	bx	lr
